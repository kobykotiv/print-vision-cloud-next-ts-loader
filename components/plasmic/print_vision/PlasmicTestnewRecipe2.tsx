// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2Up8DUmBB1Tx5dhznkvCW5
// Component: x4n2p2jN_qky

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import PageLayout from "../../PageLayout"; // plasmic-import: nHDfdLqBbJ3Q/component
import { AntdTabs } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { AntdTabItem } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 2Up8DUmBB1Tx5dhznkvCW5/projectcss
import sty from "./PlasmicTestnewRecipe2.module.css"; // plasmic-import: x4n2p2jN_qky/css

import UpArrowSvgrepoComSvgIcon from "./icons/PlasmicIcon__UpArrowSvgrepoComSvg"; // plasmic-import: Wmz2NrCSp4o2/icon

createPlasmicElementProxy;

export type PlasmicTestnewRecipe2__VariantMembers = {};
export type PlasmicTestnewRecipe2__VariantsArgs = {};
type VariantPropType = keyof PlasmicTestnewRecipe2__VariantsArgs;
export const PlasmicTestnewRecipe2__VariantProps = new Array<VariantPropType>();

export type PlasmicTestnewRecipe2__ArgsType = {};
type ArgPropType = keyof PlasmicTestnewRecipe2__ArgsType;
export const PlasmicTestnewRecipe2__ArgProps = new Array<ArgPropType>();

export type PlasmicTestnewRecipe2__OverridesType = {
  root?: Flex__<"div">;
  pageLayout?: Flex__<typeof PageLayout>;
  tabs?: Flex__<typeof AntdTabs>;
  table?: Flex__<typeof RichTable>;
  table2?: Flex__<typeof RichTable>;
  svg?: Flex__<"svg">;
  form?: Flex__<typeof FormWrapper>;
  input?: Flex__<typeof AntdInput>;
  input2?: Flex__<typeof AntdInput>;
  input3?: Flex__<typeof AntdInput>;
  input4?: Flex__<typeof AntdInput>;
  recipeChecker?: Flex__<"div">;
  printfulItemChecker?: Flex__<"div">;
  printifyItemChecker?: Flex__<"div">;
  button?: Flex__<typeof AntdButton>;
  printifyError?: Flex__<"div">;
  printfulError?: Flex__<"div">;
  maxRecipeError?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
};

export interface DefaultTestnewRecipe2Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTestnewRecipe2__RenderFunc(props: {
  variants: PlasmicTestnewRecipe2__VariantsArgs;
  args: PlasmicTestnewRecipe2__ArgsType;
  overrides: PlasmicTestnewRecipe2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "tabs.activeKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "table2.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table2.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table2.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table2.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "currentUserEmail",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return currentUser.email;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    queryGetPrintifyCatalog: usePlasmicDataOp(() => {
      return {
        sourceId: "fumskhn7h2QULzwkXAtFMC",
        opId: "18789b62-991d-4d09-9cec-643eb78edcc0",
        userArgs: {},
        cacheKey: `plasmic.$.18789b62-991d-4d09-9cec-643eb78edcc0.$.`,
        invalidatedKeys: null,
        roleId: "d035f350-edf5-4268-af03-4480b52522b0"
      };
    }),
    queryGetPrintfulCatalog: usePlasmicDataOp(() => {
      return {
        sourceId: "w9bT7zJHQBMsxuYyCMQHKC",
        opId: "e376d12e-b4b2-4021-b538-79698a2f4cb4",
        userArgs: {},
        cacheKey: `plasmic.$.e376d12e-b4b2-4021-b538-79698a2f4cb4.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    keys: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "17fa43f9-6d23-477e-b455-19a8cd444d69",
        userArgs: {},
        cacheKey: `plasmic.$.17fa43f9-6d23-477e-b455-19a8cd444d69.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    userRecipe: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "38ce998b-1e88-4204-9353-9422be47c2f3",
        userArgs: {},
        cacheKey: `plasmic.$.38ce998b-1e88-4204-9353-9422be47c2f3.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
            className={classNames("__wab_instance", sty.pageLayout)}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8S2VZ
                    )}
                    id={"top"}
                  >
                    {""}
                  </div>
                  <AntdTabs
                    data-plasmic-name={"tabs"}
                    data-plasmic-override={overrides.tabs}
                    activeKey={generateStateValueProp($state, [
                      "tabs",
                      "activeKey"
                    ])}
                    animateTabBar={true}
                    animateTabContent={false}
                    animated={true}
                    centered={true}
                    className={classNames("__wab_instance", sty.tabs)}
                    items={
                      <React.Fragment>
                        <AntdTabItem
                          className={classNames(
                            "__wab_instance",
                            sty.tabItem__z4IdB
                          )}
                          key={"1"}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jxzTs
                              )}
                            >
                              {"Printify"}
                            </div>
                          }
                        >
                          {(() => {
                            const child$Props = {
                              canSelectRows: "multiple",
                              className: classNames(
                                "__wab_instance",
                                sty.table
                              ),
                              data: (() => {
                                try {
                                  return $queries.queryGetPrintifyCatalog.data
                                    .response;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              defaultSize: "small",
                              fields: (() => {
                                const __composite = [
                                  { key: "id", fieldId: "id", dataType: null },
                                  { key: "title", fieldId: "title" },
                                  {
                                    key: "description",
                                    fieldId: "description"
                                  },
                                  { key: "brand", fieldId: "brand" },
                                  {
                                    key: "model",
                                    fieldId: "model",
                                    dataType: null
                                  },
                                  {
                                    key: "images",
                                    fieldId: "images",
                                    isHidden: null
                                  }
                                ];
                                __composite["0"]["dataType"] = "string";
                                __composite["4"]["dataType"] = "string";
                                __composite["5"]["isHidden"] = true;
                                return __composite;
                              })(),

                              hideColumnPicker: true,
                              hideDensity: true,
                              hideExports: true,
                              hideSearch: false,
                              hideSelectionBar: false,
                              onRowSelectionChanged: async (
                                ...eventArgs: any
                              ) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRowKey",
                                  ["table", "selectedRowKey"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRow",
                                  ["table", "selectedRow"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRows",
                                  ["table", "selectedRows"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRowKeys",
                                  ["table", "selectedRowKeys"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);

                                (async (rowKeys, rows) => {
                                  const $steps = {};

                                  $steps["runActionOnForm"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          tplRef: "form",
                                          action: "setFieldValue",
                                          args: [
                                            ["printify_blueprints"],
                                            $state.table.selectedRows.map(
                                              i => i.id
                                            )
                                          ]
                                        };
                                        return (({ tplRef, action, args }) => {
                                          return $refs?.[tplRef]?.[action]?.(
                                            ...(args ?? [])
                                          );
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["runActionOnForm"] != null &&
                                    typeof $steps["runActionOnForm"] ===
                                      "object" &&
                                    typeof $steps["runActionOnForm"].then ===
                                      "function"
                                  ) {
                                    $steps["runActionOnForm"] = await $steps[
                                      "runActionOnForm"
                                    ];
                                  }
                                }).apply(null, eventArgs);
                              },
                              pageSize: 20,
                              pagination: true,
                              scopeClassName: sty["table__instance"],
                              selectedRowKey: generateStateValueProp($state, [
                                "table",
                                "selectedRowKey"
                              ]),
                              selectedRowKeys: generateStateValueProp($state, [
                                "table",
                                "selectedRowKeys"
                              ]),
                              themeResetClassName: classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "selectedRowKey",
                                  plasmicStateName: "table.selectedRowKey"
                                },
                                {
                                  name: "selectedRow",
                                  plasmicStateName: "table.selectedRow"
                                },
                                {
                                  name: "selectedRows",
                                  plasmicStateName: "table.selectedRows"
                                },
                                {
                                  name: "selectedRowKeys",
                                  plasmicStateName: "table.selectedRowKeys"
                                }
                              ],
                              [],
                              RichTable_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <RichTable
                                data-plasmic-name={"table"}
                                data-plasmic-override={overrides.table}
                                {...child$Props}
                              />
                            );
                          })()}
                        </AntdTabItem>
                        <AntdTabItem
                          className={classNames(
                            "__wab_instance",
                            sty.tabItem__xc5Ii
                          )}
                          key={"2"}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__yolVu
                              )}
                            >
                              {"Printful"}
                            </div>
                          }
                        >
                          {(() => {
                            const child$Props = {
                              canSelectRows: "multiple",
                              className: classNames(
                                "__wab_instance",
                                sty.table2
                              ),
                              data: (() => {
                                try {
                                  return $queries.queryGetPrintfulCatalog.data.response.result.filter(
                                    entry => !entry.is_discontinued
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              fields: (() => {
                                const __composite = [
                                  { key: "id", fieldId: "id" },
                                  { key: "title", fieldId: "title" },
                                  {
                                    key: "main_category_id",
                                    fieldId: "main_category_id",
                                    isHidden: null
                                  },
                                  {
                                    key: "type",
                                    fieldId: "type",
                                    isHidden: null
                                  },
                                  {
                                    key: "description",
                                    fieldId: "description"
                                  },
                                  {
                                    key: "type_name",
                                    fieldId: "type_name",
                                    isHidden: null
                                  },
                                  { key: "brand", fieldId: "brand" },
                                  { key: "model", fieldId: "model" },
                                  {
                                    key: "image",
                                    fieldId: "image",
                                    isHidden: null
                                  },
                                  {
                                    key: "variant_count",
                                    fieldId: "variant_count",
                                    isHidden: null
                                  },
                                  {
                                    key: "currency",
                                    fieldId: "currency",
                                    isHidden: null
                                  },
                                  {
                                    key: "options",
                                    fieldId: "options",
                                    isHidden: null
                                  },
                                  {
                                    key: "dimensions",
                                    fieldId: "dimensions",
                                    isHidden: null
                                  },
                                  {
                                    key: "is_discontinued",
                                    fieldId: "is_discontinued",
                                    isHidden: null
                                  },
                                  {
                                    key: "avg_fulfillment_time",
                                    fieldId: "avg_fulfillment_time",
                                    isHidden: null
                                  },
                                  {
                                    key: "techniques",
                                    fieldId: "techniques",
                                    disableSorting: null,
                                    isHidden: null
                                  },
                                  {
                                    key: "files",
                                    fieldId: "files",
                                    isHidden: null
                                  },
                                  {
                                    key: "origin_country",
                                    fieldId: "origin_country",
                                    isHidden: null
                                  }
                                ];
                                __composite["2"]["isHidden"] = true;
                                __composite["3"]["isHidden"] = true;
                                __composite["5"]["isHidden"] = true;
                                __composite["8"]["isHidden"] = true;
                                __composite["9"]["isHidden"] = true;
                                __composite["10"]["isHidden"] = true;
                                __composite["11"]["isHidden"] = true;
                                __composite["12"]["isHidden"] = true;
                                __composite["13"]["isHidden"] = true;
                                __composite["14"]["isHidden"] = true;
                                __composite["15"]["disableSorting"] = false;
                                __composite["15"]["isHidden"] = true;
                                __composite["16"]["isHidden"] = true;
                                __composite["17"]["isHidden"] = true;
                                return __composite;
                              })(),

                              hideColumnPicker: true,
                              hideExports: true,
                              hideSearch: false,
                              hideSelectionBar: false,
                              onRowSelectionChanged: async (
                                ...eventArgs: any
                              ) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRowKey",
                                  ["table2", "selectedRowKey"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRow",
                                  ["table2", "selectedRow"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRows",
                                  ["table2", "selectedRows"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRowKeys",
                                  ["table2", "selectedRowKeys"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);

                                (async (rowKeys, rows) => {
                                  const $steps = {};

                                  $steps["runActionOnForm"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          tplRef: "form",
                                          action: "setFieldValue",
                                          args: [
                                            ["printful_blueprints"],
                                            $state.table2.selectedRows.map(
                                              i => i.id
                                            )
                                          ]
                                        };
                                        return (({ tplRef, action, args }) => {
                                          return $refs?.[tplRef]?.[action]?.(
                                            ...(args ?? [])
                                          );
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["runActionOnForm"] != null &&
                                    typeof $steps["runActionOnForm"] ===
                                      "object" &&
                                    typeof $steps["runActionOnForm"].then ===
                                      "function"
                                  ) {
                                    $steps["runActionOnForm"] = await $steps[
                                      "runActionOnForm"
                                    ];
                                  }
                                }).apply(null, eventArgs);
                              },
                              pageSize: 20,
                              pagination: true,
                              scopeClassName: sty["table2__instance"],
                              selectedRowKey: generateStateValueProp($state, [
                                "table2",
                                "selectedRowKey"
                              ]),
                              selectedRowKeys: generateStateValueProp($state, [
                                "table2",
                                "selectedRowKeys"
                              ]),
                              themeResetClassName: classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "selectedRowKey",
                                  plasmicStateName: "table2.selectedRowKey"
                                },
                                {
                                  name: "selectedRow",
                                  plasmicStateName: "table2.selectedRow"
                                },
                                {
                                  name: "selectedRows",
                                  plasmicStateName: "table2.selectedRows"
                                },
                                {
                                  name: "selectedRowKeys",
                                  plasmicStateName: "table2.selectedRowKeys"
                                }
                              ],
                              [],
                              RichTable_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <RichTable
                                data-plasmic-name={"table2"}
                                data-plasmic-override={overrides.table2}
                                {...child$Props}
                              />
                            );
                          })()}
                        </AntdTabItem>
                      </React.Fragment>
                    }
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "tabs",
                        "activeKey"
                      ]).apply(null, eventArgs);

                      (async activeKey => {
                        const $steps = {};

                        $steps["runActionOnForm"] = true
                          ? (() => {
                              const actionArgs = {
                                tplRef: "form",
                                action: "setFieldValue",
                                args: [
                                  ["printify_blueprints"],
                                  $state.table.selectedRows.map(i => i.id)
                                ]
                              };
                              return (({ tplRef, action, args }) => {
                                return $refs?.[tplRef]?.[action]?.(
                                  ...(args ?? [])
                                );
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runActionOnForm"] != null &&
                          typeof $steps["runActionOnForm"] === "object" &&
                          typeof $steps["runActionOnForm"].then === "function"
                        ) {
                          $steps["runActionOnForm"] = await $steps[
                            "runActionOnForm"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    sticky={false}
                    tabBarBackground={"#FFF"}
                    tabBarExtraContentRight={null}
                    tabPosition={"top"}
                    tabsDropdownScopeClassName={sty["tabs__tabsDropdown"]}
                    tabsScopeClassName={sty["tabs__tabs"]}
                    type={"line"}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__eekr)}
                  >
                    <UpArrowSvgrepoComSvgIcon
                      data-plasmic-name={"svg"}
                      data-plasmic-override={overrides.svg}
                      className={classNames(projectcss.all, sty.svg)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToTop"] = true
                          ? (() => {
                              const actionArgs = { destination: "#top" };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToTop"] != null &&
                          typeof $steps["goToTop"] === "object" &&
                          typeof $steps["goToTop"].then === "function"
                        ) {
                          $steps["goToTop"] = await $steps["goToTop"];
                        }
                      }}
                      role={"img"}
                    />
                  </div>
                </React.Fragment>
              )}
            </DataCtxReader__>
          </PageLayout>
          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.form),
              extendedOnValuesChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["form", "value"],
                  FormWrapper_Helpers
                ).apply(null, eventArgs);
              },
              formItems: [
                { label: "Name", name: "name", inputType: "Text" },
                { label: "Message", name: "message", inputType: "Text Area" }
              ],
              labelCol: { span: 8, horizontalOnly: true },
              layout: "vertical",
              mode: "advanced",
              onFinish: async values => {
                const $steps = {};

                $steps["updateVariable"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["currentUserEmail"]
                        },
                        operation: 0
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateVariable"] != null &&
                  typeof $steps["updateVariable"] === "object" &&
                  typeof $steps["updateVariable"].then === "function"
                ) {
                  $steps["updateVariable"] = await $steps["updateVariable"];
                }

                $steps["defaultSubmit"] = true
                  ? (() => {
                      const actionArgs = {
                        dataOp: {
                          sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
                          opId: "4e50cd19-d6b1-47b0-b4f0-11eace351dd5",
                          userArgs: {
                            variables: [$state.form.value]
                          },
                          cacheKey: null,
                          invalidatedKeys: ["plasmic_refresh_all"],
                          roleId: "d035f350-edf5-4268-af03-4480b52522b0"
                        }
                      };
                      return (async ({ dataOp, continueOnError }) => {
                        try {
                          const response = await executePlasmicDataOp(dataOp, {
                            userAuthToken: dataSourcesCtx?.userAuthToken,
                            user: dataSourcesCtx?.user
                          });
                          await plasmicInvalidate(dataOp.invalidatedKeys);
                          return response;
                        } catch (e) {
                          if (!continueOnError) {
                            throw e;
                          }
                          return e;
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["defaultSubmit"] != null &&
                  typeof $steps["defaultSubmit"] === "object" &&
                  typeof $steps["defaultSubmit"].then === "function"
                ) {
                  $steps["defaultSubmit"] = await $steps["defaultSubmit"];
                }

                $steps["refreshData"] = true
                  ? (() => {
                      const actionArgs = {
                        queryInvalidation: ["plasmic_refresh_all"]
                      };
                      return (async ({ queryInvalidation }) => {
                        if (!queryInvalidation) {
                          return;
                        }
                        await plasmicInvalidate(queryInvalidation);
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["refreshData"] != null &&
                  typeof $steps["refreshData"] === "object" &&
                  typeof $steps["refreshData"].then === "function"
                ) {
                  $steps["refreshData"] = await $steps["refreshData"];
                }

                $steps["goToRecipes"] = true
                  ? (() => {
                      const actionArgs = { destination: `/recipes` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToRecipes"] != null &&
                  typeof $steps["goToRecipes"] === "object" &&
                  typeof $steps["goToRecipes"].then === "function"
                ) {
                  $steps["goToRecipes"] = await $steps["goToRecipes"];
                }
              },
              onIsSubmittingChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "isSubmitting",
                  ["form", "isSubmitting"],
                  FormWrapper_Helpers
                ).apply(null, eventArgs);
              },
              ref: ref => {
                $refs["form"] = ref;
              },
              submitSlot: null,
              wrapperCol: { span: 16, horizontalOnly: true }
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "value",
                  plasmicStateName: "form.value"
                },
                {
                  name: "isSubmitting",
                  plasmicStateName: "form.isSubmitting"
                }
              ],
              [],
              FormWrapper_Helpers ?? {},
              child$Props
            );

            return (
              <FormWrapper
                data-plasmic-name={"form"}
                data-plasmic-override={overrides.form}
                {...child$Props}
              >
                <FormItemWrapper
                  className={classNames(
                    "__wab_instance",
                    sty.formField___3EvX7
                  )}
                  hidden={true}
                  initialValue={(() => {
                    try {
                      return currentUser.email;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dayEy
                      )}
                    >
                      {"Label"}
                    </div>
                  }
                  name={"owner"}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.input),
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input", "value"],
                          AntdInput_Helpers
                        ).apply(null, eventArgs);
                      },
                      value: generateStateValueProp($state, ["input", "value"])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "input.value"
                        }
                      ],
                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdInput
                        data-plasmic-name={"input"}
                        data-plasmic-override={overrides.input}
                        {...child$Props}
                      />
                    );
                  })()}
                </FormItemWrapper>
                <FormItemWrapper
                  className={classNames(
                    "__wab_instance",
                    sty.formField___1ZqUo
                  )}
                  initialValue={"Untitled"}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fitRj
                      )}
                    >
                      {"Title"}
                    </div>
                  }
                  name={"title"}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.input2),
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input2", "value"],
                          AntdInput_Helpers
                        ).apply(null, eventArgs);
                      },
                      value: generateStateValueProp($state, ["input2", "value"])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "input2.value"
                        }
                      ],
                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdInput
                        data-plasmic-name={"input2"}
                        data-plasmic-override={overrides.input2}
                        {...child$Props}
                      />
                    );
                  })()}
                </FormItemWrapper>
                <FormItemWrapper
                  className={classNames("__wab_instance", sty.formField__hg97)}
                  initialValue={(() => {
                    try {
                      return $state.table.selectedRows.map(b => b.id);
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bdpuh
                      )}
                    >
                      {"Printify_blueprints"}
                    </div>
                  }
                  name={"printify_blueprints"}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.input3),
                      disabled: true,
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input3", "value"],
                          AntdInput_Helpers
                        ).apply(null, eventArgs);
                      },
                      readOnly: false,
                      value: generateStateValueProp($state, ["input3", "value"])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "input3.value"
                        }
                      ],
                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdInput
                        data-plasmic-name={"input3"}
                        data-plasmic-override={overrides.input3}
                        {...child$Props}
                      />
                    );
                  })()}
                </FormItemWrapper>
                <FormItemWrapper
                  className={classNames("__wab_instance", sty.formField__tJIhq)}
                  initialValue={(() => {
                    try {
                      return $state.table2.selectedRows.map(b => b.id);
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aeK31
                      )}
                    >
                      {"Printful_Blueprints"}
                    </div>
                  }
                  name={"printful_blueprints"}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.input4),
                      disabled: true,
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input4", "value"],
                          AntdInput_Helpers
                        ).apply(null, eventArgs);
                      },
                      readOnly: false,
                      value: generateStateValueProp($state, ["input4", "value"])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "input4.value"
                        }
                      ],
                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdInput
                        data-plasmic-name={"input4"}
                        data-plasmic-override={overrides.input4}
                        {...child$Props}
                      />
                    );
                  })()}
                </FormItemWrapper>
                {(() => {
                  try {
                    return (() => {
                      const userRecipeCount = $queries.userRecipe.data.length;
                      const majorPlan = $queries.keys.data[0].major_plan;

                      if (
                        (majorPlan === 0 && userRecipeCount > 2) ||
                        (majorPlan === 1 && userRecipeCount > 9) ||
                        (majorPlan === 2 && userRecipeCount > 19) ||
                        (majorPlan === 3 && userRecipeCount > 2000)
                      ) {
                        return false;
                      } else {
                        return true;
                      }
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"recipeChecker"}
                    data-plasmic-override={overrides.recipeChecker}
                    className={classNames(projectcss.all, sty.recipeChecker)}
                  >
                    {(() => {
                      try {
                        return (() => {
                          const selectedRowsCount =
                            $state.table2.selectedRows.map(b => b.id).length;
                          const majorPlan = $queries.keys.data[0].major_plan;
                          if (
                            (majorPlan === 0 && selectedRowsCount > 3) ||
                            (majorPlan === 1 && selectedRowsCount > 10) ||
                            (majorPlan === 2 && selectedRowsCount > 30) ||
                            (majorPlan === 3 && selectedRowsCount > 200)
                          ) {
                            return false;
                          } else {
                            return true;
                          }
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        data-plasmic-name={"printfulItemChecker"}
                        data-plasmic-override={overrides.printfulItemChecker}
                        className={classNames(
                          projectcss.all,
                          sty.printfulItemChecker
                        )}
                      >
                        {(() => {
                          try {
                            return (() => {
                              const selectedRowsCount =
                                $state.table.selectedRows.map(b => b.id).length;
                              const majorPlan =
                                $queries.keys.data[0].major_plan;
                              if (
                                (majorPlan === 0 && selectedRowsCount > 3) ||
                                (majorPlan === 1 && selectedRowsCount > 10) ||
                                (majorPlan === 2 && selectedRowsCount > 30) ||
                                (majorPlan === 3 && selectedRowsCount > 200)
                              ) {
                                return false;
                              } else {
                                return true;
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            data-plasmic-name={"printifyItemChecker"}
                            data-plasmic-override={
                              overrides.printifyItemChecker
                            }
                            className={classNames(
                              projectcss.all,
                              sty.printifyItemChecker
                            )}
                          >
                            <AntdButton
                              data-plasmic-name={"button"}
                              data-plasmic-override={overrides.button}
                              className={classNames(
                                "__wab_instance",
                                sty.button
                              )}
                              shape={"round"}
                              submitsForm={true}
                              type={"primary"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__z5Wjs
                                )}
                              >
                                {"Submit"}
                              </div>
                            </AntdButton>
                          </div>
                        ) : null}
                      </div>
                    ) : null}
                  </div>
                ) : null}
                {(() => {
                  try {
                    return $state.table.selectedRows !== undefined;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"printifyError"}
                    data-plasmic-override={overrides.printifyError}
                    className={classNames(projectcss.all, sty.printifyError)}
                  >
                    {(() => {
                      try {
                        return (() => {
                          const selectedRowsCount =
                            $state.table.selectedRows.map(b => b.id).length;
                          const majorPlan = $queries.keys.data[0].major_plan;
                          if (
                            (majorPlan === 0 && selectedRowsCount > 3) ||
                            (majorPlan === 1 && selectedRowsCount > 10) ||
                            (majorPlan === 2 && selectedRowsCount > 30) ||
                            (majorPlan === 3 && selectedRowsCount > 200)
                          ) {
                            return true;
                          } else {
                            return false;
                          }
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___6XOT
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ov5Dv
                          )}
                        >
                          {
                            "Upgrade to a higher plan to add more Printify items to your recipe."
                          }
                        </div>
                      </div>
                    ) : null}
                  </div>
                ) : null}
                {(() => {
                  try {
                    return $state.table2.selectedRows !== undefined;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"printfulError"}
                    data-plasmic-override={overrides.printfulError}
                    className={classNames(projectcss.all, sty.printfulError)}
                  >
                    {(() => {
                      try {
                        return (() => {
                          const selectedRowsCount =
                            $state.table2.selectedRows.map(b => b.id).length;
                          const majorPlan = $queries.keys.data[0].major_plan;
                          if (
                            (majorPlan === 0 && selectedRowsCount > 3) ||
                            (majorPlan === 1 && selectedRowsCount > 10) ||
                            (majorPlan === 2 && selectedRowsCount > 30) ||
                            (majorPlan === 3 && selectedRowsCount > 200)
                          ) {
                            return true;
                          } else {
                            return false;
                          }
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dgsMf
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__f8ZoE
                          )}
                        >
                          {
                            "Upgrade to a higher plan to add more Printful items to your recipe."
                          }
                        </div>
                      </div>
                    ) : null}
                  </div>
                ) : null}
                {(() => {
                  try {
                    return !(() => {
                      const userRecipeCount = $queries.userRecipe.data.length;
                      const majorPlan = $queries.keys.data[0].major_plan;
                      if (
                        (majorPlan === 0 && userRecipeCount > 2) ||
                        (majorPlan === 1 && userRecipeCount > 9) ||
                        (majorPlan === 2 && userRecipeCount > 19) ||
                        (majorPlan === 3 && userRecipeCount > 2000)
                      ) {
                        return false;
                      } else {
                        return true;
                      }
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"maxRecipeError"}
                    data-plasmic-override={overrides.maxRecipeError}
                    className={classNames(projectcss.all, sty.maxRecipeError)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__bTvGs)}
                    >
                      {(() => {
                        try {
                          return true;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kf2Zx
                          )}
                        >
                          {"Upgrade to a higher plan to create more recipes."}
                        </div>
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__an9Ap
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                const majorPlan =
                                  $queries.keys.data[0].major_plan;
                                switch (majorPlan) {
                                  case 0:
                                    return "max recipe of 3";
                                  case 1:
                                    return "max recipe of 10";
                                  case 2:
                                    return "max recipe of 20";
                                  case 3:
                                    return "Contact us";
                                  default:
                                    return "";
                                }
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return " ";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </Stack__>
                  </div>
                ) : null}
              </FormWrapper>
            );
          })()}
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["refreshData"] = true
                ? (() => {
                    const actionArgs = {
                      queryInvalidation: ["plasmic_refresh_all"]
                    };
                    return (async ({ queryInvalidation }) => {
                      if (!queryInvalidation) {
                        return;
                      }
                      await plasmicInvalidate(queryInvalidation);
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["refreshData"] != null &&
                typeof $steps["refreshData"] === "object" &&
                typeof $steps["refreshData"].then === "function"
              ) {
                $steps["refreshData"] = await $steps["refreshData"];
              }
            }}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "tabs",
    "table",
    "table2",
    "svg",
    "form",
    "input",
    "input2",
    "input3",
    "input4",
    "recipeChecker",
    "printfulItemChecker",
    "printifyItemChecker",
    "button",
    "printifyError",
    "printfulError",
    "maxRecipeError",
    "sideEffect"
  ],
  pageLayout: ["pageLayout", "tabs", "table", "table2", "svg"],
  tabs: ["tabs", "table", "table2"],
  table: ["table"],
  table2: ["table2"],
  svg: ["svg"],
  form: [
    "form",
    "input",
    "input2",
    "input3",
    "input4",
    "recipeChecker",
    "printfulItemChecker",
    "printifyItemChecker",
    "button",
    "printifyError",
    "printfulError",
    "maxRecipeError"
  ],
  input: ["input"],
  input2: ["input2"],
  input3: ["input3"],
  input4: ["input4"],
  recipeChecker: [
    "recipeChecker",
    "printfulItemChecker",
    "printifyItemChecker",
    "button"
  ],
  printfulItemChecker: ["printfulItemChecker", "printifyItemChecker", "button"],
  printifyItemChecker: ["printifyItemChecker", "button"],
  button: ["button"],
  printifyError: ["printifyError"],
  printfulError: ["printfulError"],
  maxRecipeError: ["maxRecipeError"],
  sideEffect: ["sideEffect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  tabs: typeof AntdTabs;
  table: typeof RichTable;
  table2: typeof RichTable;
  svg: "svg";
  form: typeof FormWrapper;
  input: typeof AntdInput;
  input2: typeof AntdInput;
  input3: typeof AntdInput;
  input4: typeof AntdInput;
  recipeChecker: "div";
  printfulItemChecker: "div";
  printifyItemChecker: "div";
  button: typeof AntdButton;
  printifyError: "div";
  printfulError: "div";
  maxRecipeError: "div";
  sideEffect: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTestnewRecipe2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTestnewRecipe2__VariantsArgs;
    args?: PlasmicTestnewRecipe2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTestnewRecipe2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTestnewRecipe2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTestnewRecipe2__ArgProps,
          internalVariantPropNames: PlasmicTestnewRecipe2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTestnewRecipe2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTestnewRecipe2";
  } else {
    func.displayName = `PlasmicTestnewRecipe2.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={"d035f350-edf5-4268-af03-4480b52522b0"}
      appId={"2Up8DUmBB1Tx5dhznkvCW5"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "2Up8DUmBB1Tx5dhznkvCW5"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicTestnewRecipe2 = Object.assign(
  // Top-level PlasmicTestnewRecipe2 renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    tabs: makeNodeComponent("tabs"),
    table: makeNodeComponent("table"),
    table2: makeNodeComponent("table2"),
    svg: makeNodeComponent("svg"),
    form: makeNodeComponent("form"),
    input: makeNodeComponent("input"),
    input2: makeNodeComponent("input2"),
    input3: makeNodeComponent("input3"),
    input4: makeNodeComponent("input4"),
    recipeChecker: makeNodeComponent("recipeChecker"),
    printfulItemChecker: makeNodeComponent("printfulItemChecker"),
    printifyItemChecker: makeNodeComponent("printifyItemChecker"),
    button: makeNodeComponent("button"),
    printifyError: makeNodeComponent("printifyError"),
    printfulError: makeNodeComponent("printfulError"),
    maxRecipeError: makeNodeComponent("maxRecipeError"),
    sideEffect: makeNodeComponent("sideEffect"),

    // Metadata about props expected for PlasmicTestnewRecipe2
    internalVariantProps: PlasmicTestnewRecipe2__VariantProps,
    internalArgProps: PlasmicTestnewRecipe2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicTestnewRecipe2;
/* prettier-ignore-end */
