// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2Up8DUmBB1Tx5dhznkvCW5
// Component: UU2fpoxpMi1Y

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ButtonOutline from "../../ButtonOutline"; // plasmic-import: 296qaVSDm1cX/component
import Badge from "../../Badge"; // plasmic-import: e0uKBFx1iVNq/component

import { useScreenVariants as useScreenVariantsgFgHdl6TgBHl } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: GFgHdl6tgBHl/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 2Up8DUmBB1Tx5dhznkvCW5/projectcss
import sty from "./PlasmicPricing.module.css"; // plasmic-import: UU2fpoxpMi1Y/css

import CheckSvgrepoComSvgIcon from "./icons/PlasmicIcon__CheckSvgrepoComSvg"; // plasmic-import: a9GuvEt2Pn65/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: JUZVbki5w54S/icon
import AdSvgIcon from "./icons/PlasmicIcon__AdSvg"; // plasmic-import: 5X99CdIwgZup/icon

createPlasmicElementProxy;

export type PlasmicPricing__VariantMembers = {
  otherPlan: "yearly";
};
export type PlasmicPricing__VariantsArgs = {
  otherPlan?: SingleChoiceArg<"yearly">;
};
type VariantPropType = keyof PlasmicPricing__VariantsArgs;
export const PlasmicPricing__VariantProps = new Array<VariantPropType>(
  "otherPlan"
);

export type PlasmicPricing__ArgsType = {
  slot?: React.ReactNode;
  children?: React.ReactNode;
  slot2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicPricing__ArgsType;
export const PlasmicPricing__ArgProps = new Array<ArgPropType>(
  "slot",
  "children",
  "slot2"
);

export type PlasmicPricing__OverridesType = {
  base?: Flex__<"div">;
  tab?: Flex__<"div">;
  item?: Flex__<"div">;
  item2?: Flex__<"div">;
  item3?: Flex__<"div">;
  cardMajorContainer?: Flex__<"div">;
  pricingCard?: Flex__<"div">;
  gradientOverlay?: Flex__<"div">;
  cardHeader?: Flex__<"div">;
  header?: Flex__<"div">;
  textWrap2?: Flex__<"div">;
  priceWrap?: Flex__<"div">;
  cardFooter?: Flex__<"div">;
  highlightItem?: Flex__<"div">;
  highlightItem2?: Flex__<"div">;
  highlightItem3?: Flex__<"div">;
  highlightItem4?: Flex__<"div">;
  highlightItem5?: Flex__<"div">;
  highlightItem6?: Flex__<"div">;
  highlightItem7?: Flex__<"div">;
  pricingCard2?: Flex__<"div">;
  gradientOverlay2?: Flex__<"div">;
  cardHeader2?: Flex__<"div">;
  header2?: Flex__<"div">;
  badge?: Flex__<typeof Badge>;
  textWrap3?: Flex__<"div">;
  priceWrap2?: Flex__<"div">;
  cardFooter2?: Flex__<"div">;
  highlightItem8?: Flex__<"div">;
  highlightItem9?: Flex__<"div">;
  highlightItem10?: Flex__<"div">;
  highlightItem11?: Flex__<"div">;
  highlightItem12?: Flex__<"div">;
  highlightItem13?: Flex__<"div">;
  highlightItem14?: Flex__<"div">;
  pricingCard3?: Flex__<"div">;
  gradientOverlay3?: Flex__<"div">;
  cardHeader3?: Flex__<"div">;
  header3?: Flex__<"div">;
  textWrap4?: Flex__<"div">;
  priceWrap3?: Flex__<"div">;
  cardFooter3?: Flex__<"div">;
  highlightItem15?: Flex__<"div">;
  highlightItem16?: Flex__<"div">;
  highlightItem17?: Flex__<"div">;
  highlightItem18?: Flex__<"div">;
  highlightItem19?: Flex__<"div">;
  highlightItem20?: Flex__<"div">;
  highlightItem21?: Flex__<"div">;
  columns?: Flex__<"div">;
};

export interface DefaultPricingProps {
  slot?: React.ReactNode;
  children?: React.ReactNode;
  slot2?: React.ReactNode;
  otherPlan?: SingleChoiceArg<"yearly">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPricing__RenderFunc(props: {
  variants: PlasmicPricing__VariantsArgs;
  args: PlasmicPricing__ArgsType;
  overrides: PlasmicPricing__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "otherPlan",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.otherPlan
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgFgHdl6TgBHl()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"base"}
      data-plasmic-override={overrides.base}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.base,
        {
          [sty.baseotherPlan_yearly]: hasVariant($state, "otherPlan", "yearly")
        }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"tab"}
        data-plasmic-override={overrides.tab}
        hasGap={true}
        className={classNames(projectcss.all, sty.tab)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"item"}
          data-plasmic-override={overrides.item}
          hasGap={true}
          className={classNames(projectcss.all, sty.item, {
            [sty.itemotherPlan_yearly]: hasVariant(
              $state,
              "otherPlan",
              "yearly"
            )
          })}
          onClick={async event => {
            const $steps = {};

            $steps["updateOtherPlan"] = true
              ? (() => {
                  const actionArgs = { vgroup: "otherPlan", operation: 1 };
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }

                    $stateSet($state, vgroup, undefined);
                    return undefined;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateOtherPlan"] != null &&
              typeof $steps["updateOtherPlan"] === "object" &&
              typeof $steps["updateOtherPlan"].then === "function"
            ) {
              $steps["updateOtherPlan"] = await $steps["updateOtherPlan"];
            }
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vZsTc,
              {
                [sty.textotherPlan_yearly__vZsTc7Psvc]: hasVariant(
                  $state,
                  "otherPlan",
                  "yearly"
                )
              }
            )}
          >
            {"Monthly"}
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"item2"}
          data-plasmic-override={overrides.item2}
          hasGap={true}
          className={classNames(projectcss.all, sty.item2, {
            [sty.item2otherPlan_yearly]: hasVariant(
              $state,
              "otherPlan",
              "yearly"
            )
          })}
          onClick={async event => {
            const $steps = {};

            $steps["updateOtherPlan"] = true
              ? (() => {
                  const actionArgs = {
                    vgroup: "otherPlan",
                    operation: 0,
                    value: "yearly"
                  };
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }

                    $stateSet($state, vgroup, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateOtherPlan"] != null &&
              typeof $steps["updateOtherPlan"] === "object" &&
              typeof $steps["updateOtherPlan"].then === "function"
            ) {
              $steps["updateOtherPlan"] = await $steps["updateOtherPlan"];
            }
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__pKkRb,
              {
                [sty.textotherPlan_yearly__pKkRb7Psvc]: hasVariant(
                  $state,
                  "otherPlan",
                  "yearly"
                )
              }
            )}
          >
            {"Yearly"}
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"item3"}
            data-plasmic-override={overrides.item3}
            hasGap={true}
            className={classNames(projectcss.all, sty.item3)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ypSm,
                {
                  [sty.textotherPlan_yearly__ypSm7Psvc]: hasVariant(
                    $state,
                    "otherPlan",
                    "yearly"
                  )
                }
              )}
            >
              {"Save 30%"}
            </div>
          </Stack__>
        </Stack__>
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"cardMajorContainer"}
        data-plasmic-override={overrides.cardMajorContainer}
        hasGap={true}
        className={classNames(projectcss.all, sty.cardMajorContainer)}
      >
        <div
          data-plasmic-name={"pricingCard"}
          data-plasmic-override={overrides.pricingCard}
          className={classNames(projectcss.all, sty.pricingCard, {
            [sty.pricingCardotherPlan_yearly]: hasVariant(
              $state,
              "otherPlan",
              "yearly"
            )
          })}
        >
          <div
            data-plasmic-name={"gradientOverlay"}
            data-plasmic-override={overrides.gradientOverlay}
            className={classNames(projectcss.all, sty.gradientOverlay)}
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"cardHeader"}
            data-plasmic-override={overrides.cardHeader}
            hasGap={true}
            className={classNames(projectcss.all, sty.cardHeader, {
              [sty.cardHeaderotherPlan_yearly]: hasVariant(
                $state,
                "otherPlan",
                "yearly"
              )
            })}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              hasGap={true}
              className={classNames(projectcss.all, sty.header)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"textWrap2"}
                data-plasmic-override={overrides.textWrap2}
                hasGap={true}
                className={classNames(projectcss.all, sty.textWrap2)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zCucL
                  )}
                >
                  {"Creator"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eMlgC
                  )}
                >
                  {"Great for small-scale agencies with a few clients"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"priceWrap"}
                data-plasmic-override={overrides.priceWrap}
                hasGap={true}
                className={classNames(projectcss.all, sty.priceWrap)}
              >
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__u7Y06
                  )}
                >
                  {"$19"}
                </h2>
                <div className={classNames(projectcss.all, sty.freeBox__bRx41)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__ug3Lk
                    )}
                  >
                    {"/month"}
                  </h2>
                </div>
              </Stack__>
            </Stack__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__l79Gj
              )}
              component={Link}
              platform={"nextjs"}
            >
              {renderPlasmicSlot({
                defaultContents: (
                  <ButtonOutline
                    className={classNames(
                      "__wab_instance",
                      sty.buttonOutline__dIhkY
                    )}
                    styles={"wide"}
                  >
                    {"Get Started"}
                  </ButtonOutline>
                ),
                value: args.slot
              })}
            </PlasmicLink__>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"cardFooter"}
            data-plasmic-override={overrides.cardFooter}
            hasGap={true}
            className={classNames(projectcss.all, sty.cardFooter)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"highlightItem"}
              data-plasmic-override={overrides.highlightItem}
              hasGap={true}
              className={classNames(projectcss.all, sty.highlightItem)}
            >
              <CheckSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__cca0M)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jYmy5
                )}
              >
                {"Email Support"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"highlightItem2"}
              data-plasmic-override={overrides.highlightItem2}
              hasGap={true}
              className={classNames(projectcss.all, sty.highlightItem2)}
            >
              <CheckSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__es7Xn)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cUjly
                )}
              >
                {"Email Support"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"highlightItem3"}
              data-plasmic-override={overrides.highlightItem3}
              hasGap={true}
              className={classNames(projectcss.all, sty.highlightItem3)}
            >
              <CheckSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__eLrIk)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ksXqE
                )}
              >
                {"Email Support"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"highlightItem4"}
              data-plasmic-override={overrides.highlightItem4}
              hasGap={true}
              className={classNames(projectcss.all, sty.highlightItem4)}
            >
              <CheckSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__gSkyC)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qdjl6
                )}
              >
                {"Email Support"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"highlightItem5"}
              data-plasmic-override={overrides.highlightItem5}
              hasGap={true}
              className={classNames(projectcss.all, sty.highlightItem5)}
            >
              <CheckSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__a8NSw)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__io9Ch
                )}
              >
                {"Email Support"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"highlightItem6"}
              data-plasmic-override={overrides.highlightItem6}
              hasGap={true}
              className={classNames(projectcss.all, sty.highlightItem6)}
            >
              <CheckSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__jPz1J)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gO
                )}
              >
                {"Email Support"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"highlightItem7"}
              data-plasmic-override={overrides.highlightItem7}
              hasGap={true}
              className={classNames(projectcss.all, sty.highlightItem7)}
            >
              <CheckSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__uYtrY)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pkXxz
                )}
              >
                {"Email Support"}
              </div>
            </Stack__>
          </Stack__>
        </div>
        <div
          data-plasmic-name={"pricingCard2"}
          data-plasmic-override={overrides.pricingCard2}
          className={classNames(projectcss.all, sty.pricingCard2)}
        >
          <div
            data-plasmic-name={"gradientOverlay2"}
            data-plasmic-override={overrides.gradientOverlay2}
            className={classNames(projectcss.all, sty.gradientOverlay2)}
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"cardHeader2"}
            data-plasmic-override={overrides.cardHeader2}
            hasGap={true}
            className={classNames(projectcss.all, sty.cardHeader2, {
              [sty.cardHeader2otherPlan_yearly]: hasVariant(
                $state,
                "otherPlan",
                "yearly"
              )
            })}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"header2"}
              data-plasmic-override={overrides.header2}
              hasGap={true}
              className={classNames(projectcss.all, sty.header2)}
            >
              <Badge
                data-plasmic-name={"badge"}
                data-plasmic-override={overrides.badge}
                className={classNames("__wab_instance", sty.badge)}
                otherStyles={"noDot"}
              >
                {"Most Popular"}
              </Badge>
              <Stack__
                as={"div"}
                data-plasmic-name={"textWrap3"}
                data-plasmic-override={overrides.textWrap3}
                hasGap={true}
                className={classNames(projectcss.all, sty.textWrap3)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__redz
                  )}
                >
                  {"Pro"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__g0B3E
                  )}
                >
                  {"Great for agencies looking to scale and automate."}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"priceWrap2"}
                data-plasmic-override={overrides.priceWrap2}
                hasGap={true}
                className={classNames(projectcss.all, sty.priceWrap2)}
              >
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2___7CFdg,
                    {
                      [sty.h2otherPlan_yearly___7CFdg7Psvc]: hasVariant(
                        $state,
                        "otherPlan",
                        "yearly"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "otherPlan", "yearly") ? "$2970" : "$29"}
                </h2>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__o31M1, {
                    [sty.freeBoxotherPlan_yearly__o31M17Psvc]: hasVariant(
                      $state,
                      "otherPlan",
                      "yearly"
                    )
                  })}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__iWn6X,
                      {
                        [sty.h2otherPlan_yearly__iWn6X7Psvc]: hasVariant(
                          $state,
                          "otherPlan",
                          "yearly"
                        )
                      }
                    )}
                  >
                    {"/month"}
                  </h2>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__vIgb,
                      {
                        [sty.h2otherPlan_yearly__vIgb7Psvc]: hasVariant(
                          $state,
                          "otherPlan",
                          "yearly"
                        )
                      }
                    )}
                  >
                    {"/year"}
                  </h2>
                </Stack__>
              </Stack__>
            </Stack__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link___0EcRt
              )}
              component={Link}
              onClick={async event => {
                const $steps = {};
              }}
              platform={"nextjs"}
            >
              {renderPlasmicSlot({
                defaultContents: (
                  <ButtonOutline
                    className={classNames(
                      "__wab_instance",
                      sty.buttonOutline__jJBot
                    )}
                    styles={"blue"}
                  >
                    {"Get Started"}
                  </ButtonOutline>
                ),
                value: args.children
              })}
            </PlasmicLink__>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"cardFooter2"}
            data-plasmic-override={overrides.cardFooter2}
            hasGap={true}
            className={classNames(projectcss.all, sty.cardFooter2)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"highlightItem8"}
              data-plasmic-override={overrides.highlightItem8}
              hasGap={true}
              className={classNames(projectcss.all, sty.highlightItem8)}
            >
              <CheckSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__yIbSd)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ukjC
                )}
              >
                {"Email Support"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"highlightItem9"}
              data-plasmic-override={overrides.highlightItem9}
              hasGap={true}
              className={classNames(projectcss.all, sty.highlightItem9)}
            >
              <CheckSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg___9GZdH)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__catrJ
                )}
              >
                {"Email Support"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"highlightItem10"}
              data-plasmic-override={overrides.highlightItem10}
              hasGap={true}
              className={classNames(projectcss.all, sty.highlightItem10)}
            >
              <CheckSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__pTnB)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cXyLq
                )}
              >
                {"Email Support"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"highlightItem11"}
              data-plasmic-override={overrides.highlightItem11}
              hasGap={true}
              className={classNames(projectcss.all, sty.highlightItem11)}
            >
              <CheckSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__hp0A)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rxTtn
                )}
              >
                {"Email Support"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"highlightItem12"}
              data-plasmic-override={overrides.highlightItem12}
              hasGap={true}
              className={classNames(projectcss.all, sty.highlightItem12)}
            >
              <CheckSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg___3Tu0E)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__o8Xk0
                )}
              >
                {"Email Support"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"highlightItem13"}
              data-plasmic-override={overrides.highlightItem13}
              hasGap={true}
              className={classNames(projectcss.all, sty.highlightItem13)}
            >
              <CheckSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__c8CY)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5IZrh
                )}
              >
                {"Email Support"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"highlightItem14"}
              data-plasmic-override={overrides.highlightItem14}
              hasGap={true}
              className={classNames(projectcss.all, sty.highlightItem14)}
            >
              <CheckSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__pqkFu)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lcXWb
                )}
              >
                {"Email Support"}
              </div>
            </Stack__>
          </Stack__>
        </div>
        <div
          data-plasmic-name={"pricingCard3"}
          data-plasmic-override={overrides.pricingCard3}
          className={classNames(projectcss.all, sty.pricingCard3)}
        >
          <div
            data-plasmic-name={"gradientOverlay3"}
            data-plasmic-override={overrides.gradientOverlay3}
            className={classNames(projectcss.all, sty.gradientOverlay3)}
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"cardHeader3"}
            data-plasmic-override={overrides.cardHeader3}
            hasGap={true}
            className={classNames(projectcss.all, sty.cardHeader3, {
              [sty.cardHeader3otherPlan_yearly]: hasVariant(
                $state,
                "otherPlan",
                "yearly"
              )
            })}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"header3"}
              data-plasmic-override={overrides.header3}
              hasGap={true}
              className={classNames(projectcss.all, sty.header3)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"textWrap4"}
                data-plasmic-override={overrides.textWrap4}
                hasGap={true}
                className={classNames(projectcss.all, sty.textWrap4)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6HQOd
                  )}
                >
                  {"Enterprise"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___06WSk
                  )}
                >
                  {"Great for agencies looking to scale and automate."}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"priceWrap3"}
                data-plasmic-override={overrides.priceWrap3}
                hasGap={true}
                className={classNames(projectcss.all, sty.priceWrap3)}
              >
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__pdwT2,
                    {
                      [sty.h2otherPlan_yearly__pdwT27Psvc]: hasVariant(
                        $state,
                        "otherPlan",
                        "yearly"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "otherPlan", "yearly") ? "$2970" : "$99"}
                </h2>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___7Uo6X, {
                    [sty.freeBoxotherPlan_yearly___7Uo6X7Psvc]: hasVariant(
                      $state,
                      "otherPlan",
                      "yearly"
                    )
                  })}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__pxxM,
                      {
                        [sty.h2otherPlan_yearly__pxxM7Psvc]: hasVariant(
                          $state,
                          "otherPlan",
                          "yearly"
                        )
                      }
                    )}
                  >
                    {"/month"}
                  </h2>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__iElAd,
                      {
                        [sty.h2otherPlan_yearly__iElAd7Psvc]: hasVariant(
                          $state,
                          "otherPlan",
                          "yearly"
                        )
                      }
                    )}
                  >
                    {"/year"}
                  </h2>
                </Stack__>
              </Stack__>
            </Stack__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__lvW2G
              )}
              component={Link}
              onClick={async event => {
                const $steps = {};
              }}
              platform={"nextjs"}
            >
              {renderPlasmicSlot({
                defaultContents: (
                  <ButtonOutline
                    className={classNames(
                      "__wab_instance",
                      sty.buttonOutline__dDc7F
                    )}
                    styles={"blue"}
                  >
                    {"Get Started"}
                  </ButtonOutline>
                ),
                value: args.slot2
              })}
            </PlasmicLink__>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"cardFooter3"}
            data-plasmic-override={overrides.cardFooter3}
            hasGap={true}
            className={classNames(projectcss.all, sty.cardFooter3)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"highlightItem15"}
              data-plasmic-override={overrides.highlightItem15}
              hasGap={true}
              className={classNames(projectcss.all, sty.highlightItem15)}
            >
              <CheckSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__ylUf)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zxyW7
                )}
              >
                {"Email Support"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"highlightItem16"}
              data-plasmic-override={overrides.highlightItem16}
              hasGap={true}
              className={classNames(projectcss.all, sty.highlightItem16)}
            >
              <CheckSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__q25Dy)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gmdJ5
                )}
              >
                {"Email Support"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"highlightItem17"}
              data-plasmic-override={overrides.highlightItem17}
              hasGap={true}
              className={classNames(projectcss.all, sty.highlightItem17)}
            >
              <CheckSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__xlAyI)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__limIh
                )}
              >
                {"Email Support"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"highlightItem18"}
              data-plasmic-override={overrides.highlightItem18}
              hasGap={true}
              className={classNames(projectcss.all, sty.highlightItem18)}
            >
              <CheckSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg___4Zcj2)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__i9Deh
                )}
              >
                {"Email Support"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"highlightItem19"}
              data-plasmic-override={overrides.highlightItem19}
              hasGap={true}
              className={classNames(projectcss.all, sty.highlightItem19)}
            >
              <CheckSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__fpJsG)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5XcN6
                )}
              >
                {"Email Support"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"highlightItem20"}
              data-plasmic-override={overrides.highlightItem20}
              hasGap={true}
              className={classNames(projectcss.all, sty.highlightItem20)}
            >
              <CheckSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__o79Yi)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__m6K1
                )}
              >
                {"Email Support"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"highlightItem21"}
              data-plasmic-override={overrides.highlightItem21}
              hasGap={true}
              className={classNames(projectcss.all, sty.highlightItem21)}
            >
              <CheckSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__kr2B)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oQiC
                )}
              >
                {"Email Support"}
              </div>
            </Stack__>
          </Stack__>
        </div>
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        hasGap={true}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div className={classNames(projectcss.all, sty.column__qnk)}>
          <div className={classNames(projectcss.all, sty.freeBox__gMrlv)}>
            <div className={classNames(projectcss.all, sty.freeBox___41Xc9)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kbnbj
                )}
              >
                {"Free"}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__fgghg)} />

            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ljpT7)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__f3XMr)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___5PdHx)}
                >
                  <Icon7Icon
                    className={classNames(projectcss.all, sty.svg__xQizF)}
                    role={"img"}
                  />
                </div>
                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__om6B)}
                  >
                    <Icon7Icon
                      className={classNames(projectcss.all, sty.svg__mUgy5)}
                      role={"img"}
                    />
                  </div>
                ) : null}
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___4L8E5)}
                >
                  {false ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__go7R
                      )}
                    >
                      {"Label"}
                    </div>
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zfgqN
                    )}
                  >
                    {"Up to 5 Items/ Supplier/ Template"}
                  </div>
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__lkVox)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__vrl7X)}>
                  <Icon7Icon
                    className={classNames(projectcss.all, sty.svg___09UBs)}
                    role={"img"}
                  />
                </div>
                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__rBu6O)}
                  >
                    <Icon7Icon
                      className={classNames(projectcss.all, sty.svg__fy2Bz)}
                      role={"img"}
                    />
                  </div>
                ) : null}
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__zJzXs)}
                >
                  {false ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__u74Os
                      )}
                    >
                      {"Label"}
                    </div>
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lJ1U0
                    )}
                  >
                    {"Up to 3 Templates"}
                  </div>
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___6I4Hb)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__xv9L7)}>
                  <Icon7Icon
                    className={classNames(projectcss.all, sty.svg__dm2SC)}
                    role={"img"}
                  />
                </div>
                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__sdRe)}
                  >
                    <Icon7Icon
                      className={classNames(projectcss.all, sty.svg__aXvj8)}
                      role={"img"}
                    />
                  </div>
                ) : null}
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___1Nm0M)}
                >
                  {false ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aQuJv
                      )}
                    >
                      {"Label"}
                    </div>
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tkjIn
                    )}
                  >
                    {"Upload up to 10 Designs/ day"}
                  </div>
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__k9UAp)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__ahSqr)}>
                  <AdSvgIcon
                    className={classNames(projectcss.all, sty.svg__hUq4W)}
                    role={"img"}
                  />
                </div>
                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hOVya)}
                  >
                    <Icon7Icon
                      className={classNames(projectcss.all, sty.svg__dHfjH)}
                      role={"img"}
                    />
                  </div>
                ) : null}
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__cVfOb)}
                >
                  {false ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gb3Bu
                      )}
                    >
                      {"Label"}
                    </div>
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__s9DFk
                    )}
                  >
                    {"Ad Supported"}
                  </div>
                </Stack__>
              </Stack__>
            </Stack__>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.column__oFw47)}>
          <div className={classNames(projectcss.all, sty.freeBox__nfnCz)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__xiAyU)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__uSkTd)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nKped
                  )}
                >
                  {"Creator"}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__xyvsv)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wjhQd
                    )}
                  >
                    {"$19"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nCwlw
                    )}
                  >
                    {"/mo"}
                  </div>
                </div>
              </div>
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox__giyAq)} />

            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__r4XNu)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__cmPb1)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__nCsp7)}>
                  <Icon7Icon
                    className={classNames(projectcss.all, sty.svg__iTVs)}
                    role={"img"}
                  />
                </div>
                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___0JPuo)}
                  >
                    <Icon7Icon
                      className={classNames(projectcss.all, sty.svg__yxXw8)}
                      role={"img"}
                    />
                  </div>
                ) : null}
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__oj6P7)}
                >
                  {false ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__r1FA
                      )}
                    >
                      {"Label"}
                    </div>
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hYcAp
                    )}
                  >
                    {"Up to 10 items/ Supplier/ Template"}
                  </div>
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__nIfUf)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__i7GWq)}>
                  <Icon7Icon
                    className={classNames(projectcss.all, sty.svg__gswS)}
                    role={"img"}
                  />
                </div>
                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___1F2Gn)}
                  >
                    <Icon7Icon
                      className={classNames(projectcss.all, sty.svg__yZfO)}
                      role={"img"}
                    />
                  </div>
                ) : null}
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ryDan)}
                >
                  {false ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oIqCu
                      )}
                    >
                      {"Label"}
                    </div>
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__f4Dc
                    )}
                  >
                    {"Up to 10 Templates"}
                  </div>
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__sbJWd)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___5MDEw)}
                >
                  <Icon7Icon
                    className={classNames(projectcss.all, sty.svg__f750E)}
                    role={"img"}
                  />
                </div>
                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__izz0)}
                  >
                    <Icon7Icon
                      className={classNames(projectcss.all, sty.svg__i9H)}
                      role={"img"}
                    />
                  </div>
                ) : null}
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__wZggl)}
                >
                  {false ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dvCt8
                      )}
                    >
                      {"Label"}
                    </div>
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__y9H8A
                    )}
                  >
                    {"Unlimited Uploading"}
                  </div>
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__rh5X)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__ggmd1)}>
                  <Icon7Icon
                    className={classNames(projectcss.all, sty.svg__exTjx)}
                    role={"img"}
                  />
                </div>
                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ga98L)}
                  >
                    <Icon7Icon
                      className={classNames(projectcss.all, sty.svg__jiLjh)}
                      role={"img"}
                    />
                  </div>
                ) : null}
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__fvmNc)}
                >
                  {false ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___02XK
                      )}
                    >
                      {"Label"}
                    </div>
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__e8N3C
                    )}
                  >
                    {"No Ads"}
                  </div>
                </Stack__>
              </Stack__>
            </Stack__>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.column__hnEwt)}>
          <div className={classNames(projectcss.all, sty.freeBox__wDZi3)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___9GtWr)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__io4Rj)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__hZZem)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uZmy
                    )}
                  >
                    {"Pro"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qjZsx)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hUeMa
                      )}
                    >
                      {"$29"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__viOs
                      )}
                    >
                      {"/mo"}
                    </div>
                  </div>
                </div>
              </Stack__>
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox__wpYbR)} />

            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__eY9O)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__u8NxM)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__tfnCz)}>
                  <Icon7Icon
                    className={classNames(projectcss.all, sty.svg__gXayL)}
                    role={"img"}
                  />
                </div>
                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mw8Kf)}
                  >
                    <Icon7Icon
                      className={classNames(projectcss.all, sty.svg___2Pusz)}
                      role={"img"}
                    />
                  </div>
                ) : null}
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__sUsb7)}
                >
                  {false ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2EgmF
                      )}
                    >
                      {"Label"}
                    </div>
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4HEj
                    )}
                  >
                    {"Up to 30 items/ Supplier/ Template"}
                  </div>
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__m8Ftf)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__bSxTi)}>
                  <Icon7Icon
                    className={classNames(projectcss.all, sty.svg__ja5Ui)}
                    role={"img"}
                  />
                </div>
                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qOo86)}
                  >
                    <Icon7Icon
                      className={classNames(projectcss.all, sty.svg__rok4V)}
                      role={"img"}
                    />
                  </div>
                ) : null}
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__etofn)}
                >
                  {false ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0IeFr
                      )}
                    >
                      {"Label"}
                    </div>
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pj0Xh
                    )}
                  >
                    {"Up to 20 Templates"}
                  </div>
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__qVzzN)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__uC1Xg)}>
                  <Icon7Icon
                    className={classNames(projectcss.all, sty.svg__rkUgd)}
                    role={"img"}
                  />
                </div>
                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___8OOZj)}
                  >
                    <Icon7Icon
                      className={classNames(projectcss.all, sty.svg__ucbjq)}
                      role={"img"}
                    />
                  </div>
                ) : null}
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__iMxm)}
                >
                  {false ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__r3JBk
                      )}
                    >
                      {"Label"}
                    </div>
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ij4Sr
                    )}
                  >
                    {"Unlimited Uploading"}
                  </div>
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__el14G)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___0H1E0)}
                >
                  <Icon7Icon
                    className={classNames(projectcss.all, sty.svg__wBz08)}
                    role={"img"}
                  />
                </div>
                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hd7PX)}
                  >
                    <Icon7Icon
                      className={classNames(projectcss.all, sty.svg___77PKk)}
                      role={"img"}
                    />
                  </div>
                ) : null}
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ul7Zx)}
                >
                  {false ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__orgj5
                      )}
                    >
                      {"Label"}
                    </div>
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pNKjr
                    )}
                  >
                    {"No Ads"}
                  </div>
                </Stack__>
              </Stack__>
            </Stack__>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.column___3GmCk)}>
          <div className={classNames(projectcss.all, sty.freeBox__ticEs)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__osEen)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__y9USh)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__ulOa9)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8GL5S
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#1677ff" }}
                      >
                        {"Enterprise"}
                      </span>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xRhjf)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kIto7
                      )}
                    >
                      {"$99"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__npFPn
                      )}
                    >
                      {"/mo"}
                    </div>
                  </div>
                </div>
              </Stack__>
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox__rhZlO)} />

            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__fpsOi)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ycBre)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__c6HVi)}>
                  <Icon7Icon
                    className={classNames(projectcss.all, sty.svg__e4EiS)}
                    role={"img"}
                  />
                </div>
                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yyRng)}
                  >
                    <Icon7Icon
                      className={classNames(projectcss.all, sty.svg__c7Lux)}
                      role={"img"}
                    />
                  </div>
                ) : null}
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__r1Hea)}
                >
                  {false ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__swNtV
                      )}
                    >
                      {"Label"}
                    </div>
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rkMkY
                    )}
                  >
                    {"Unlimited Items/ Template"}
                  </div>
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zesjz)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__paeMg)}>
                  <Icon7Icon
                    className={classNames(projectcss.all, sty.svg__isU2B)}
                    role={"img"}
                  />
                </div>
                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___3ZtC)}
                  >
                    <Icon7Icon
                      className={classNames(projectcss.all, sty.svg__rLfj)}
                      role={"img"}
                    />
                  </div>
                ) : null}
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__tCtO)}
                >
                  {false ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iwYxA
                      )}
                    >
                      {"Label"}
                    </div>
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8UguI
                    )}
                  >
                    {"Unlimited Templates"}
                  </div>
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__e85Z)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__dR4Ji)}>
                  <Icon7Icon
                    className={classNames(projectcss.all, sty.svg__d5Ctj)}
                    role={"img"}
                  />
                </div>
                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__se3B)}
                  >
                    <Icon7Icon
                      className={classNames(projectcss.all, sty.svg__hz0Pr)}
                      role={"img"}
                    />
                  </div>
                ) : null}
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__lBqaa)}
                >
                  {false ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mYbIv
                      )}
                    >
                      {"Label"}
                    </div>
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5BY80
                    )}
                  >
                    {"Unlimited Uploading"}
                  </div>
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__rmBI)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__hZSv1)}>
                  <Icon7Icon
                    className={classNames(projectcss.all, sty.svg__aYyca)}
                    role={"img"}
                  />
                </div>
                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tdOql)}
                  >
                    <Icon7Icon
                      className={classNames(projectcss.all, sty.svg__jxcff)}
                      role={"img"}
                    />
                  </div>
                ) : null}
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__wIqCj)}
                >
                  {false ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__b8D6D
                      )}
                    >
                      {"Label"}
                    </div>
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fUbkm
                    )}
                  >
                    {"No Ads"}
                  </div>
                </Stack__>
              </Stack__>
            </Stack__>
          </div>
        </div>
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  base: [
    "base",
    "tab",
    "item",
    "item2",
    "item3",
    "cardMajorContainer",
    "pricingCard",
    "gradientOverlay",
    "cardHeader",
    "header",
    "textWrap2",
    "priceWrap",
    "cardFooter",
    "highlightItem",
    "highlightItem2",
    "highlightItem3",
    "highlightItem4",
    "highlightItem5",
    "highlightItem6",
    "highlightItem7",
    "pricingCard2",
    "gradientOverlay2",
    "cardHeader2",
    "header2",
    "badge",
    "textWrap3",
    "priceWrap2",
    "cardFooter2",
    "highlightItem8",
    "highlightItem9",
    "highlightItem10",
    "highlightItem11",
    "highlightItem12",
    "highlightItem13",
    "highlightItem14",
    "pricingCard3",
    "gradientOverlay3",
    "cardHeader3",
    "header3",
    "textWrap4",
    "priceWrap3",
    "cardFooter3",
    "highlightItem15",
    "highlightItem16",
    "highlightItem17",
    "highlightItem18",
    "highlightItem19",
    "highlightItem20",
    "highlightItem21",
    "columns"
  ],
  tab: ["tab", "item", "item2", "item3"],
  item: ["item"],
  item2: ["item2", "item3"],
  item3: ["item3"],
  cardMajorContainer: [
    "cardMajorContainer",
    "pricingCard",
    "gradientOverlay",
    "cardHeader",
    "header",
    "textWrap2",
    "priceWrap",
    "cardFooter",
    "highlightItem",
    "highlightItem2",
    "highlightItem3",
    "highlightItem4",
    "highlightItem5",
    "highlightItem6",
    "highlightItem7",
    "pricingCard2",
    "gradientOverlay2",
    "cardHeader2",
    "header2",
    "badge",
    "textWrap3",
    "priceWrap2",
    "cardFooter2",
    "highlightItem8",
    "highlightItem9",
    "highlightItem10",
    "highlightItem11",
    "highlightItem12",
    "highlightItem13",
    "highlightItem14",
    "pricingCard3",
    "gradientOverlay3",
    "cardHeader3",
    "header3",
    "textWrap4",
    "priceWrap3",
    "cardFooter3",
    "highlightItem15",
    "highlightItem16",
    "highlightItem17",
    "highlightItem18",
    "highlightItem19",
    "highlightItem20",
    "highlightItem21"
  ],
  pricingCard: [
    "pricingCard",
    "gradientOverlay",
    "cardHeader",
    "header",
    "textWrap2",
    "priceWrap",
    "cardFooter",
    "highlightItem",
    "highlightItem2",
    "highlightItem3",
    "highlightItem4",
    "highlightItem5",
    "highlightItem6",
    "highlightItem7"
  ],
  gradientOverlay: ["gradientOverlay"],
  cardHeader: ["cardHeader", "header", "textWrap2", "priceWrap"],
  header: ["header", "textWrap2", "priceWrap"],
  textWrap2: ["textWrap2"],
  priceWrap: ["priceWrap"],
  cardFooter: [
    "cardFooter",
    "highlightItem",
    "highlightItem2",
    "highlightItem3",
    "highlightItem4",
    "highlightItem5",
    "highlightItem6",
    "highlightItem7"
  ],
  highlightItem: ["highlightItem"],
  highlightItem2: ["highlightItem2"],
  highlightItem3: ["highlightItem3"],
  highlightItem4: ["highlightItem4"],
  highlightItem5: ["highlightItem5"],
  highlightItem6: ["highlightItem6"],
  highlightItem7: ["highlightItem7"],
  pricingCard2: [
    "pricingCard2",
    "gradientOverlay2",
    "cardHeader2",
    "header2",
    "badge",
    "textWrap3",
    "priceWrap2",
    "cardFooter2",
    "highlightItem8",
    "highlightItem9",
    "highlightItem10",
    "highlightItem11",
    "highlightItem12",
    "highlightItem13",
    "highlightItem14"
  ],
  gradientOverlay2: ["gradientOverlay2"],
  cardHeader2: ["cardHeader2", "header2", "badge", "textWrap3", "priceWrap2"],
  header2: ["header2", "badge", "textWrap3", "priceWrap2"],
  badge: ["badge"],
  textWrap3: ["textWrap3"],
  priceWrap2: ["priceWrap2"],
  cardFooter2: [
    "cardFooter2",
    "highlightItem8",
    "highlightItem9",
    "highlightItem10",
    "highlightItem11",
    "highlightItem12",
    "highlightItem13",
    "highlightItem14"
  ],
  highlightItem8: ["highlightItem8"],
  highlightItem9: ["highlightItem9"],
  highlightItem10: ["highlightItem10"],
  highlightItem11: ["highlightItem11"],
  highlightItem12: ["highlightItem12"],
  highlightItem13: ["highlightItem13"],
  highlightItem14: ["highlightItem14"],
  pricingCard3: [
    "pricingCard3",
    "gradientOverlay3",
    "cardHeader3",
    "header3",
    "textWrap4",
    "priceWrap3",
    "cardFooter3",
    "highlightItem15",
    "highlightItem16",
    "highlightItem17",
    "highlightItem18",
    "highlightItem19",
    "highlightItem20",
    "highlightItem21"
  ],
  gradientOverlay3: ["gradientOverlay3"],
  cardHeader3: ["cardHeader3", "header3", "textWrap4", "priceWrap3"],
  header3: ["header3", "textWrap4", "priceWrap3"],
  textWrap4: ["textWrap4"],
  priceWrap3: ["priceWrap3"],
  cardFooter3: [
    "cardFooter3",
    "highlightItem15",
    "highlightItem16",
    "highlightItem17",
    "highlightItem18",
    "highlightItem19",
    "highlightItem20",
    "highlightItem21"
  ],
  highlightItem15: ["highlightItem15"],
  highlightItem16: ["highlightItem16"],
  highlightItem17: ["highlightItem17"],
  highlightItem18: ["highlightItem18"],
  highlightItem19: ["highlightItem19"],
  highlightItem20: ["highlightItem20"],
  highlightItem21: ["highlightItem21"],
  columns: ["columns"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  base: "div";
  tab: "div";
  item: "div";
  item2: "div";
  item3: "div";
  cardMajorContainer: "div";
  pricingCard: "div";
  gradientOverlay: "div";
  cardHeader: "div";
  header: "div";
  textWrap2: "div";
  priceWrap: "div";
  cardFooter: "div";
  highlightItem: "div";
  highlightItem2: "div";
  highlightItem3: "div";
  highlightItem4: "div";
  highlightItem5: "div";
  highlightItem6: "div";
  highlightItem7: "div";
  pricingCard2: "div";
  gradientOverlay2: "div";
  cardHeader2: "div";
  header2: "div";
  badge: typeof Badge;
  textWrap3: "div";
  priceWrap2: "div";
  cardFooter2: "div";
  highlightItem8: "div";
  highlightItem9: "div";
  highlightItem10: "div";
  highlightItem11: "div";
  highlightItem12: "div";
  highlightItem13: "div";
  highlightItem14: "div";
  pricingCard3: "div";
  gradientOverlay3: "div";
  cardHeader3: "div";
  header3: "div";
  textWrap4: "div";
  priceWrap3: "div";
  cardFooter3: "div";
  highlightItem15: "div";
  highlightItem16: "div";
  highlightItem17: "div";
  highlightItem18: "div";
  highlightItem19: "div";
  highlightItem20: "div";
  highlightItem21: "div";
  columns: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPricing__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPricing__VariantsArgs;
    args?: PlasmicPricing__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPricing__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPricing__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPricing__ArgProps,
          internalVariantPropNames: PlasmicPricing__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPricing__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "base") {
    func.displayName = "PlasmicPricing";
  } else {
    func.displayName = `PlasmicPricing.${nodeName}`;
  }
  return func;
}

export const PlasmicPricing = Object.assign(
  // Top-level PlasmicPricing renders the root element
  makeNodeComponent("base"),
  {
    // Helper components rendering sub-elements
    tab: makeNodeComponent("tab"),
    item: makeNodeComponent("item"),
    item2: makeNodeComponent("item2"),
    item3: makeNodeComponent("item3"),
    cardMajorContainer: makeNodeComponent("cardMajorContainer"),
    pricingCard: makeNodeComponent("pricingCard"),
    gradientOverlay: makeNodeComponent("gradientOverlay"),
    cardHeader: makeNodeComponent("cardHeader"),
    header: makeNodeComponent("header"),
    textWrap2: makeNodeComponent("textWrap2"),
    priceWrap: makeNodeComponent("priceWrap"),
    cardFooter: makeNodeComponent("cardFooter"),
    highlightItem: makeNodeComponent("highlightItem"),
    highlightItem2: makeNodeComponent("highlightItem2"),
    highlightItem3: makeNodeComponent("highlightItem3"),
    highlightItem4: makeNodeComponent("highlightItem4"),
    highlightItem5: makeNodeComponent("highlightItem5"),
    highlightItem6: makeNodeComponent("highlightItem6"),
    highlightItem7: makeNodeComponent("highlightItem7"),
    pricingCard2: makeNodeComponent("pricingCard2"),
    gradientOverlay2: makeNodeComponent("gradientOverlay2"),
    cardHeader2: makeNodeComponent("cardHeader2"),
    header2: makeNodeComponent("header2"),
    badge: makeNodeComponent("badge"),
    textWrap3: makeNodeComponent("textWrap3"),
    priceWrap2: makeNodeComponent("priceWrap2"),
    cardFooter2: makeNodeComponent("cardFooter2"),
    highlightItem8: makeNodeComponent("highlightItem8"),
    highlightItem9: makeNodeComponent("highlightItem9"),
    highlightItem10: makeNodeComponent("highlightItem10"),
    highlightItem11: makeNodeComponent("highlightItem11"),
    highlightItem12: makeNodeComponent("highlightItem12"),
    highlightItem13: makeNodeComponent("highlightItem13"),
    highlightItem14: makeNodeComponent("highlightItem14"),
    pricingCard3: makeNodeComponent("pricingCard3"),
    gradientOverlay3: makeNodeComponent("gradientOverlay3"),
    cardHeader3: makeNodeComponent("cardHeader3"),
    header3: makeNodeComponent("header3"),
    textWrap4: makeNodeComponent("textWrap4"),
    priceWrap3: makeNodeComponent("priceWrap3"),
    cardFooter3: makeNodeComponent("cardFooter3"),
    highlightItem15: makeNodeComponent("highlightItem15"),
    highlightItem16: makeNodeComponent("highlightItem16"),
    highlightItem17: makeNodeComponent("highlightItem17"),
    highlightItem18: makeNodeComponent("highlightItem18"),
    highlightItem19: makeNodeComponent("highlightItem19"),
    highlightItem20: makeNodeComponent("highlightItem20"),
    highlightItem21: makeNodeComponent("highlightItem21"),
    columns: makeNodeComponent("columns"),

    // Metadata about props expected for PlasmicPricing
    internalVariantProps: PlasmicPricing__VariantProps,
    internalArgProps: PlasmicPricing__ArgProps
  }
);

export default PlasmicPricing;
/* prettier-ignore-end */
