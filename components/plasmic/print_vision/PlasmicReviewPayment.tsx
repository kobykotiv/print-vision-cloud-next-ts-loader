// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2Up8DUmBB1Tx5dhznkvCW5
// Component: RdudtLc_UNDU

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import PageLayout from "../../PageLayout"; // plasmic-import: nHDfdLqBbJ3Q/component
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import { ConditionGuard } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 2Up8DUmBB1Tx5dhznkvCW5/projectcss
import sty from "./PlasmicReviewPayment.module.css"; // plasmic-import: RdudtLc_UNDU/css

createPlasmicElementProxy;

export type PlasmicReviewPayment__VariantMembers = {};
export type PlasmicReviewPayment__VariantsArgs = {};
type VariantPropType = keyof PlasmicReviewPayment__VariantsArgs;
export const PlasmicReviewPayment__VariantProps = new Array<VariantPropType>();

export type PlasmicReviewPayment__ArgsType = {};
type ArgPropType = keyof PlasmicReviewPayment__ArgsType;
export const PlasmicReviewPayment__ArgProps = new Array<ArgPropType>();

export type PlasmicReviewPayment__OverridesType = {
  root?: Flex__<"div">;
  pageLayout?: Flex__<typeof PageLayout>;
  section?: Flex__<"section">;
  freeBox?: Flex__<"div">;
  text?: Flex__<"div">;
  timer?: Flex__<typeof Timer>;
};

export interface DefaultReviewPaymentProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReviewPayment__RenderFunc(props: {
  variants: PlasmicReviewPayment__VariantsArgs;
  args: PlasmicReviewPayment__ArgsType;
  overrides: PlasmicReviewPayment__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "timer",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "stripeResult",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "nextStep",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    keys: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "6e5c3367-c94f-47b5-a963-d508e9e9df08",
        userArgs: {},
        cacheKey: `plasmic.$.6e5c3367-c94f-47b5-a963-d508e9e9df08.$.`,
        invalidatedKeys: null,
        roleId: "d035f350-edf5-4268-af03-4480b52522b0"
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <section
                    data-plasmic-name={"section"}
                    data-plasmic-override={overrides.section}
                    className={classNames(projectcss.all, sty.section)}
                  >
                    <div
                      data-plasmic-name={"freeBox"}
                      data-plasmic-override={overrides.freeBox}
                      className={classNames(projectcss.all, sty.freeBox)}
                    >
                      <div
                        data-plasmic-name={"text"}
                        data-plasmic-override={overrides.text}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text
                        )}
                      >
                        {"Please wait a moment while we review your payment..."}
                      </div>
                    </div>
                  </section>
                  <Timer
                    data-plasmic-name={"timer"}
                    data-plasmic-override={overrides.timer}
                    className={classNames("__wab_instance", sty.timer)}
                    intervalSeconds={0.1}
                    isRunning={true}
                    onTick={async () => {
                      const $steps = {};

                      $steps["updateVariable"] = (
                        $state.timer > 100 ? false : true
                      )
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["timer"]
                              },
                              operation: 2
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, oldValue + 1);
                              return oldValue + 1;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateVariable"] != null &&
                        typeof $steps["updateVariable"] === "object" &&
                        typeof $steps["updateVariable"].then === "function"
                      ) {
                        $steps["updateVariable"] = await $steps[
                          "updateVariable"
                        ];
                      }
                    }}
                    runWhileEditing={true}
                  />

                  <ConditionGuard
                    className={classNames(
                      "__wab_instance",
                      sty.conditionGuard__bji6S
                    )}
                    condition={(() => {
                      try {
                        return $state.timer < 20 ? true : false;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()}
                    onNotSatisfied={async () => {
                      const $steps = {};

                      $steps["getStripeResult"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "ao83tYnui5QEAuzybxgrVJ",
                                opId: "2cf0b372-8ed1-43fc-8a4f-0c8a08b1c4b7",
                                userArgs: {
                                  path: [
                                    $queries.keys.data[0]
                                      .changing_payment_intent
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: null,
                                roleId: "d035f350-edf5-4268-af03-4480b52522b0"
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["getStripeResult"] != null &&
                        typeof $steps["getStripeResult"] === "object" &&
                        typeof $steps["getStripeResult"].then === "function"
                      ) {
                        $steps["getStripeResult"] = await $steps[
                          "getStripeResult"
                        ];
                      }

                      $steps["updateStripeResult"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["stripeResult"]
                              },
                              operation: 0,
                              value: $steps.getStripeResult
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStripeResult"] != null &&
                        typeof $steps["updateStripeResult"] === "object" &&
                        typeof $steps["updateStripeResult"].then === "function"
                      ) {
                        $steps["updateStripeResult"] = await $steps[
                          "updateStripeResult"
                        ];
                      }

                      $steps["updateNextStep"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["nextStep"]
                              },
                              operation: 0,
                              value: 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateNextStep"] != null &&
                        typeof $steps["updateNextStep"] === "object" &&
                        typeof $steps["updateNextStep"].then === "function"
                      ) {
                        $steps["updateNextStep"] = await $steps[
                          "updateNextStep"
                        ];
                      }
                    }}
                  />

                  <ConditionGuard
                    className={classNames(
                      "__wab_instance",
                      sty.conditionGuard__rdtG6
                    )}
                    condition={(() => {
                      try {
                        return $state.nextStep === 0 ? true : false;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()}
                    onNotSatisfied={async () => {
                      const $steps = {};

                      $steps["postgresUpdateMany"] = (
                        $state.stripeResult.data.response.payment_status ===
                        "paid"
                          ? true
                          : false
                      )
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
                                opId: "f37f449c-3773-4ca5-8342-faf5ebde1d37",
                                userArgs: {
                                  variables: [
                                    $state.stripeResult.data.response.id,
                                    $queries.keys.data[0].changing_plan
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: ["plasmic_refresh_all"],
                                roleId: "d035f350-edf5-4268-af03-4480b52522b0"
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["postgresUpdateMany"] != null &&
                        typeof $steps["postgresUpdateMany"] === "object" &&
                        typeof $steps["postgresUpdateMany"].then === "function"
                      ) {
                        $steps["postgresUpdateMany"] = await $steps[
                          "postgresUpdateMany"
                        ];
                      }

                      $steps["refreshData"] = true
                        ? (() => {
                            const actionArgs = {
                              queryInvalidation: ["plasmic_refresh_all"]
                            };
                            return (async ({ queryInvalidation }) => {
                              if (!queryInvalidation) {
                                return;
                              }
                              await plasmicInvalidate(queryInvalidation);
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["refreshData"] != null &&
                        typeof $steps["refreshData"] === "object" &&
                        typeof $steps["refreshData"].then === "function"
                      ) {
                        $steps["refreshData"] = await $steps["refreshData"];
                      }

                      $steps["invokeGlobalAction"] = (
                        $state.stripeResult.data.response.payment_status ===
                        "paid"
                          ? true
                          : false
                      )
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "success",
                                `Congratulations! You have successfully subscribed to the ${$state.stripeResult.data.response.metadata.order_id}.`
                              ]
                            };
                            return $globalActions[
                              "plasmic-antd5-config-provider.showNotification"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["goToHomepage"] = (
                        $state.stripeResult.data.response.payment_status ===
                        "paid"
                          ? true
                          : false
                      )
                        ? (() => {
                            const actionArgs = { destination: `/` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToHomepage"] != null &&
                        typeof $steps["goToHomepage"] === "object" &&
                        typeof $steps["goToHomepage"].then === "function"
                      ) {
                        $steps["goToHomepage"] = await $steps["goToHomepage"];
                      }

                      $steps["invokeGlobalAction2"] =
                        $state.stripeResult.data.response.payment_status !==
                        "paid"
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "No payment initiated or payment incomplete."
                                ]
                              };
                              return $globalActions[
                                "plasmic-antd5-config-provider.showNotification"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }

                      $steps["goToPaymentGateway"] =
                        $state.stripeResult.data.response.payment_status !==
                        "paid"
                          ? (() => {
                              const actionArgs = {
                                destination: `/payment-gateway`
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["goToPaymentGateway"] != null &&
                        typeof $steps["goToPaymentGateway"] === "object" &&
                        typeof $steps["goToPaymentGateway"].then === "function"
                      ) {
                        $steps["goToPaymentGateway"] = await $steps[
                          "goToPaymentGateway"
                        ];
                      }
                    }}
                  />
                </React.Fragment>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "pageLayout", "section", "freeBox", "text", "timer"],
  pageLayout: ["pageLayout", "section", "freeBox", "text", "timer"],
  section: ["section", "freeBox", "text"],
  freeBox: ["freeBox", "text"],
  text: ["text"],
  timer: ["timer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  section: "section";
  freeBox: "div";
  text: "div";
  timer: typeof Timer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReviewPayment__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReviewPayment__VariantsArgs;
    args?: PlasmicReviewPayment__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicReviewPayment__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicReviewPayment__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReviewPayment__ArgProps,
          internalVariantPropNames: PlasmicReviewPayment__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReviewPayment__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicReviewPayment";
  } else {
    func.displayName = `PlasmicReviewPayment.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={"d035f350-edf5-4268-af03-4480b52522b0"}
      appId={"2Up8DUmBB1Tx5dhznkvCW5"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "2Up8DUmBB1Tx5dhznkvCW5"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicReviewPayment = Object.assign(
  // Top-level PlasmicReviewPayment renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    section: makeNodeComponent("section"),
    freeBox: makeNodeComponent("freeBox"),
    text: makeNodeComponent("text"),
    timer: makeNodeComponent("timer"),

    // Metadata about props expected for PlasmicReviewPayment
    internalVariantProps: PlasmicReviewPayment__VariantProps,
    internalArgProps: PlasmicReviewPayment__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicReviewPayment;
/* prettier-ignore-end */
