// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2Up8DUmBB1Tx5dhznkvCW5
// Component: NzvaU-I_URSd

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import PageLayout from "../../PageLayout"; // plasmic-import: nHDfdLqBbJ3Q/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import Pricing from "../../Pricing"; // plasmic-import: UU2fpoxpMi1Y/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import ButtonOutline from "../../ButtonOutline"; // plasmic-import: 296qaVSDm1cX/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 2Up8DUmBB1Tx5dhznkvCW5/projectcss
import sty from "./PlasmicPaymentGateway.module.css"; // plasmic-import: NzvaU-I_URSd/css

createPlasmicElementProxy;

export type PlasmicPaymentGateway__VariantMembers = {};
export type PlasmicPaymentGateway__VariantsArgs = {};
type VariantPropType = keyof PlasmicPaymentGateway__VariantsArgs;
export const PlasmicPaymentGateway__VariantProps = new Array<VariantPropType>();

export type PlasmicPaymentGateway__ArgsType = {};
type ArgPropType = keyof PlasmicPaymentGateway__ArgsType;
export const PlasmicPaymentGateway__ArgProps = new Array<ArgPropType>();

export type PlasmicPaymentGateway__OverridesType = {
  root?: Flex__<"div">;
  pageLayout?: Flex__<typeof PageLayout>;
  section?: Flex__<"section">;
  freeBox?: Flex__<"div">;
  reveal?: Flex__<typeof Reveal>;
  pricing?: Flex__<typeof Pricing>;
  checker2?: Flex__<"div">;
  checker6?: Flex__<"div">;
  checker?: Flex__<"div">;
  checker4?: Flex__<"div">;
  checker3?: Flex__<"div">;
  checker5?: Flex__<"div">;
  text?: Flex__<"div">;
};

export interface DefaultPaymentGatewayProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPaymentGateway__RenderFunc(props: {
  variants: PlasmicPaymentGateway__VariantsArgs;
  args: PlasmicPaymentGateway__ArgsType;
  overrides: PlasmicPaymentGateway__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "getCustomerId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "checkoutSession",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    keys: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "5d15a2d6-6e3f-40ec-bf95-e7e7fd7dd458",
        userArgs: {},
        cacheKey: `plasmic.$.5d15a2d6-6e3f-40ec-bf95-e7e7fd7dd458.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
          >
            <DataCtxReader__>
              {$ctx => (
                <section
                  data-plasmic-name={"section"}
                  data-plasmic-override={overrides.section}
                  className={classNames(projectcss.all, sty.section)}
                >
                  <div
                    data-plasmic-name={"freeBox"}
                    data-plasmic-override={overrides.freeBox}
                    className={classNames(projectcss.all, sty.freeBox)}
                  >
                    <Reveal
                      data-plasmic-name={"reveal"}
                      data-plasmic-override={overrides.reveal}
                      className={classNames("__wab_instance", sty.reveal)}
                      delay={300}
                      direction={"left"}
                      triggerOnce={true}
                    >
                      <Pricing
                        data-plasmic-name={"pricing"}
                        data-plasmic-override={overrides.pricing}
                        className={classNames("__wab_instance", sty.pricing)}
                        slot={
                          <React.Fragment>
                            {(() => {
                              try {
                                return $queries.keys.data[0].major_plan !== 1;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                data-plasmic-name={"checker"}
                                data-plasmic-override={overrides.checker}
                                className={classNames(
                                  projectcss.all,
                                  sty.checker
                                )}
                              >
                                <AntdButton
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__jDjc3
                                  )}
                                  onClick={async () => {
                                    const $steps = {};

                                    $steps["getCustomerId"] =
                                      $queries.keys.data[0]
                                        .stripe_customer_id === null
                                        ? (() => {
                                            const actionArgs = {
                                              dataOp: {
                                                sourceId:
                                                  "ao83tYnui5QEAuzybxgrVJ",
                                                opId: "c683e00f-bd43-49df-bda2-a239be173777",
                                                userArgs: {
                                                  params: [
                                                    $queries.keys.data[0].owner,
                                                    $queries.keys.data[0].owner
                                                  ]
                                                },
                                                cacheKey: null,
                                                invalidatedKeys: [],
                                                roleId: null
                                              }
                                            };
                                            return (async ({
                                              dataOp,
                                              continueOnError
                                            }) => {
                                              try {
                                                const response =
                                                  await executePlasmicDataOp(
                                                    dataOp,
                                                    {
                                                      userAuthToken:
                                                        dataSourcesCtx?.userAuthToken,
                                                      user: dataSourcesCtx?.user
                                                    }
                                                  );
                                                await plasmicInvalidate(
                                                  dataOp.invalidatedKeys
                                                );
                                                return response;
                                              } catch (e) {
                                                if (!continueOnError) {
                                                  throw e;
                                                }
                                                return e;
                                              }
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["getCustomerId"] != null &&
                                      typeof $steps["getCustomerId"] ===
                                        "object" &&
                                      typeof $steps["getCustomerId"].then ===
                                        "function"
                                    ) {
                                      $steps["getCustomerId"] = await $steps[
                                        "getCustomerId"
                                      ];
                                    }

                                    $steps["updateCustomerId"] =
                                      $queries.keys.data[0]
                                        .stripe_customer_id === null
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["getCustomerId"]
                                              },
                                              operation: 0,
                                              value: $steps.getCustomerId
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["updateCustomerId"] != null &&
                                      typeof $steps["updateCustomerId"] ===
                                        "object" &&
                                      typeof $steps["updateCustomerId"].then ===
                                        "function"
                                    ) {
                                      $steps["updateCustomerId"] = await $steps[
                                        "updateCustomerId"
                                      ];
                                    }

                                    $steps["postgresUpdateMany"] =
                                      $queries.keys.data[0]
                                        .stripe_customer_id === null
                                        ? (() => {
                                            const actionArgs = {
                                              dataOp: {
                                                sourceId:
                                                  "83X9ZdYzYUYJtgqe5fwXeX",
                                                opId: "db5c2a00-d97e-45cc-8a20-0bbb320aa191",
                                                userArgs: {
                                                  variables: [
                                                    $state.getCustomerId.data
                                                      .response.id
                                                  ]
                                                },
                                                cacheKey: null,
                                                invalidatedKeys: [],
                                                roleId: null
                                              }
                                            };
                                            return (async ({
                                              dataOp,
                                              continueOnError
                                            }) => {
                                              try {
                                                const response =
                                                  await executePlasmicDataOp(
                                                    dataOp,
                                                    {
                                                      userAuthToken:
                                                        dataSourcesCtx?.userAuthToken,
                                                      user: dataSourcesCtx?.user
                                                    }
                                                  );
                                                await plasmicInvalidate(
                                                  dataOp.invalidatedKeys
                                                );
                                                return response;
                                              } catch (e) {
                                                if (!continueOnError) {
                                                  throw e;
                                                }
                                                return e;
                                              }
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["postgresUpdateMany"] != null &&
                                      typeof $steps["postgresUpdateMany"] ===
                                        "object" &&
                                      typeof $steps["postgresUpdateMany"]
                                        .then === "function"
                                    ) {
                                      $steps["postgresUpdateMany"] =
                                        await $steps["postgresUpdateMany"];
                                    }

                                    $steps["refreshData"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            queryInvalidation: [
                                              "plasmic_refresh_all"
                                            ]
                                          };
                                          return (async ({
                                            queryInvalidation
                                          }) => {
                                            if (!queryInvalidation) {
                                              return;
                                            }
                                            await plasmicInvalidate(
                                              queryInvalidation
                                            );
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["refreshData"] != null &&
                                      typeof $steps["refreshData"] ===
                                        "object" &&
                                      typeof $steps["refreshData"].then ===
                                        "function"
                                    ) {
                                      $steps["refreshData"] = await $steps[
                                        "refreshData"
                                      ];
                                    }

                                    $steps["stripeCheckout"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            dataOp: {
                                              sourceId:
                                                "ao83tYnui5QEAuzybxgrVJ",
                                              opId: "a223d51c-0b67-4c52-8342-bcbae4945948",
                                              userArgs: {},
                                              cacheKey: null,
                                              invalidatedKeys: [
                                                "plasmic_refresh_all"
                                              ],
                                              roleId: null
                                            }
                                          };
                                          return (async ({
                                            dataOp,
                                            continueOnError
                                          }) => {
                                            try {
                                              const response =
                                                await executePlasmicDataOp(
                                                  dataOp,
                                                  {
                                                    userAuthToken:
                                                      dataSourcesCtx?.userAuthToken,
                                                    user: dataSourcesCtx?.user
                                                  }
                                                );
                                              await plasmicInvalidate(
                                                dataOp.invalidatedKeys
                                              );
                                              return response;
                                            } catch (e) {
                                              if (!continueOnError) {
                                                throw e;
                                              }
                                              return e;
                                            }
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["stripeCheckout"] != null &&
                                      typeof $steps["stripeCheckout"] ===
                                        "object" &&
                                      typeof $steps["stripeCheckout"].then ===
                                        "function"
                                    ) {
                                      $steps["stripeCheckout"] = await $steps[
                                        "stripeCheckout"
                                      ];
                                    }

                                    $steps["updateStripeUrl"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["checkoutSession"]
                                            },
                                            operation: 0,
                                            value: $steps.stripeCheckout
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateStripeUrl"] != null &&
                                      typeof $steps["updateStripeUrl"] ===
                                        "object" &&
                                      typeof $steps["updateStripeUrl"].then ===
                                        "function"
                                    ) {
                                      $steps["updateStripeUrl"] = await $steps[
                                        "updateStripeUrl"
                                      ];
                                    }

                                    $steps["postgresUpdateMany2"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            dataOp: {
                                              sourceId:
                                                "83X9ZdYzYUYJtgqe5fwXeX",
                                              opId: "9afe8fd3-46d3-49ae-9ce8-51e251baf52c",
                                              userArgs: {
                                                variables: [
                                                  $state.checkoutSession.data
                                                    .response.id
                                                ]
                                              },
                                              cacheKey: null,
                                              invalidatedKeys: [
                                                "plasmic_refresh_all"
                                              ],
                                              roleId: null
                                            }
                                          };
                                          return (async ({
                                            dataOp,
                                            continueOnError
                                          }) => {
                                            try {
                                              const response =
                                                await executePlasmicDataOp(
                                                  dataOp,
                                                  {
                                                    userAuthToken:
                                                      dataSourcesCtx?.userAuthToken,
                                                    user: dataSourcesCtx?.user
                                                  }
                                                );
                                              await plasmicInvalidate(
                                                dataOp.invalidatedKeys
                                              );
                                              return response;
                                            } catch (e) {
                                              if (!continueOnError) {
                                                throw e;
                                              }
                                              return e;
                                            }
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["postgresUpdateMany2"] != null &&
                                      typeof $steps["postgresUpdateMany2"] ===
                                        "object" &&
                                      typeof $steps["postgresUpdateMany2"]
                                        .then === "function"
                                    ) {
                                      $steps["postgresUpdateMany2"] =
                                        await $steps["postgresUpdateMany2"];
                                    }

                                    $steps["goToPage"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            destination: (() => {
                                              try {
                                                return $state.checkoutSession
                                                  .data.response.url;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          };
                                          return (({ destination }) => {
                                            if (
                                              typeof destination === "string" &&
                                              destination.startsWith("#")
                                            ) {
                                              document
                                                .getElementById(
                                                  destination.substr(1)
                                                )
                                                .scrollIntoView({
                                                  behavior: "smooth"
                                                });
                                            } else {
                                              __nextRouter?.push(destination);
                                            }
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["goToPage"] != null &&
                                      typeof $steps["goToPage"] === "object" &&
                                      typeof $steps["goToPage"].then ===
                                        "function"
                                    ) {
                                      $steps["goToPage"] = await $steps[
                                        "goToPage"
                                      ];
                                    }
                                  }}
                                >
                                  <ButtonOutline
                                    className={classNames(
                                      "__wab_instance",
                                      sty.buttonOutline__bS51H
                                    )}
                                    styles={"wide"}
                                  >
                                    {"Get Started"}
                                  </ButtonOutline>
                                </AntdButton>
                              </div>
                            ) : null}
                            {(() => {
                              try {
                                return $queries.keys.data[0].major_plan == 1;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                data-plasmic-name={"checker4"}
                                data-plasmic-override={overrides.checker4}
                                className={classNames(
                                  projectcss.all,
                                  sty.checker4
                                )}
                              >
                                <AntdButton
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__yk0P
                                  )}
                                  disabled={true}
                                >
                                  <ButtonOutline
                                    className={classNames(
                                      "__wab_instance",
                                      sty.buttonOutline__tfw7I
                                    )}
                                    styles={"disabled"}
                                  >
                                    {"Current Plan"}
                                  </ButtonOutline>
                                </AntdButton>
                              </div>
                            ) : null}
                          </React.Fragment>
                        }
                        slot2={
                          <React.Fragment>
                            {(() => {
                              try {
                                return $queries.keys.data[0].major_plan !== 3;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                data-plasmic-name={"checker3"}
                                data-plasmic-override={overrides.checker3}
                                className={classNames(
                                  projectcss.all,
                                  sty.checker3
                                )}
                              >
                                <AntdButton
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__stWkL
                                  )}
                                  onClick={async () => {
                                    const $steps = {};

                                    $steps["getCustomerId"] =
                                      $queries.keys.data[0]
                                        .stripe_customer_id === null
                                        ? (() => {
                                            const actionArgs = {
                                              dataOp: {
                                                sourceId:
                                                  "ao83tYnui5QEAuzybxgrVJ",
                                                opId: "c683e00f-bd43-49df-bda2-a239be173777",
                                                userArgs: {
                                                  params: [
                                                    $queries.keys.data[0].owner,
                                                    $queries.keys.data[0].owner
                                                  ]
                                                },
                                                cacheKey: null,
                                                invalidatedKeys: [],
                                                roleId: null
                                              }
                                            };
                                            return (async ({
                                              dataOp,
                                              continueOnError
                                            }) => {
                                              try {
                                                const response =
                                                  await executePlasmicDataOp(
                                                    dataOp,
                                                    {
                                                      userAuthToken:
                                                        dataSourcesCtx?.userAuthToken,
                                                      user: dataSourcesCtx?.user
                                                    }
                                                  );
                                                await plasmicInvalidate(
                                                  dataOp.invalidatedKeys
                                                );
                                                return response;
                                              } catch (e) {
                                                if (!continueOnError) {
                                                  throw e;
                                                }
                                                return e;
                                              }
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["getCustomerId"] != null &&
                                      typeof $steps["getCustomerId"] ===
                                        "object" &&
                                      typeof $steps["getCustomerId"].then ===
                                        "function"
                                    ) {
                                      $steps["getCustomerId"] = await $steps[
                                        "getCustomerId"
                                      ];
                                    }

                                    $steps["updateCustomerId"] =
                                      $queries.keys.data[0]
                                        .stripe_customer_id === null
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["getCustomerId"]
                                              },
                                              operation: 0,
                                              value: $steps.getCustomerId
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["updateCustomerId"] != null &&
                                      typeof $steps["updateCustomerId"] ===
                                        "object" &&
                                      typeof $steps["updateCustomerId"].then ===
                                        "function"
                                    ) {
                                      $steps["updateCustomerId"] = await $steps[
                                        "updateCustomerId"
                                      ];
                                    }

                                    $steps["postgresUpdateMany"] =
                                      $queries.keys.data[0]
                                        .stripe_customer_id === null
                                        ? (() => {
                                            const actionArgs = {
                                              dataOp: {
                                                sourceId:
                                                  "83X9ZdYzYUYJtgqe5fwXeX",
                                                opId: "db5c2a00-d97e-45cc-8a20-0bbb320aa191",
                                                userArgs: {
                                                  variables: [
                                                    $state.getCustomerId.data
                                                      .response.id
                                                  ]
                                                },
                                                cacheKey: null,
                                                invalidatedKeys: [],
                                                roleId: null
                                              }
                                            };
                                            return (async ({
                                              dataOp,
                                              continueOnError
                                            }) => {
                                              try {
                                                const response =
                                                  await executePlasmicDataOp(
                                                    dataOp,
                                                    {
                                                      userAuthToken:
                                                        dataSourcesCtx?.userAuthToken,
                                                      user: dataSourcesCtx?.user
                                                    }
                                                  );
                                                await plasmicInvalidate(
                                                  dataOp.invalidatedKeys
                                                );
                                                return response;
                                              } catch (e) {
                                                if (!continueOnError) {
                                                  throw e;
                                                }
                                                return e;
                                              }
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["postgresUpdateMany"] != null &&
                                      typeof $steps["postgresUpdateMany"] ===
                                        "object" &&
                                      typeof $steps["postgresUpdateMany"]
                                        .then === "function"
                                    ) {
                                      $steps["postgresUpdateMany"] =
                                        await $steps["postgresUpdateMany"];
                                    }

                                    $steps["refreshData"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            queryInvalidation: [
                                              "plasmic_refresh_all"
                                            ]
                                          };
                                          return (async ({
                                            queryInvalidation
                                          }) => {
                                            if (!queryInvalidation) {
                                              return;
                                            }
                                            await plasmicInvalidate(
                                              queryInvalidation
                                            );
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["refreshData"] != null &&
                                      typeof $steps["refreshData"] ===
                                        "object" &&
                                      typeof $steps["refreshData"].then ===
                                        "function"
                                    ) {
                                      $steps["refreshData"] = await $steps[
                                        "refreshData"
                                      ];
                                    }

                                    $steps["stripeCheckout"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            dataOp: {
                                              sourceId:
                                                "ao83tYnui5QEAuzybxgrVJ",
                                              opId: "051f975c-168b-4f88-8ee8-78a9b8500e61",
                                              userArgs: {
                                                params: [
                                                  $queries.keys.data[0]
                                                    .stripe_customer_id
                                                ]
                                              },
                                              cacheKey: null,
                                              invalidatedKeys: [
                                                "plasmic_refresh_all"
                                              ],
                                              roleId: null
                                            }
                                          };
                                          return (async ({
                                            dataOp,
                                            continueOnError
                                          }) => {
                                            try {
                                              const response =
                                                await executePlasmicDataOp(
                                                  dataOp,
                                                  {
                                                    userAuthToken:
                                                      dataSourcesCtx?.userAuthToken,
                                                    user: dataSourcesCtx?.user
                                                  }
                                                );
                                              await plasmicInvalidate(
                                                dataOp.invalidatedKeys
                                              );
                                              return response;
                                            } catch (e) {
                                              if (!continueOnError) {
                                                throw e;
                                              }
                                              return e;
                                            }
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["stripeCheckout"] != null &&
                                      typeof $steps["stripeCheckout"] ===
                                        "object" &&
                                      typeof $steps["stripeCheckout"].then ===
                                        "function"
                                    ) {
                                      $steps["stripeCheckout"] = await $steps[
                                        "stripeCheckout"
                                      ];
                                    }

                                    $steps["updateStripeUrl"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["checkoutSession"]
                                            },
                                            operation: 0,
                                            value: $steps.stripeCheckout
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateStripeUrl"] != null &&
                                      typeof $steps["updateStripeUrl"] ===
                                        "object" &&
                                      typeof $steps["updateStripeUrl"].then ===
                                        "function"
                                    ) {
                                      $steps["updateStripeUrl"] = await $steps[
                                        "updateStripeUrl"
                                      ];
                                    }

                                    $steps["postgresUpdateMany2"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            dataOp: {
                                              sourceId:
                                                "83X9ZdYzYUYJtgqe5fwXeX",
                                              opId: "b5786ab6-f19f-413d-912f-22a5f693635a",
                                              userArgs: {
                                                variables: [
                                                  $state.checkoutSession.data
                                                    .response.id
                                                ]
                                              },
                                              cacheKey: null,
                                              invalidatedKeys: [
                                                "plasmic_refresh_all"
                                              ],
                                              roleId: null
                                            }
                                          };
                                          return (async ({
                                            dataOp,
                                            continueOnError
                                          }) => {
                                            try {
                                              const response =
                                                await executePlasmicDataOp(
                                                  dataOp,
                                                  {
                                                    userAuthToken:
                                                      dataSourcesCtx?.userAuthToken,
                                                    user: dataSourcesCtx?.user
                                                  }
                                                );
                                              await plasmicInvalidate(
                                                dataOp.invalidatedKeys
                                              );
                                              return response;
                                            } catch (e) {
                                              if (!continueOnError) {
                                                throw e;
                                              }
                                              return e;
                                            }
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["postgresUpdateMany2"] != null &&
                                      typeof $steps["postgresUpdateMany2"] ===
                                        "object" &&
                                      typeof $steps["postgresUpdateMany2"]
                                        .then === "function"
                                    ) {
                                      $steps["postgresUpdateMany2"] =
                                        await $steps["postgresUpdateMany2"];
                                    }

                                    $steps["goToPage"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            destination: (() => {
                                              try {
                                                return $state.checkoutSession
                                                  .data.response.url;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          };
                                          return (({ destination }) => {
                                            if (
                                              typeof destination === "string" &&
                                              destination.startsWith("#")
                                            ) {
                                              document
                                                .getElementById(
                                                  destination.substr(1)
                                                )
                                                .scrollIntoView({
                                                  behavior: "smooth"
                                                });
                                            } else {
                                              __nextRouter?.push(destination);
                                            }
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["goToPage"] != null &&
                                      typeof $steps["goToPage"] === "object" &&
                                      typeof $steps["goToPage"].then ===
                                        "function"
                                    ) {
                                      $steps["goToPage"] = await $steps[
                                        "goToPage"
                                      ];
                                    }
                                  }}
                                >
                                  <ButtonOutline
                                    className={classNames(
                                      "__wab_instance",
                                      sty.buttonOutline___7UgWo
                                    )}
                                    styles={"wide"}
                                  >
                                    {"Get Started"}
                                  </ButtonOutline>
                                </AntdButton>
                              </div>
                            ) : null}
                            {(() => {
                              try {
                                return $queries.keys.data[0].major_plan == 3;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                data-plasmic-name={"checker5"}
                                data-plasmic-override={overrides.checker5}
                                className={classNames(
                                  projectcss.all,
                                  sty.checker5
                                )}
                              >
                                <AntdButton
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__ggFtA
                                  )}
                                  disabled={true}
                                >
                                  <ButtonOutline
                                    className={classNames(
                                      "__wab_instance",
                                      sty.buttonOutline__uxAbw
                                    )}
                                    styles={"disabled"}
                                  >
                                    {"Current Plan"}
                                  </ButtonOutline>
                                </AntdButton>
                              </div>
                            ) : null}
                          </React.Fragment>
                        }
                      >
                        {(() => {
                          try {
                            return $queries.keys.data[0].major_plan !== 2;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            data-plasmic-name={"checker2"}
                            data-plasmic-override={overrides.checker2}
                            className={classNames(projectcss.all, sty.checker2)}
                          >
                            <AntdButton
                              className={classNames(
                                "__wab_instance",
                                sty.button__qqODt
                              )}
                              onClick={async () => {
                                const $steps = {};

                                $steps["getCustomerId"] =
                                  $queries.keys.data[0].stripe_customer_id ===
                                  null
                                    ? (() => {
                                        const actionArgs = {
                                          dataOp: {
                                            sourceId: "ao83tYnui5QEAuzybxgrVJ",
                                            opId: "c683e00f-bd43-49df-bda2-a239be173777",
                                            userArgs: {
                                              params: [
                                                $queries.keys.data[0].owner,
                                                $queries.keys.data[0].owner
                                              ]
                                            },
                                            cacheKey: null,
                                            invalidatedKeys: [],
                                            roleId: null
                                          }
                                        };
                                        return (async ({
                                          dataOp,
                                          continueOnError
                                        }) => {
                                          try {
                                            const response =
                                              await executePlasmicDataOp(
                                                dataOp,
                                                {
                                                  userAuthToken:
                                                    dataSourcesCtx?.userAuthToken,
                                                  user: dataSourcesCtx?.user
                                                }
                                              );
                                            await plasmicInvalidate(
                                              dataOp.invalidatedKeys
                                            );
                                            return response;
                                          } catch (e) {
                                            if (!continueOnError) {
                                              throw e;
                                            }
                                            return e;
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["getCustomerId"] != null &&
                                  typeof $steps["getCustomerId"] === "object" &&
                                  typeof $steps["getCustomerId"].then ===
                                    "function"
                                ) {
                                  $steps["getCustomerId"] = await $steps[
                                    "getCustomerId"
                                  ];
                                }

                                $steps["updateCustomerId"] =
                                  $queries.keys.data[0].stripe_customer_id ===
                                  null
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["getCustomerId"]
                                          },
                                          operation: 0,
                                          value: $steps.getCustomerId
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["updateCustomerId"] != null &&
                                  typeof $steps["updateCustomerId"] ===
                                    "object" &&
                                  typeof $steps["updateCustomerId"].then ===
                                    "function"
                                ) {
                                  $steps["updateCustomerId"] = await $steps[
                                    "updateCustomerId"
                                  ];
                                }

                                $steps["postgresUpdateMany"] =
                                  $queries.keys.data[0].stripe_customer_id ===
                                  null
                                    ? (() => {
                                        const actionArgs = {
                                          dataOp: {
                                            sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
                                            opId: "db5c2a00-d97e-45cc-8a20-0bbb320aa191",
                                            userArgs: {
                                              variables: [
                                                $state.getCustomerId.data
                                                  .response.id
                                              ]
                                            },
                                            cacheKey: null,
                                            invalidatedKeys: [],
                                            roleId: null
                                          }
                                        };
                                        return (async ({
                                          dataOp,
                                          continueOnError
                                        }) => {
                                          try {
                                            const response =
                                              await executePlasmicDataOp(
                                                dataOp,
                                                {
                                                  userAuthToken:
                                                    dataSourcesCtx?.userAuthToken,
                                                  user: dataSourcesCtx?.user
                                                }
                                              );
                                            await plasmicInvalidate(
                                              dataOp.invalidatedKeys
                                            );
                                            return response;
                                          } catch (e) {
                                            if (!continueOnError) {
                                              throw e;
                                            }
                                            return e;
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["postgresUpdateMany"] != null &&
                                  typeof $steps["postgresUpdateMany"] ===
                                    "object" &&
                                  typeof $steps["postgresUpdateMany"].then ===
                                    "function"
                                ) {
                                  $steps["postgresUpdateMany"] = await $steps[
                                    "postgresUpdateMany"
                                  ];
                                }

                                $steps["refreshData"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        queryInvalidation: [
                                          "plasmic_refresh_all"
                                        ]
                                      };
                                      return (async ({ queryInvalidation }) => {
                                        if (!queryInvalidation) {
                                          return;
                                        }
                                        await plasmicInvalidate(
                                          queryInvalidation
                                        );
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["refreshData"] != null &&
                                  typeof $steps["refreshData"] === "object" &&
                                  typeof $steps["refreshData"].then ===
                                    "function"
                                ) {
                                  $steps["refreshData"] = await $steps[
                                    "refreshData"
                                  ];
                                }

                                $steps["stripeCheckout"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "ao83tYnui5QEAuzybxgrVJ",
                                          opId: "88848f67-5701-4574-80d0-39832104c9a6",
                                          userArgs: {
                                            params: [
                                              $queries.keys.data[0]
                                                .stripe_customer_id
                                            ]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [
                                            "plasmic_refresh_all"
                                          ],
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["stripeCheckout"] != null &&
                                  typeof $steps["stripeCheckout"] ===
                                    "object" &&
                                  typeof $steps["stripeCheckout"].then ===
                                    "function"
                                ) {
                                  $steps["stripeCheckout"] = await $steps[
                                    "stripeCheckout"
                                  ];
                                }

                                $steps["updateStripeUrl"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["checkoutSession"]
                                        },
                                        operation: 0,
                                        value: $steps.stripeCheckout
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateStripeUrl"] != null &&
                                  typeof $steps["updateStripeUrl"] ===
                                    "object" &&
                                  typeof $steps["updateStripeUrl"].then ===
                                    "function"
                                ) {
                                  $steps["updateStripeUrl"] = await $steps[
                                    "updateStripeUrl"
                                  ];
                                }

                                $steps["postgresUpdateMany2"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
                                          opId: "000ad3b6-8c00-4189-a0cd-4bcd0e842b1f",
                                          userArgs: {
                                            variables: [
                                              $state.checkoutSession.data
                                                .response.id
                                            ]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [
                                            "plasmic_refresh_all"
                                          ],
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["postgresUpdateMany2"] != null &&
                                  typeof $steps["postgresUpdateMany2"] ===
                                    "object" &&
                                  typeof $steps["postgresUpdateMany2"].then ===
                                    "function"
                                ) {
                                  $steps["postgresUpdateMany2"] = await $steps[
                                    "postgresUpdateMany2"
                                  ];
                                }

                                $steps["goToPage"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        destination: (() => {
                                          try {
                                            return $state.checkoutSession.data
                                              .response.url;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      };
                                      return (({ destination }) => {
                                        if (
                                          typeof destination === "string" &&
                                          destination.startsWith("#")
                                        ) {
                                          document
                                            .getElementById(
                                              destination.substr(1)
                                            )
                                            .scrollIntoView({
                                              behavior: "smooth"
                                            });
                                        } else {
                                          __nextRouter?.push(destination);
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["goToPage"] != null &&
                                  typeof $steps["goToPage"] === "object" &&
                                  typeof $steps["goToPage"].then === "function"
                                ) {
                                  $steps["goToPage"] = await $steps["goToPage"];
                                }
                              }}
                            >
                              <ButtonOutline
                                className={classNames(
                                  "__wab_instance",
                                  sty.buttonOutline___2HOon
                                )}
                                styles={"blue"}
                              >
                                {"Get Started"}
                              </ButtonOutline>
                            </AntdButton>
                          </div>
                        ) : null}
                        {(() => {
                          try {
                            return $queries.keys.data[0].major_plan == 2;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            data-plasmic-name={"checker6"}
                            data-plasmic-override={overrides.checker6}
                            className={classNames(projectcss.all, sty.checker6)}
                          >
                            <AntdButton
                              className={classNames(
                                "__wab_instance",
                                sty.button__q3E60
                              )}
                              disabled={true}
                            >
                              <ButtonOutline
                                className={classNames(
                                  "__wab_instance",
                                  sty.buttonOutline___8IU7U
                                )}
                                styles={"disabled"}
                              >
                                {"Current Plan"}
                              </ButtonOutline>
                            </AntdButton>
                          </div>
                        ) : null}
                      </Pricing>
                    </Reveal>
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__zGFem
                      )}
                      onClick={async () => {
                        const $steps = {};

                        $steps["postgresUpdateMany"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
                                  opId: "4b96e71b-e68e-4039-b200-88fafc1c91e3",
                                  userArgs: {},
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["postgresUpdateMany"] != null &&
                          typeof $steps["postgresUpdateMany"] === "object" &&
                          typeof $steps["postgresUpdateMany"].then ===
                            "function"
                        ) {
                          $steps["postgresUpdateMany"] = await $steps[
                            "postgresUpdateMany"
                          ];
                        }
                      }}
                    >
                      <div
                        data-plasmic-name={"text"}
                        data-plasmic-override={overrides.text}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text
                        )}
                      >
                        {"Button"}
                      </div>
                    </AntdButton>
                  </div>
                </section>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "section",
    "freeBox",
    "reveal",
    "pricing",
    "checker2",
    "checker6",
    "checker",
    "checker4",
    "checker3",
    "checker5",
    "text"
  ],
  pageLayout: [
    "pageLayout",
    "section",
    "freeBox",
    "reveal",
    "pricing",
    "checker2",
    "checker6",
    "checker",
    "checker4",
    "checker3",
    "checker5",
    "text"
  ],
  section: [
    "section",
    "freeBox",
    "reveal",
    "pricing",
    "checker2",
    "checker6",
    "checker",
    "checker4",
    "checker3",
    "checker5",
    "text"
  ],
  freeBox: [
    "freeBox",
    "reveal",
    "pricing",
    "checker2",
    "checker6",
    "checker",
    "checker4",
    "checker3",
    "checker5",
    "text"
  ],
  reveal: [
    "reveal",
    "pricing",
    "checker2",
    "checker6",
    "checker",
    "checker4",
    "checker3",
    "checker5"
  ],
  pricing: [
    "pricing",
    "checker2",
    "checker6",
    "checker",
    "checker4",
    "checker3",
    "checker5"
  ],
  checker2: ["checker2"],
  checker6: ["checker6"],
  checker: ["checker"],
  checker4: ["checker4"],
  checker3: ["checker3"],
  checker5: ["checker5"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  section: "section";
  freeBox: "div";
  reveal: typeof Reveal;
  pricing: typeof Pricing;
  checker2: "div";
  checker6: "div";
  checker: "div";
  checker4: "div";
  checker3: "div";
  checker5: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPaymentGateway__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPaymentGateway__VariantsArgs;
    args?: PlasmicPaymentGateway__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPaymentGateway__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPaymentGateway__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPaymentGateway__ArgProps,
          internalVariantPropNames: PlasmicPaymentGateway__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPaymentGateway__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPaymentGateway";
  } else {
    func.displayName = `PlasmicPaymentGateway.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={"d035f350-edf5-4268-af03-4480b52522b0"}
      appId={"2Up8DUmBB1Tx5dhznkvCW5"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "2Up8DUmBB1Tx5dhznkvCW5"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicPaymentGateway = Object.assign(
  // Top-level PlasmicPaymentGateway renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    section: makeNodeComponent("section"),
    freeBox: makeNodeComponent("freeBox"),
    reveal: makeNodeComponent("reveal"),
    pricing: makeNodeComponent("pricing"),
    checker2: makeNodeComponent("checker2"),
    checker6: makeNodeComponent("checker6"),
    checker: makeNodeComponent("checker"),
    checker4: makeNodeComponent("checker4"),
    checker3: makeNodeComponent("checker3"),
    checker5: makeNodeComponent("checker5"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicPaymentGateway
    internalVariantProps: PlasmicPaymentGateway__VariantProps,
    internalArgProps: PlasmicPaymentGateway__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPaymentGateway;
/* prettier-ignore-end */
