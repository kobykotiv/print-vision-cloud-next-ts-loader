// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2Up8DUmBB1Tx5dhznkvCW5
// Component: x_9KNQmw4n3T

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import PageLayout from "../../PageLayout"; // plasmic-import: nHDfdLqBbJ3Q/component
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import Modal from "../../Modal"; // plasmic-import: QsGKyhsi7rjB/component
import Button2 from "../../Button2"; // plasmic-import: 5htpOgxRwHbE/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/SchemaForm";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import { ConditionGuard } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 2Up8DUmBB1Tx5dhznkvCW5/projectcss
import sty from "./PlasmicSettings.module.css"; // plasmic-import: x_9KNQmw4n3T/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: -lOMU8AnMmP_/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: TF0F3UORt2hA/icon

createPlasmicElementProxy;

export type PlasmicSettings__VariantMembers = {};
export type PlasmicSettings__VariantsArgs = {};
type VariantPropType = keyof PlasmicSettings__VariantsArgs;
export const PlasmicSettings__VariantProps = new Array<VariantPropType>();

export type PlasmicSettings__ArgsType = {};
type ArgPropType = keyof PlasmicSettings__ArgsType;
export const PlasmicSettings__ArgProps = new Array<ArgPropType>();

export type PlasmicSettings__OverridesType = {
  root?: Flex__<"div">;
  pageLayout?: Flex__<typeof PageLayout>;
  img?: Flex__<typeof PlasmicImg__>;
  userTable?: Flex__<typeof RichTable>;
  modalNewUser?: Flex__<typeof Modal>;
  h3?: Flex__<"h3">;
  form2?: Flex__<typeof FormWrapper>;
  modalExistingUser?: Flex__<typeof Modal>;
  form?: Flex__<typeof FormWrapper>;
  timer?: Flex__<typeof Timer>;
  checkPrintifyId?: Flex__<typeof ConditionGuard>;
};

export interface DefaultSettingsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSettings__RenderFunc(props: {
  variants: PlasmicSettings__VariantsArgs;
  args: PlasmicSettings__ArgsType;
  overrides: PlasmicSettings__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "userTable.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "userTable.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "userTable.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "userTable.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "selectedKeys",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "file",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "signedUploadUrl",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "printifyId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return currentUser.customProperties.printify_shop_id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "printfulId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return currentUser.customProperties.printful_shop_id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "modalNewUser.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "form2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "trigger",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "modalExistingUser.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "timer",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "81791845-f7a9-4d78-93d6-7770af2f46b4",
        userArgs: {},
        cacheKey: `plasmic.$.81791845-f7a9-4d78-93d6-7770af2f46b4.$.`,
        invalidatedKeys: null,
        roleId: "d035f350-edf5-4268-af03-4480b52522b0"
      };
    }),
    printifyGetShops: usePlasmicDataOp(() => {
      return {
        sourceId: "fumskhn7h2QULzwkXAtFMC",
        opId: "8698f2f3-8bdf-4d19-99d2-c942b42bb32b",
        userArgs: {
          headers: [$queries.query.data[0].printify_key]
        },
        cacheKey: `plasmic.$.8698f2f3-8bdf-4d19-99d2-c942b42bb32b.$.`,
        invalidatedKeys: null,
        roleId: "d035f350-edf5-4268-af03-4480b52522b0"
      };
    }),
    printfulGetShops: usePlasmicDataOp(() => {
      return {
        sourceId: "w9bT7zJHQBMsxuYyCMQHKC",
        opId: "487251d6-10c5-4397-b5e2-78b0a0f8d9e6",
        userArgs: {},
        cacheKey: `plasmic.$.487251d6-10c5-4397-b5e2-78b0a0f8d9e6.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___4E9Mg)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ttjxo)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zqEie
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__uX3Y3
                          )}
                        />

                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__rlUEn
                          )}
                        />
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sHlll
                        )}
                      >
                        <PlasmicImg__
                          data-plasmic-name={"img"}
                          data-plasmic-override={overrides.img}
                          alt={""}
                          className={classNames(sty.img)}
                          displayHeight={"150px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"150px"}
                          loading={"lazy"}
                          src={(() => {
                            try {
                              return currentUser.properties.avatarUrl;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />

                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mKf5E
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__oFqVa
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentUser.properties.firstName;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__v4Qcv
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentUser.properties.lastName;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </Stack__>
                      </Stack__>
                    </div>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__wCAat)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ouGg
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lOn4T
                          )}
                        >
                          {"Printify id:"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__p3Jr7
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentUser.customProperties
                                  .printify_shop_id;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__gxTws)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__o1Lj
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ycuib
                          )}
                        >
                          {"Printful id:"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1E2Rq
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentUser.customProperties
                                  .printful_shop_id;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__yow9A)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dgaFs
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__skmZc
                          )}
                        >
                          {"Printify logo id:"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__u9HrT
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentUser.customProperties
                                  .printify_logo_id;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__nYc5P)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wt3Yl
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___5Jpvz
                          )}
                        >
                          {"Printful logo id:"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ltQZh
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentUser.customProperties
                                  .printful_logo_id;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Empty";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                    </Stack__>
                  </div>
                  {(() => {
                    try {
                      return $queries.query.data.length > 0;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()
                    ? (() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.userTable
                          ),
                          data: (() => {
                            try {
                              return $queries.query;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          fields: (() => {
                            const __composite = [
                              { key: "id", fieldId: "id" },
                              {
                                key: "printful_key",
                                fieldId: "printful_key",
                                isHidden: null
                              },
                              {
                                key: "printify_shop_id",
                                fieldId: "printify_shop_id",
                                isHidden: null
                              },
                              { key: "owner", fieldId: "owner" },
                              {
                                key: "printify_key",
                                fieldId: "printify_key",
                                isHidden: null
                              },
                              {
                                key: "prodigi_key",
                                fieldId: "prodigi_key",
                                isHidden: null
                              },
                              {
                                key: "printful_shop_id",
                                fieldId: "printful_shop_id",
                                isHidden: null
                              },
                              {
                                key: "printful_logo_id",
                                fieldId: "printful_logo_id",
                                isHidden: null
                              },
                              {
                                key: "printify_logo_id",
                                fieldId: "printify_logo_id",
                                isHidden: null
                              },
                              {
                                key: "changing_payment_intent",
                                fieldId: "changing_payment_intent",
                                isHidden: null
                              },
                              {
                                key: "major_plan",
                                fieldId: "major_plan",
                                isHidden: null
                              },
                              {
                                key: "payment_status",
                                fieldId: "payment_status",
                                isHidden: null
                              },
                              {
                                key: "stripe_customer_id",
                                fieldId: "stripe_customer_id",
                                isHidden: null
                              },
                              {
                                key: "major_payment_intent",
                                fieldId: "major_payment_intent",
                                disableSorting: null,
                                isHidden: null
                              },
                              { key: "owner_name", fieldId: "owner_name" },
                              {
                                key: "changing_plan",
                                fieldId: "changing_plan",
                                isHidden: null
                              }
                            ];
                            __composite["1"]["isHidden"] = true;
                            __composite["2"]["isHidden"] = true;
                            __composite["4"]["isHidden"] = true;
                            __composite["5"]["isHidden"] = true;
                            __composite["6"]["isHidden"] = true;
                            __composite["7"]["isHidden"] = true;
                            __composite["8"]["isHidden"] = true;
                            __composite["9"]["isHidden"] = true;
                            __composite["10"]["isHidden"] = true;
                            __composite["11"]["isHidden"] = true;
                            __composite["12"]["isHidden"] = true;
                            __composite["13"]["disableSorting"] = false;
                            __composite["13"]["isHidden"] = true;
                            __composite["15"]["isHidden"] = true;
                            return __composite;
                          })(),

                          hideColumnPicker: true,
                          hideExports: true,
                          hideSearch: true,
                          onRowSelectionChanged: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRowKey",
                              ["userTable", "selectedRowKey"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRow",
                              ["userTable", "selectedRow"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRows",
                              ["userTable", "selectedRows"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRowKeys",
                              ["userTable", "selectedRowKeys"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                          },
                          pagination: false,
                          rowActions: (() => {
                            const __composite = [
                              { type: "item", label: null, onClick: null }
                            ];
                            __composite["0"]["label"] = "edit";
                            __composite["0"]["onClick"] = async (
                              rowKey,
                              row
                            ) => {
                              const $steps = {};

                              $steps["updateSelectedKeys"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["selectedKeys"]
                                      },
                                      operation: 0,
                                      value: row
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateSelectedKeys"] != null &&
                                typeof $steps["updateSelectedKeys"] ===
                                  "object" &&
                                typeof $steps["updateSelectedKeys"].then ===
                                  "function"
                              ) {
                                $steps["updateSelectedKeys"] = await $steps[
                                  "updateSelectedKeys"
                                ];
                              }

                              $steps["updateModalExistingUserIsOpen"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: [
                                          "modalExistingUser",
                                          "isOpen"
                                        ]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateModalExistingUserIsOpen"] !=
                                  null &&
                                typeof $steps[
                                  "updateModalExistingUserIsOpen"
                                ] === "object" &&
                                typeof $steps["updateModalExistingUserIsOpen"]
                                  .then === "function"
                              ) {
                                $steps["updateModalExistingUserIsOpen"] =
                                  await $steps["updateModalExistingUserIsOpen"];
                              }
                            };
                            return __composite;
                          })(),

                          scopeClassName: sty["userTable__instance"],
                          selectedRowKey: generateStateValueProp($state, [
                            "userTable",
                            "selectedRowKey"
                          ]),
                          selectedRowKeys: generateStateValueProp($state, [
                            "userTable",
                            "selectedRowKeys"
                          ]),
                          themeResetClassName: classNames(
                            projectcss.root_reset,
                            projectcss.root_reset_tags,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "selectedRowKey",
                              plasmicStateName: "userTable.selectedRowKey"
                            },
                            {
                              name: "selectedRow",
                              plasmicStateName: "userTable.selectedRow"
                            },
                            {
                              name: "selectedRows",
                              plasmicStateName: "userTable.selectedRows"
                            },
                            {
                              name: "selectedRowKeys",
                              plasmicStateName: "userTable.selectedRowKeys"
                            }
                          ],
                          [],
                          RichTable_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <RichTable
                            data-plasmic-name={"userTable"}
                            data-plasmic-override={overrides.userTable}
                            {...child$Props}
                          />
                        );
                      })()
                    : null}
                  <Modal
                    data-plasmic-name={"modalNewUser"}
                    data-plasmic-override={overrides.modalNewUser}
                    className={classNames("__wab_instance", sty.modalNewUser)}
                    content={
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gYAjW
                        )}
                      >
                        {(() => {
                          const child$Props = {
                            children: null,
                            className: classNames("__wab_instance", sty.form2),
                            data: {
                              sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
                              opId: "48a2fc8a-5eb5-45fa-861b-a30f118d95b3",
                              userArgs: {},
                              cacheKey: `plasmic.$.${(() => {
                                try {
                                  return "getSchema";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}.$.48a2fc8a-5eb5-45fa-861b-a30f118d95b3.$.`,
                              invalidatedKeys: null,
                              roleId: null
                            },
                            dataFormItems: (() => {
                              const __composite = [
                                {
                                  key: "id",
                                  inputType: "Number",
                                  fieldId: "id",
                                  label: "id",
                                  name: "id",
                                  hidden: null
                                },
                                {
                                  key: "owner_name",
                                  inputType: "Text",
                                  fieldId: "owner_name",
                                  label: null,
                                  name: "owner_name"
                                },
                                {
                                  key: "owner",
                                  inputType: "Text",
                                  fieldId: "owner",
                                  label: "owner",
                                  name: "owner",
                                  initialValue: null,
                                  hidden: null
                                },
                                {
                                  key: "changing_payment_intent",
                                  inputType: "Text",
                                  fieldId: "changing_payment_intent",
                                  label: "changing_payment_intent",
                                  name: "changing_payment_intent",
                                  hidden: null
                                },
                                {
                                  key: "printify_key",
                                  inputType: "Text",
                                  fieldId: "printify_key",
                                  label: "printify_key",
                                  name: "printify_key",
                                  hidden: null
                                },
                                {
                                  key: "major_plan",
                                  inputType: "Number",
                                  fieldId: "major_plan",
                                  label: "major_plan",
                                  name: "major_plan",
                                  initialValue: null,
                                  hidden: null
                                },
                                {
                                  key: "payment_status",
                                  inputType: "Checkbox",
                                  fieldId: "payment_status",
                                  label: "payment_status",
                                  name: "payment_status",
                                  hidden: null
                                },
                                {
                                  key: "printful_key",
                                  inputType: "Text",
                                  fieldId: "printful_key",
                                  label: "printful_key",
                                  name: "printful_key",
                                  hidden: null
                                },
                                {
                                  key: "stripe_customer_id",
                                  inputType: "Text",
                                  fieldId: "stripe_customer_id",
                                  label: "stripe_customer_id",
                                  name: "stripe_customer_id",
                                  hidden: null
                                },
                                {
                                  key: "printify_logo_id",
                                  inputType: "Text",
                                  fieldId: "printify_logo_id",
                                  label: "printify_logo_id",
                                  name: "printify_logo_id",
                                  hidden: null
                                },
                                {
                                  key: "prodigi_key",
                                  inputType: "Text",
                                  fieldId: "prodigi_key",
                                  label: "prodigi_key",
                                  name: "prodigi_key",
                                  hidden: null
                                },
                                {
                                  key: "major_payment_intent",
                                  inputType: "Text",
                                  fieldId: "major_payment_intent",
                                  label: "major_payment_intent",
                                  name: "major_payment_intent",
                                  hidden: null
                                },
                                {
                                  key: "printify_shop_id",
                                  inputType: "Text",
                                  fieldId: "printify_shop_id",
                                  label: "printify_shop_id",
                                  name: "printify_shop_id",
                                  hidden: null
                                },
                                {
                                  key: "printful_logo_id",
                                  inputType: "Text",
                                  fieldId: "printful_logo_id",
                                  label: "printful_logo_id",
                                  name: "printful_logo_id",
                                  hidden: null
                                },
                                {
                                  key: "changing_plan",
                                  inputType: "Number",
                                  fieldId: "changing_plan",
                                  label: "changing_plan",
                                  name: "changing_plan",
                                  hidden: null
                                },
                                {
                                  key: "printful_shop_id",
                                  inputType: "Text",
                                  fieldId: "printful_shop_id",
                                  label: "printful_shop_id",
                                  name: "printful_shop_id",
                                  hidden: null
                                }
                              ];
                              __composite["0"]["hidden"] = true;
                              __composite["1"]["label"] = "Your Full Name";
                              __composite["2"]["initialValue"] =
                                currentUser.email;
                              __composite["2"]["hidden"] = true;
                              __composite["3"]["hidden"] = true;
                              __composite["4"]["hidden"] = true;
                              __composite["5"]["initialValue"] = 0;
                              __composite["5"]["hidden"] = true;
                              __composite["6"]["hidden"] = true;
                              __composite["7"]["hidden"] = true;
                              __composite["8"]["hidden"] = true;
                              __composite["9"]["hidden"] = true;
                              __composite["10"]["hidden"] = true;
                              __composite["11"]["hidden"] = true;
                              __composite["12"]["hidden"] = true;
                              __composite["13"]["hidden"] = true;
                              __composite["14"]["hidden"] = true;
                              __composite["15"]["hidden"] = true;
                              return __composite;
                            })(),

                            extendedOnValuesChange: async (
                              ...eventArgs: any
                            ) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["form2", "value"],
                                FormWrapper_Helpers
                              ).apply(null, eventArgs);
                            },
                            formItems: [],
                            labelCol: { span: 8, horizontalOnly: true },
                            layout: "vertical",
                            mode: "simplified",
                            onFinish: async values => {
                              const $steps = {};

                              $steps["defaultSubmit"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
                                        opId: "2814e0d1-a4b5-4d1e-9bf8-bf0d0d313a0f",
                                        userArgs: {
                                          variables: [$state.form2.value]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "plasmic_refresh_all"
                                        ],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["defaultSubmit"] != null &&
                                typeof $steps["defaultSubmit"] === "object" &&
                                typeof $steps["defaultSubmit"].then ===
                                  "function"
                              ) {
                                $steps["defaultSubmit"] = await $steps[
                                  "defaultSubmit"
                                ];
                              }

                              $steps["refreshData"] = true
                                ? (() => {
                                    const actionArgs = {
                                      queryInvalidation: ["plasmic_refresh_all"]
                                    };
                                    return (async ({ queryInvalidation }) => {
                                      if (!queryInvalidation) {
                                        return;
                                      }
                                      await plasmicInvalidate(
                                        queryInvalidation
                                      );
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["refreshData"] != null &&
                                typeof $steps["refreshData"] === "object" &&
                                typeof $steps["refreshData"].then === "function"
                              ) {
                                $steps["refreshData"] = await $steps[
                                  "refreshData"
                                ];
                              }
                            },
                            onIsSubmittingChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "isSubmitting",
                                ["form2", "isSubmitting"],
                                FormWrapper_Helpers
                              ).apply(null, eventArgs);
                            },
                            ref: ref => {
                              $refs["form2"] = ref;
                            },
                            submitSlot: (
                              <AntdButton
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__g1Qw5
                                )}
                                submitsForm={true}
                                type={"primary"}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__v2A2F
                                  )}
                                >
                                  {"Submit"}
                                </div>
                              </AntdButton>
                            ),
                            wrapperCol: { span: 16, horizontalOnly: true }
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "form2.value"
                              },
                              {
                                name: "isSubmitting",
                                plasmicStateName: "form2.isSubmitting"
                              }
                            ],
                            [],
                            FormWrapper_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <FormWrapper
                              data-plasmic-name={"form2"}
                              data-plasmic-override={overrides.form2}
                              {...child$Props}
                            />
                          );
                        })()}
                      </Stack__>
                    }
                    footer={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dAEgc
                        )}
                      >
                        <Button2
                          color={"muted"}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xc7L3
                              )}
                            >
                              {"Close"}
                            </div>
                          }
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateAriaDialogTriggerIsOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: [
                                        "ariaDialogTrigger",
                                        "isOpen"
                                      ]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateAriaDialogTriggerIsOpen"] != null &&
                              typeof $steps["updateAriaDialogTriggerIsOpen"] ===
                                "object" &&
                              typeof $steps["updateAriaDialogTriggerIsOpen"]
                                .then === "function"
                            ) {
                              $steps["updateAriaDialogTriggerIsOpen"] =
                                await $steps["updateAriaDialogTriggerIsOpen"];
                            }
                          }}
                          type={"soft"}
                        />
                      </div>
                    }
                    heading={
                      <h3
                        data-plasmic-name={"h3"}
                        data-plasmic-override={overrides.h3}
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3
                        )}
                      >
                        {"Just Confirming..."}
                      </h3>
                    }
                    isOpen={generateStateValueProp($state, [
                      "modalNewUser",
                      "isOpen"
                    ])}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "modalNewUser",
                        "isOpen"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    trigger={
                      (() => {
                        try {
                          return $queries.query.data.length == 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Button2
                          className={classNames(
                            "__wab_instance",
                            sty.button2___6N4Fa
                          )}
                          label={"Complete Registration"}
                        />
                      ) : null
                    }
                  />

                  <Modal
                    data-plasmic-name={"modalExistingUser"}
                    data-plasmic-override={overrides.modalExistingUser}
                    className={classNames(
                      "__wab_instance",
                      sty.modalExistingUser
                    )}
                    content={
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___2XfRk
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sdeIg
                          )}
                        >
                          {"This is a Modal!"}
                        </div>
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.form),
                            data: {
                              sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
                              opId: "6e6cb52e-8254-4bf7-8a76-1a46cbd9c7fe",
                              userArgs: {
                                filters: [$state.trigger]
                              },
                              cacheKey: `plasmic.$.${(() => {
                                try {
                                  return "getOne";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}.$.6e6cb52e-8254-4bf7-8a76-1a46cbd9c7fe.$.`,
                              invalidatedKeys: null,
                              roleId: null
                            },
                            dataFormItems: (() => {
                              const __composite = [
                                {
                                  key: "id",
                                  inputType: "Number",
                                  fieldId: "id",
                                  label: "id",
                                  name: "id",
                                  hidden: null
                                },
                                {
                                  key: "owner",
                                  inputType: "Text",
                                  fieldId: "owner",
                                  label: "owner",
                                  name: "owner",
                                  hidden: null
                                },
                                {
                                  key: "changing_payment_intent",
                                  inputType: "Text",
                                  fieldId: "changing_payment_intent",
                                  label: "changing_payment_intent",
                                  name: "changing_payment_intent",
                                  hidden: null
                                },
                                {
                                  key: "printify_key",
                                  inputType: "Text",
                                  fieldId: "printify_key",
                                  label: "printify_key",
                                  name: "printify_key"
                                },
                                {
                                  key: "major_plan",
                                  inputType: "Number",
                                  fieldId: "major_plan",
                                  label: "major_plan",
                                  name: "major_plan",
                                  hidden: null
                                },
                                {
                                  key: "payment_status",
                                  inputType: "Checkbox",
                                  fieldId: "payment_status",
                                  label: "payment_status",
                                  name: "payment_status",
                                  hidden: null
                                },
                                {
                                  key: "printful_key",
                                  inputType: "Text",
                                  fieldId: "printful_key",
                                  label: "printful_key",
                                  name: "printful_key"
                                },
                                {
                                  key: "stripe_customer_id",
                                  inputType: "Text",
                                  fieldId: "stripe_customer_id",
                                  label: "stripe_customer_id",
                                  name: "stripe_customer_id",
                                  hidden: null
                                },
                                {
                                  key: "printify_logo_id",
                                  inputType: "Text",
                                  fieldId: "printify_logo_id",
                                  label: "printify_logo_id",
                                  name: "printify_logo_id"
                                },
                                {
                                  key: "prodigi_key",
                                  inputType: "Text",
                                  fieldId: "prodigi_key",
                                  label: "prodigi_key",
                                  name: "prodigi_key"
                                },
                                {
                                  key: "major_payment_intent",
                                  inputType: "Text",
                                  fieldId: "major_payment_intent",
                                  label: "major_payment_intent",
                                  name: "major_payment_intent",
                                  hidden: null
                                },
                                {
                                  key: "owner_name",
                                  inputType: "Text",
                                  fieldId: "owner_name",
                                  label: "owner_name",
                                  name: "owner_name"
                                },
                                {
                                  key: "printify_shop_id",
                                  inputType: "Text",
                                  fieldId: "printify_shop_id",
                                  label: "printify_shop_id",
                                  name: "printify_shop_id"
                                },
                                {
                                  key: "printful_logo_id",
                                  inputType: "Text",
                                  fieldId: "printful_logo_id",
                                  label: "printful_logo_id",
                                  name: "printful_logo_id"
                                },
                                {
                                  key: "changing_plan",
                                  inputType: "Number",
                                  fieldId: "changing_plan",
                                  label: "changing_plan",
                                  name: "changing_plan",
                                  hidden: null
                                },
                                {
                                  key: "printful_shop_id",
                                  inputType: "Text",
                                  fieldId: "printful_shop_id",
                                  label: "printful_shop_id",
                                  name: "printful_shop_id"
                                }
                              ];
                              __composite["0"]["hidden"] = true;
                              __composite["1"]["hidden"] = true;
                              __composite["2"]["hidden"] = true;
                              __composite["4"]["hidden"] = true;
                              __composite["5"]["hidden"] = true;
                              __composite["7"]["hidden"] = true;
                              __composite["10"]["hidden"] = true;
                              __composite["14"]["hidden"] = true;
                              return __composite;
                            })(),

                            extendedOnValuesChange: async (
                              ...eventArgs: any
                            ) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["form", "value"],
                                FormWrapper_Helpers
                              ).apply(null, eventArgs);
                            },
                            formItems: [],
                            labelCol: { span: 8, horizontalOnly: true },
                            layout: "vertical",
                            mode: "simplified",
                            onFinish: async values => {
                              const $steps = {};

                              $steps["defaultSubmit"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
                                        opId: "5cf047c3-eaf6-4490-a723-e7c119b44bb5",
                                        userArgs: {
                                          conditions: [$state.trigger],
                                          variables: [$state.form.value]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "plasmic_refresh_all"
                                        ],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["defaultSubmit"] != null &&
                                typeof $steps["defaultSubmit"] === "object" &&
                                typeof $steps["defaultSubmit"].then ===
                                  "function"
                              ) {
                                $steps["defaultSubmit"] = await $steps[
                                  "defaultSubmit"
                                ];
                              }
                            },
                            onIsSubmittingChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "isSubmitting",
                                ["form", "isSubmitting"],
                                FormWrapper_Helpers
                              ).apply(null, eventArgs);
                            },
                            ref: ref => {
                              $refs["form"] = ref;
                            },
                            submitSlot: (
                              <AntdButton
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__gfRdW
                                )}
                                submitsForm={true}
                                type={"primary"}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__sCDrM
                                  )}
                                >
                                  {"Submit"}
                                </div>
                              </AntdButton>
                            ),
                            wrapperCol: { span: 16, horizontalOnly: true }
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "form.value"
                              },
                              {
                                name: "isSubmitting",
                                plasmicStateName: "form.isSubmitting"
                              }
                            ],
                            [],
                            FormWrapper_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <FormWrapper
                              data-plasmic-name={"form"}
                              data-plasmic-override={overrides.form}
                              {...child$Props}
                            />
                          );
                        })()}
                      </Stack__>
                    }
                    footer={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mfd0
                        )}
                      >
                        <Button2
                          color={"muted"}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__lp3Dj
                              )}
                            >
                              {"Close"}
                            </div>
                          }
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateAriaDialogTriggerIsOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: [
                                        "ariaDialogTrigger",
                                        "isOpen"
                                      ]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateAriaDialogTriggerIsOpen"] != null &&
                              typeof $steps["updateAriaDialogTriggerIsOpen"] ===
                                "object" &&
                              typeof $steps["updateAriaDialogTriggerIsOpen"]
                                .then === "function"
                            ) {
                              $steps["updateAriaDialogTriggerIsOpen"] =
                                await $steps["updateAriaDialogTriggerIsOpen"];
                            }
                          }}
                          type={"soft"}
                        />
                      </div>
                    }
                    isOpen={generateStateValueProp($state, [
                      "modalExistingUser",
                      "isOpen"
                    ])}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "modalExistingUser",
                        "isOpen"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    trigger={
                      <Button2
                        className={classNames(
                          "__wab_instance",
                          sty.button2__nX2E
                        )}
                        label={"Open Modal"}
                      />
                    }
                  />

                  <AntdButton
                    className={classNames("__wab_instance", sty.button__itpFr)}
                    href={
                      "https://billing.stripe.com/p/login/eVacQv8Pofj819KbII"
                    }
                    shape={"round"}
                    target={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__x3K
                      )}
                    >
                      {"Go to Billing"}
                    </div>
                  </AntdButton>
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__dE1Cx)}
                    onClick={async () => {
                      const $steps = {};

                      $steps["logOut"] = true
                        ? (() => {
                            const actionArgs = {};
                            return (async ({ continueTo }) => {
                              try {
                                localStorage.removeItem("plasmic_user");
                                localStorage.removeItem(
                                  "$user.2Up8DUmBB1Tx5dhznkvCW5"
                                );
                              } catch (e) {}

                              if (window.__PLASMIC_AUTH_OVERRIDE) {
                                window.__PLASMIC_AUTH_OVERRIDE();
                              } else {
                                window.location.assign(
                                  continueTo || window.location.href
                                );
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["logOut"] != null &&
                        typeof $steps["logOut"] === "object" &&
                        typeof $steps["logOut"].then === "function"
                      ) {
                        $steps["logOut"] = await $steps["logOut"];
                      }
                    }}
                    shape={"round"}
                    target={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1KdFy
                      )}
                    >
                      {"Logout"}
                    </div>
                  </AntdButton>
                  <Timer
                    data-plasmic-name={"timer"}
                    data-plasmic-override={overrides.timer}
                    className={classNames("__wab_instance", sty.timer)}
                    intervalSeconds={0.1}
                    isRunning={true}
                    onTick={async () => {
                      const $steps = {};

                      $steps["updateVariable"] =
                        $state.timer < 50
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["timer"]
                                },
                                operation: 2
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, oldValue + 1);
                                return oldValue + 1;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateVariable"] != null &&
                        typeof $steps["updateVariable"] === "object" &&
                        typeof $steps["updateVariable"].then === "function"
                      ) {
                        $steps["updateVariable"] = await $steps[
                          "updateVariable"
                        ];
                      }
                    }}
                    runWhileEditing={false}
                  />

                  <ConditionGuard
                    data-plasmic-name={"checkPrintifyId"}
                    data-plasmic-override={overrides.checkPrintifyId}
                    className={classNames(
                      "__wab_instance",
                      sty.checkPrintifyId
                    )}
                    condition={(() => {
                      try {
                        return $queries.query.data[0].printify_shop_id !== null;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()}
                    onNotSatisfied={async () => {
                      const $steps = {};

                      $steps["postgresUpdateMany"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
                                opId: "0cf0f413-121f-4d64-99d4-6537d4ebc17a",
                                userArgs: {
                                  variables: [
                                    $state.printifyId,
                                    $state.printfulId
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: ["plasmic_refresh_all"],
                                roleId: "d035f350-edf5-4268-af03-4480b52522b0"
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["postgresUpdateMany"] != null &&
                        typeof $steps["postgresUpdateMany"] === "object" &&
                        typeof $steps["postgresUpdateMany"].then === "function"
                      ) {
                        $steps["postgresUpdateMany"] = await $steps[
                          "postgresUpdateMany"
                        ];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "success",
                                "Printify and Printful IDs have been updated."
                              ]
                            };
                            return $globalActions[
                              "plasmic-antd5-config-provider.showNotification"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    }}
                  />
                </React.Fragment>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "img",
    "userTable",
    "modalNewUser",
    "h3",
    "form2",
    "modalExistingUser",
    "form",
    "timer",
    "checkPrintifyId"
  ],
  pageLayout: [
    "pageLayout",
    "img",
    "userTable",
    "modalNewUser",
    "h3",
    "form2",
    "modalExistingUser",
    "form",
    "timer",
    "checkPrintifyId"
  ],
  img: ["img"],
  userTable: ["userTable"],
  modalNewUser: ["modalNewUser", "h3", "form2"],
  h3: ["h3"],
  form2: ["form2"],
  modalExistingUser: ["modalExistingUser", "form"],
  form: ["form"],
  timer: ["timer"],
  checkPrintifyId: ["checkPrintifyId"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  img: typeof PlasmicImg__;
  userTable: typeof RichTable;
  modalNewUser: typeof Modal;
  h3: "h3";
  form2: typeof FormWrapper;
  modalExistingUser: typeof Modal;
  form: typeof FormWrapper;
  timer: typeof Timer;
  checkPrintifyId: typeof ConditionGuard;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSettings__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSettings__VariantsArgs;
    args?: PlasmicSettings__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSettings__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSettings__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSettings__ArgProps,
          internalVariantPropNames: PlasmicSettings__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSettings__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSettings";
  } else {
    func.displayName = `PlasmicSettings.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={"d035f350-edf5-4268-af03-4480b52522b0"}
      appId={"2Up8DUmBB1Tx5dhznkvCW5"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "2Up8DUmBB1Tx5dhznkvCW5"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicSettings = Object.assign(
  // Top-level PlasmicSettings renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    img: makeNodeComponent("img"),
    userTable: makeNodeComponent("userTable"),
    modalNewUser: makeNodeComponent("modalNewUser"),
    h3: makeNodeComponent("h3"),
    form2: makeNodeComponent("form2"),
    modalExistingUser: makeNodeComponent("modalExistingUser"),
    form: makeNodeComponent("form"),
    timer: makeNodeComponent("timer"),
    checkPrintifyId: makeNodeComponent("checkPrintifyId"),

    // Metadata about props expected for PlasmicSettings
    internalVariantProps: PlasmicSettings__VariantProps,
    internalArgProps: PlasmicSettings__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSettings;
/* prettier-ignore-end */
