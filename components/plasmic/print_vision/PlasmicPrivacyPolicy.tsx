// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2Up8DUmBB1Tx5dhznkvCW5
// Component: BrKHErcZRT6V

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import PageLayout from "../../PageLayout"; // plasmic-import: nHDfdLqBbJ3Q/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 2Up8DUmBB1Tx5dhznkvCW5/projectcss
import sty from "./PlasmicPrivacyPolicy.module.css"; // plasmic-import: BrKHErcZRT6V/css

createPlasmicElementProxy;

export type PlasmicPrivacyPolicy__VariantMembers = {};
export type PlasmicPrivacyPolicy__VariantsArgs = {};
type VariantPropType = keyof PlasmicPrivacyPolicy__VariantsArgs;
export const PlasmicPrivacyPolicy__VariantProps = new Array<VariantPropType>();

export type PlasmicPrivacyPolicy__ArgsType = {};
type ArgPropType = keyof PlasmicPrivacyPolicy__ArgsType;
export const PlasmicPrivacyPolicy__ArgProps = new Array<ArgPropType>();

export type PlasmicPrivacyPolicy__OverridesType = {
  root?: Flex__<"div">;
  pageLayout?: Flex__<typeof PageLayout>;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultPrivacyPolicyProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPrivacyPolicy__RenderFunc(props: {
  variants: PlasmicPrivacyPolicy__VariantsArgs;
  args: PlasmicPrivacyPolicy__ArgsType;
  overrides: PlasmicPrivacyPolicy__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <PageLayout
        data-plasmic-name={"pageLayout"}
        data-plasmic-override={overrides.pageLayout}
      >
        <DataCtxReader__>
          {$ctx => (
            <Embed
              data-plasmic-name={"embedHtml"}
              data-plasmic-override={overrides.embedHtml}
              className={classNames("__wab_instance", sty.embedHtml)}
              code={
                '<!DOCTYPE html>\r\n<html lang="en">\r\n<head>\r\n    <meta charset="UTF-8">\r\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\r\n    <title>Privacy Policy</title>\r\n    <style>\r\n        body {\r\n            font-family: Arial, sans-serif;\r\n            line-height: 1.6;\r\n            margin: 20px;\r\n        }\r\n        h1, h2, h3 {\r\n            color: #333;\r\n        }\r\n        p {\r\n            margin-bottom: 10px;\r\n        }\r\n        ul {\r\n            margin-bottom: 10px;\r\n        }\r\n        em {\r\n            font-style: italic;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <h1>Privacy Policy</h1>\r\n    <p><strong>Last Updated:</strong> [Date]</p>\r\n\r\n    <p><strong>Welcome to PrintVision.Cloud</strong></p>\r\n\r\n    <p>This <em>Privacy Policy</em> explains how [Your Company Name] ("Company," "we," "our," or "us") collects, uses, and protects your personal information when you use the PrintVision.Cloud platform ("Service"). By accessing or using the Service, you agree to the terms of this <em>Privacy Policy</em>.</p>\r\n\r\n    <h2>1. Information We Collect</h2>\r\n    <p>We do not collect personal information beyond what is necessary for providing our Service. The types of personal information we may collect include:</p>\r\n    <ul>\r\n        <li><strong>Name:</strong> Your name for account identification.</li>\r\n        <li><strong>Email:</strong> Your email address for communication and account management.</li>\r\n        <li><strong>Billing Information:</strong> Some billing details necessary for processing payments.</li>\r\n    </ul>\r\n\r\n    <h2>2. How We Use Your Information</h2>\r\n    <p>We use the collected information to:</p>\r\n    <ul>\r\n        <li>Provide and maintain our Service.</li>\r\n        <li>Process transactions and manage your account.</li>\r\n        <li>Communicate with you regarding your account and the Service.</li>\r\n        <li>Improve and personalize your experience with the Service.</li>\r\n    </ul>\r\n\r\n    <h2>3. How We Protect Your Information</h2>\r\n    <p>We utilize standard database practices to ensure the privacy and security of your data. Additionally, our code is open source, allowing you to verify its usage and ensure that your data is handled appropriately.</p>\r\n\r\n    <h2>4. Sharing Your Information</h2>\r\n    <p>We do not sell, trade, or otherwise transfer your personal information to third parties. We may share your information with third-party service providers only as necessary to perform functions on our behalf, such as payment processing, and only under strict confidentiality agreements.</p>\r\n\r\n    <h2>5. Photos and User Content</h2>\r\n    <p>We do not store your photos or user content. All photos and content are deleted after being synced to your platform of choice.</p>\r\n\r\n    <h2>6. Your Rights</h2>\r\n    <p>You have the right to access, correct, or delete your personal information. To do so, please go to the settings section of your account.</p>\r\n\r\n    <h2>7. Changes to This Privacy Policy</h2>\r\n    <p>We may update this <em>Privacy Policy</em> from time to time. Any changes will be posted on this page with an updated effective date. We encourage you to review this <em>Privacy Policy</em> periodically for any changes.</p>\r\n\r\n    <h2>8. Contact Us</h2>\r\n    <p>If you have any questions about this <em>Privacy Policy</em> or our privacy practices, please contact us at:</p>\r\n    <p><strong>PrintVision DOT Cloud</strong><br>\r\n    69 Main St, Fort Lee, NJ, 07024<br>\r\n    info@kobykotiv.com<br>\r\n    (551) 333 1781</p>\r\n\r\n    <p>By using PrintVision.Cloud, you acknowledge that you have read and understand this <em>Privacy Policy</em>.</p>\r\n</body>\r\n</html>\r\n'
              }
            />
          )}
        </DataCtxReader__>
      </PageLayout>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "pageLayout", "embedHtml"],
  pageLayout: ["pageLayout", "embedHtml"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPrivacyPolicy__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPrivacyPolicy__VariantsArgs;
    args?: PlasmicPrivacyPolicy__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPrivacyPolicy__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPrivacyPolicy__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPrivacyPolicy__ArgProps,
          internalVariantPropNames: PlasmicPrivacyPolicy__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPrivacyPolicy__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPrivacyPolicy";
  } else {
    func.displayName = `PlasmicPrivacyPolicy.${nodeName}`;
  }
  return func;
}

export const PlasmicPrivacyPolicy = Object.assign(
  // Top-level PlasmicPrivacyPolicy renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicPrivacyPolicy
    internalVariantProps: PlasmicPrivacyPolicy__VariantProps,
    internalArgProps: PlasmicPrivacyPolicy__ArgProps
  }
);

export default PlasmicPrivacyPolicy;
/* prettier-ignore-end */
