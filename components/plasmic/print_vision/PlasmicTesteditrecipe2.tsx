// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2Up8DUmBB1Tx5dhznkvCW5
// Component: Lz5lrD59R3ma

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import PageLayout from "../../PageLayout"; // plasmic-import: nHDfdLqBbJ3Q/component
import { AntdTabs } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdTabItem } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/SchemaForm";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdSwitch } from "@plasmicpkgs/antd5/skinny/registerSwitch";
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 2Up8DUmBB1Tx5dhznkvCW5/projectcss
import sty from "./PlasmicTesteditrecipe2.module.css"; // plasmic-import: Lz5lrD59R3ma/css

import UpArrowSvgrepoComSvgIcon from "./icons/PlasmicIcon__UpArrowSvgrepoComSvg"; // plasmic-import: Wmz2NrCSp4o2/icon

createPlasmicElementProxy;

export type PlasmicTesteditrecipe2__VariantMembers = {};
export type PlasmicTesteditrecipe2__VariantsArgs = {};
type VariantPropType = keyof PlasmicTesteditrecipe2__VariantsArgs;
export const PlasmicTesteditrecipe2__VariantProps =
  new Array<VariantPropType>();

export type PlasmicTesteditrecipe2__ArgsType = {};
type ArgPropType = keyof PlasmicTesteditrecipe2__ArgsType;
export const PlasmicTesteditrecipe2__ArgProps = new Array<ArgPropType>();

export type PlasmicTesteditrecipe2__OverridesType = {
  root?: Flex__<"div">;
  pageLayout?: Flex__<typeof PageLayout>;
  h1?: Flex__<"h1">;
  tabs?: Flex__<typeof AntdTabs>;
  populatePrintifyProducts?: Flex__<typeof AntdButton>;
  tablePrintifyProducts?: Flex__<typeof RichTable>;
  modalEditPrintifyProduct?: Flex__<typeof AntdModal>;
  tabs2?: Flex__<typeof AntdTabs>;
  formEditPrintifyProduct?: Flex__<typeof FormWrapper>;
  select?: Flex__<typeof AntdSelect>;
  title?: Flex__<"div">;
  titleTag?: Flex__<typeof AntdInput>;
  description?: Flex__<"div">;
  descriptionTag?: Flex__<typeof AntdTextArea>;
  input3?: Flex__<typeof AntdInput>;
  link?: Flex__<"a"> & Partial<LinkProps>;
  _switch?: Flex__<typeof AntdSwitch>;
  toggleIsEnabled?: Flex__<typeof AntdButton>;
  inputPriceVariants?: Flex__<typeof AntdInput>;
  syncPrice?: Flex__<typeof AntdButton>;
  tablePrintifyVariants?: Flex__<typeof RichTable>;
  modalEditVariant?: Flex__<typeof AntdModal>;
  formEditSinglePrintifyVariant?: Flex__<typeof FormWrapper>;
  modalNewPrintifyPlaceholder?: Flex__<typeof AntdModal>;
  formNewPrintifyPlaceholder?: Flex__<typeof FormWrapper>;
  numberInput7?: Flex__<typeof AntdInputNumber>;
  numberInput8?: Flex__<typeof AntdInputNumber>;
  numberInput10?: Flex__<typeof AntdInputNumber>;
  numberInput11?: Flex__<typeof AntdInputNumber>;
  numberInput12?: Flex__<typeof AntdInputNumber>;
  numberInput9?: Flex__<typeof AntdInputNumber>;
  input4?: Flex__<typeof AntdInput>;
  select4?: Flex__<typeof AntdSelect>;
  select5?: Flex__<typeof AntdSelect>;
  modalEditPlaceholder?: Flex__<typeof AntdModal>;
  formEditPrintifyPlaceholder?: Flex__<typeof FormWrapper>;
  numberInput19?: Flex__<typeof AntdInputNumber>;
  numberInput20?: Flex__<typeof AntdInputNumber>;
  numberInput22?: Flex__<typeof AntdInputNumber>;
  numberInput23?: Flex__<typeof AntdInputNumber>;
  numberInput24?: Flex__<typeof AntdInputNumber>;
  numberInput21?: Flex__<typeof AntdInputNumber>;
  input9?: Flex__<typeof AntdInput>;
  select6?: Flex__<typeof AntdSelect>;
  select7?: Flex__<typeof AntdSelect>;
  tablePrintifyPlaceholders?: Flex__<typeof RichTable>;
  search?: Flex__<"div">;
  form2?: Flex__<typeof FormWrapper>;
  input12?: Flex__<typeof AntdInput>;
  textArea?: Flex__<typeof AntdTextArea>;
  tableHead2?: Flex__<"div">;
  tableBody?: Flex__<"div">;
  tablePrintfulProducts?: Flex__<typeof RichTable>;
  modalEditPrintfulProduct?: Flex__<typeof AntdModal>;
  tabsEditPrintfulProduct?: Flex__<typeof AntdTabs>;
  formEditPrintfulProduct?: Flex__<typeof FormWrapper>;
  numberInput13?: Flex__<typeof AntdInputNumber>;
  titleTagz?: Flex__<typeof AntdInput>;
  numberInput14?: Flex__<typeof AntdInputNumber>;
  textTagZ?: Flex__<typeof AntdTextArea>;
  input6?: Flex__<typeof AntdInput>;
  numberInput15?: Flex__<typeof AntdInputNumber>;
  numberInput16?: Flex__<typeof AntdInputNumber>;
  input7?: Flex__<typeof AntdInput>;
  select10?: Flex__<typeof AntdSelect>;
  numberInput17?: Flex__<typeof AntdInputNumber>;
  numberInput18?: Flex__<typeof AntdInputNumber>;
  input8?: Flex__<typeof AntdInput>;
  select9?: Flex__<typeof AntdSelect>;
  populatePrintfulVariants?: Flex__<typeof AntdButton>;
  switch2?: Flex__<typeof AntdSwitch>;
  inputPriceVariants2?: Flex__<typeof AntdInput>;
  printfulVariantsTable?: Flex__<typeof RichTable>;
  modal?: Flex__<typeof AntdModal>;
  form?: Flex__<typeof FormWrapper>;
  input?: Flex__<typeof AntdInput>;
  input2?: Flex__<typeof AntdInput>;
  input5?: Flex__<typeof AntdInput>;
  input10?: Flex__<typeof AntdInput>;
  select3?: Flex__<typeof AntdSelect>;
  select2?: Flex__<typeof AntdSelect>;
  select8?: Flex__<typeof AntdSelect>;
  input11?: Flex__<typeof AntdInput>;
  printfulPlaceholdersTable?: Flex__<typeof RichTable>;
  search3?: Flex__<"div">;
  form3?: Flex__<typeof FormWrapper>;
  input13?: Flex__<typeof AntdInput>;
  textArea2?: Flex__<typeof AntdTextArea>;
  tableHead3?: Flex__<"div">;
  tableBody2?: Flex__<"div">;
  svg?: Flex__<"svg">;
};

export interface DefaultTesteditrecipe2Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTesteditrecipe2__RenderFunc(props: {
  variants: PlasmicTesteditrecipe2__VariantsArgs;
  args: PlasmicTesteditrecipe2__ArgsType;
  overrides: PlasmicTesteditrecipe2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "tabs.activeKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "tablePrintifyProducts.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "tablePrintifyProducts.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "tablePrintifyProducts.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "tablePrintifyProducts.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "tablePrintfulProducts.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "tablePrintfulProducts.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "tablePrintfulProducts.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "tablePrintfulProducts.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "modalEditPrintifyProduct.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tabs2.activeKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "formEditPrintifyProduct.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "formEditPrintifyProduct",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formEditPrintifyProduct.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "formEditPrintifyProduct",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "selectedProduct",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "tablePrintifyVariants.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "tablePrintifyVariants.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "tablePrintifyVariants.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "tablePrintifyVariants.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "inputPriceVariants.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "email",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return currentUser.email;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "modalEditVariant.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "formEditSinglePrintifyVariant.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "formEditSinglePrintifyVariant",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formEditSinglePrintifyVariant.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "formEditSinglePrintifyVariant",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "selectedVariant",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "tablePrintifyPlaceholders.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "tablePrintifyPlaceholders.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "tablePrintifyPlaceholders.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "tablePrintifyPlaceholders.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "modalNewPrintifyPlaceholder.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "formNewPrintifyPlaceholder.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "formNewPrintifyPlaceholder",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formNewPrintifyPlaceholder.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "formNewPrintifyPlaceholder",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "selectedPlaceholder",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "modalEditPlaceholder.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "formEditPrintifyPlaceholder.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "formEditPrintifyPlaceholder",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formEditPrintifyPlaceholder.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "formEditPrintifyPlaceholder",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "modalEditPrintfulProduct.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "formEditPrintfulProduct.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "formEditPrintfulProduct",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formEditPrintfulProduct.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "formEditPrintfulProduct",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "tabsEditPrintfulProduct.activeKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "printfulVariantsPop",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "printfulVariantsTable.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "printfulVariantsTable.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "printfulVariantsTable.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "printfulVariantsTable.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "printfulPlaceholdersTable.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "printfulPlaceholdersTable.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "printfulPlaceholdersTable.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "printfulPlaceholdersTable.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "titleTag.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.selectedProduct.title;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "descriptionTag.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.selectedProduct.description;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "inputPriceVariants2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "numberInput7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "numberInput8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "numberInput9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "numberInput10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "numberInput11.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "numberInput12.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "select4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "numberInput13.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "titleTagz.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.selectedProduct.title;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "numberInput14.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textTagZ.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.selectedProduct.description;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "numberInput15.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "numberInput16.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "numberInput17.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "numberInput18.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "numberInput19.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "numberInput20.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "numberInput21.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "numberInput22.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "numberInput23.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "numberInput24.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "select6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "variable",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "testTest",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "_switch.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "switch2.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "printfulPlaceholderOptions",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "select3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input11.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input12.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => '""',

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "form2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "variable2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "variable3",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "variable4",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => '""'
      },
      {
        path: "search2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "select2[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "select9[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "printfulProductOptions",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "form3.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form3",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form3.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form3",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input13.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => '""',

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "textArea2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "search4",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "select10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select102",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getSupRecipeById: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "16e1b99b-caa7-4d40-852a-1338a69464f1",
        userArgs: {
          filters: [$ctx.params.id]
        },
        cacheKey: `plasmic.$.${(() => {
          try {
            return "getOne";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.16e1b99b-caa7-4d40-852a-1338a69464f1.$.`,
        invalidatedKeys: null,
        roleId: "d035f350-edf5-4268-af03-4480b52522b0"
      };
    }),
    getSupPrintifyProducts: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "96976b7c-aae9-4f5b-af98-d3e298594c95",
        userArgs: {
          filters: [parseInt($ctx.params.id), $state.search2]
        },
        cacheKey: `plasmic.$.96976b7c-aae9-4f5b-af98-d3e298594c95.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getSupPrintifyVariants: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "4dea7377-de40-40c8-ba10-c5a38ade6f03",
        userArgs: {
          filters: [parseInt($state.selectedProduct.id)]
        },
        cacheKey: `plasmic.$.4dea7377-de40-40c8-ba10-c5a38ade6f03.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    queryGetPrintifyVariantsByBlueprintandPrintProvider: usePlasmicDataOp(
      () => {
        return {
          sourceId: "fumskhn7h2QULzwkXAtFMC",
          opId: "e2812273-f8ca-486e-9604-f9b9aaf8b586",
          userArgs: {
            path: [
              $state.selectedProduct.blueprint_id ||
                $state.formEditPrintifyProduct.value.blueprint_id,
              $state.formEditPrintifyProduct.value.print_provider ||
                $state.selectedProduct.print_provider
            ]
          },
          cacheKey: `plasmic.$.e2812273-f8ca-486e-9604-f9b9aaf8b586.$.`,
          invalidatedKeys: null,
          roleId: "d035f350-edf5-4268-af03-4480b52522b0"
        };
      }
    ),
    getSupPrintifyPlaceholders: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "e183df9e-abbe-4e5f-a20d-dc0eda82bb31",
        userArgs: {
          filters: [parseInt($state.selectedProduct.id)]
        },
        cacheKey: `plasmic.$.e183df9e-abbe-4e5f-a20d-dc0eda82bb31.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getSupPrintfulProducts: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "80500ca5-ece6-429f-8c72-87c8593bee17",
        userArgs: {
          filters: [$ctx.params.id, $state.search4]
        },
        cacheKey: `plasmic.$.80500ca5-ece6-429f-8c72-87c8593bee17.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    queryGetPrintfulProducts: usePlasmicDataOp(() => {
      return {
        sourceId: "w9bT7zJHQBMsxuYyCMQHKC",
        opId: "9407482b-0886-4f23-9c50-c6be61d2e890",
        userArgs: {},
        cacheKey: `plasmic.$.9407482b-0886-4f23-9c50-c6be61d2e890.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getPrintfulProductsVariants: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "994b6bc8-cba1-4480-99d5-6a2cca13a4a1",
        userArgs: {
          filters: [parseInt($state.selectedProduct.id)]
        },
        cacheKey: `plasmic.$.994b6bc8-cba1-4480-99d5-6a2cca13a4a1.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    queryPrintifyCatalog: usePlasmicDataOp(() => {
      return {
        sourceId: "fumskhn7h2QULzwkXAtFMC",
        opId: "aebd4bc5-f7e1-4b9a-9328-33ce65899b30",
        userArgs: {},
        cacheKey: `plasmic.$.aebd4bc5-f7e1-4b9a-9328-33ce65899b30.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    queryGetPrintifyBlueprintPp: usePlasmicDataOp(() => {
      return {
        sourceId: "fumskhn7h2QULzwkXAtFMC",
        opId: "221445e4-deb2-4d71-9956-3d6e7314b8da",
        userArgs: {
          path: [$state.selectedProduct.blueprint_id]
        },
        cacheKey: `plasmic.$.221445e4-deb2-4d71-9956-3d6e7314b8da.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    queryGetPrintfulBlueprint: usePlasmicDataOp(() => {
      return {
        sourceId: "w9bT7zJHQBMsxuYyCMQHKC",
        opId: "91ced04a-655c-4a98-8520-46ce40dfb694",
        userArgs: {
          path: [parseInt($state.selectedProduct.blueprint_id)]
        },
        cacheKey: `plasmic.$.91ced04a-655c-4a98-8520-46ce40dfb694.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    queryGetSupPrintfulVariants: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "994b6bc8-cba1-4480-99d5-6a2cca13a4a1",
        userArgs: {
          filters: [parseInt($state.selectedProduct.id)]
        },
        cacheKey: `plasmic.$.994b6bc8-cba1-4480-99d5-6a2cca13a4a1.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    querySupPrintfulPlaceholders: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "e510f607-213e-4870-a06a-4e5257307898",
        userArgs: {
          filters: [parseInt($state.selectedProduct.id)]
        },
        cacheKey: `plasmic.$.e510f607-213e-4870-a06a-4e5257307898.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    queryGetPrintifyBlueprintVariantsByPp: usePlasmicDataOp(() => {
      return {
        sourceId: "fumskhn7h2QULzwkXAtFMC",
        opId: "ca591123-2c6a-42ec-ab41-c76d32d823a7",
        userArgs: {
          path: [
            $queries.getSupPrintifyProducts.data[0].blueprint_id,
            $queries.getSupPrintifyProducts.data[0].print_provider
          ]
        },
        cacheKey: `plasmic.$.ca591123-2c6a-42ec-ab41-c76d32d823a7.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    queryGetPrinfulBlueprint: usePlasmicDataOp(() => {
      return {
        sourceId: "w9bT7zJHQBMsxuYyCMQHKC",
        opId: "91ced04a-655c-4a98-8520-46ce40dfb694",
        userArgs: {
          path: [parseInt($state.selectedProduct.blueprint_id)]
        },
        cacheKey: `plasmic.$.91ced04a-655c-4a98-8520-46ce40dfb694.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    totalPrintifyPlaceholder: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "bf72220c-046c-48a8-83c7-c687e23f1955",
        userArgs: {},
        cacheKey: `plasmic.$.bf72220c-046c-48a8-83c7-c687e23f1955.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    totalPrintifyProductVariant: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "b440d1dd-ab06-4a0d-8c5e-4bd286924ed6",
        userArgs: {},
        cacheKey: `plasmic.$.b440d1dd-ab06-4a0d-8c5e-4bd286924ed6.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    totalPrintfulVariant: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "79860857-e84d-4c44-b3aa-3a6895658301",
        userArgs: {},
        cacheKey: `plasmic.$.79860857-e84d-4c44-b3aa-3a6895658301.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    totalPrintfulPlaceholder: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "599ea3e9-c8f7-46dd-aa64-5134ac931b7b",
        userArgs: {},
        cacheKey: `plasmic.$.599ea3e9-c8f7-46dd-aa64-5134ac931b7b.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getPrintifyBluePp: usePlasmicDataOp(() => {
      return {
        sourceId: "fumskhn7h2QULzwkXAtFMC",
        opId: "221445e4-deb2-4d71-9956-3d6e7314b8da",
        userArgs: {
          path: [$state.selectedProduct.blueprint_id]
        },
        cacheKey: `plasmic.$.221445e4-deb2-4d71-9956-3d6e7314b8da.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                    id={"top"}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $queries.getSupRecipeById.data[0].title;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Page title";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h1>
                  <AntdTabs
                    data-plasmic-name={"tabs"}
                    data-plasmic-override={overrides.tabs}
                    activeKey={generateStateValueProp($state, [
                      "tabs",
                      "activeKey"
                    ])}
                    animateTabBar={true}
                    animateTabContent={false}
                    animated={true}
                    centered={true}
                    className={classNames("__wab_instance", sty.tabs)}
                    defaultActiveKey={"1"}
                    items={
                      <React.Fragment>
                        <AntdTabItem
                          className={classNames(
                            "__wab_instance",
                            sty.tabItem__yE2Z
                          )}
                          key={"1"}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__truW
                              )}
                            >
                              {"Printify"}
                            </div>
                          }
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___27EwH
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___5S31H
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ewUw1
                                )}
                              >
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__bKh6J
                                  )}
                                >
                                  {"Products"}
                                </h2>
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__mlfzu
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.selectedProduct.id;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Products";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </h2>
                              </div>
                              {(() => {
                                try {
                                  return (
                                    $queries.getSupPrintifyProducts.data
                                      .length === 0
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <AntdButton
                                  data-plasmic-name={"populatePrintifyProducts"}
                                  data-plasmic-override={
                                    overrides.populatePrintifyProducts
                                  }
                                  className={classNames(
                                    "__wab_instance",
                                    sty.populatePrintifyProducts
                                  )}
                                  onClick={async () => {
                                    const $steps = {};

                                    $steps["postgresCreateMany"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            dataOp: {
                                              sourceId:
                                                "83X9ZdYzYUYJtgqe5fwXeX",
                                              opId: "3a96e0d3-132d-43b5-90c9-879207d10d37",
                                              userArgs: {
                                                variables: [
                                                  (() => {
                                                    return $queries.queryPrintifyCatalog.data.response
                                                      .filter(i =>
                                                        $queries.getSupRecipeById.data[0].printify_blueprints.includes(
                                                          i.id
                                                        )
                                                      )
                                                      .map(i => ({
                                                        blueprint_id: i.id,
                                                        description:
                                                          i.description,
                                                        title: i.title,
                                                        tags: "",
                                                        email: $state.email,
                                                        recipe_id: parseInt(
                                                          $ctx.params.id
                                                        ),
                                                        print_provider: null
                                                      }));
                                                  })()
                                                ]
                                              },
                                              cacheKey: null,
                                              invalidatedKeys: [
                                                "plasmic_refresh_all"
                                              ],
                                              roleId:
                                                "d035f350-edf5-4268-af03-4480b52522b0"
                                            }
                                          };
                                          return (async ({
                                            dataOp,
                                            continueOnError
                                          }) => {
                                            try {
                                              const response =
                                                await executePlasmicDataOp(
                                                  dataOp,
                                                  {
                                                    userAuthToken:
                                                      dataSourcesCtx?.userAuthToken,
                                                    user: dataSourcesCtx?.user
                                                  }
                                                );
                                              await plasmicInvalidate(
                                                dataOp.invalidatedKeys
                                              );
                                              return response;
                                            } catch (e) {
                                              if (!continueOnError) {
                                                throw e;
                                              }
                                              return e;
                                            }
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["postgresCreateMany"] != null &&
                                      typeof $steps["postgresCreateMany"] ===
                                        "object" &&
                                      typeof $steps["postgresCreateMany"]
                                        .then === "function"
                                    ) {
                                      $steps["postgresCreateMany"] =
                                        await $steps["postgresCreateMany"];
                                    }
                                  }}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__fye0Y
                                    )}
                                  >
                                    {"Populate"}
                                  </div>
                                </AntdButton>
                              ) : null}
                            </div>
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.tablePrintifyProducts
                                ),
                                data: (() => {
                                  try {
                                    return $queries.getSupPrintifyProducts;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                fields: (() => {
                                  const __composite = [
                                    { key: "id", fieldId: "id" },
                                    { key: "title", fieldId: "title" },
                                    {
                                      key: "print_provider",
                                      fieldId: "print_provider"
                                    },
                                    {
                                      key: "owner",
                                      fieldId: "owner",
                                      isHidden: null
                                    },
                                    {
                                      key: "variant_ids",
                                      fieldId: "variant_ids",
                                      isHidden: null
                                    },
                                    {
                                      key: "description",
                                      fieldId: "description"
                                    },
                                    {
                                      key: "placeholder_ids",
                                      fieldId: "placeholder_ids",
                                      isHidden: null
                                    },
                                    {
                                      key: "recipe_id",
                                      fieldId: "recipe_id",
                                      isHidden: null
                                    },
                                    { key: "tags", fieldId: "tags" },
                                    {
                                      key: "sync_product_id",
                                      fieldId: "sync_product_id",
                                      isHidden: null
                                    },
                                    {
                                      key: "created_at",
                                      fieldId: "created_at",
                                      isHidden: null
                                    },
                                    {
                                      key: "blueprint_id",
                                      fieldId: "blueprint_id",
                                      isHidden: null
                                    },
                                    {
                                      key: "email",
                                      fieldId: "email",
                                      isHidden: null
                                    }
                                  ];
                                  __composite["3"]["isHidden"] = true;
                                  __composite["4"]["isHidden"] = true;
                                  __composite["6"]["isHidden"] = true;
                                  __composite["7"]["isHidden"] = true;
                                  __composite["9"]["isHidden"] = true;
                                  __composite["10"]["isHidden"] = true;
                                  __composite["11"]["isHidden"] = false;
                                  __composite["12"]["isHidden"] = true;
                                  return __composite;
                                })(),

                                hideColumnPicker: true,
                                hideExports: true,
                                hideSearch: false,
                                onRowSelectionChanged: async (
                                  ...eventArgs: any
                                ) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "selectedRowKey",
                                    ["tablePrintifyProducts", "selectedRowKey"],
                                    RichTable_Helpers
                                  ).apply(null, eventArgs);
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "selectedRow",
                                    ["tablePrintifyProducts", "selectedRow"],
                                    RichTable_Helpers
                                  ).apply(null, eventArgs);
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "selectedRows",
                                    ["tablePrintifyProducts", "selectedRows"],
                                    RichTable_Helpers
                                  ).apply(null, eventArgs);
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "selectedRowKeys",
                                    [
                                      "tablePrintifyProducts",
                                      "selectedRowKeys"
                                    ],
                                    RichTable_Helpers
                                  ).apply(null, eventArgs);
                                },
                                pageSize: 20,
                                pagination: true,
                                rowActions: (() => {
                                  const __composite = [
                                    {
                                      type: "item",
                                      onClick: null,
                                      label: null
                                    },
                                    { type: "item", label: null, onClick: null }
                                  ];
                                  __composite["0"]["onClick"] = async (
                                    rowKey,
                                    row
                                  ) => {
                                    const $steps = {};

                                    $steps["updateSelectedProduct"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["selectedProduct"]
                                            },
                                            operation: 0,
                                            value: row
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateSelectedProduct"] != null &&
                                      typeof $steps["updateSelectedProduct"] ===
                                        "object" &&
                                      typeof $steps["updateSelectedProduct"]
                                        .then === "function"
                                    ) {
                                      $steps["updateSelectedProduct"] =
                                        await $steps["updateSelectedProduct"];
                                    }

                                    $steps[
                                      "runActionOnFormEditPrintifyProduct"
                                    ] = true
                                      ? (() => {
                                          const actionArgs = {
                                            tplRef: "formEditPrintifyProduct",
                                            action: "resetFields"
                                          };
                                          return (({
                                            tplRef,
                                            action,
                                            args
                                          }) => {
                                            return $refs?.[tplRef]?.[action]?.(
                                              ...(args ?? [])
                                            );
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps[
                                        "runActionOnFormEditPrintifyProduct"
                                      ] != null &&
                                      typeof $steps[
                                        "runActionOnFormEditPrintifyProduct"
                                      ] === "object" &&
                                      typeof $steps[
                                        "runActionOnFormEditPrintifyProduct"
                                      ].then === "function"
                                    ) {
                                      $steps[
                                        "runActionOnFormEditPrintifyProduct"
                                      ] = await $steps[
                                        "runActionOnFormEditPrintifyProduct"
                                      ];
                                    }

                                    $steps["updateTabs2ActiveKey"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "tabs2",
                                                "activeKey"
                                              ]
                                            },
                                            operation: 0,
                                            value: "1"
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateTabs2ActiveKey"] != null &&
                                      typeof $steps["updateTabs2ActiveKey"] ===
                                        "object" &&
                                      typeof $steps["updateTabs2ActiveKey"]
                                        .then === "function"
                                    ) {
                                      $steps["updateTabs2ActiveKey"] =
                                        await $steps["updateTabs2ActiveKey"];
                                    }

                                    $steps[
                                      "updateModalEditPrintifyProductOpen"
                                    ] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "modalEditPrintifyProduct",
                                                "open"
                                              ]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps[
                                        "updateModalEditPrintifyProductOpen"
                                      ] != null &&
                                      typeof $steps[
                                        "updateModalEditPrintifyProductOpen"
                                      ] === "object" &&
                                      typeof $steps[
                                        "updateModalEditPrintifyProductOpen"
                                      ].then === "function"
                                    ) {
                                      $steps[
                                        "updateModalEditPrintifyProductOpen"
                                      ] = await $steps[
                                        "updateModalEditPrintifyProductOpen"
                                      ];
                                    }
                                  };
                                  __composite["0"]["label"] = "Edit";
                                  __composite["1"]["label"] = "Delete";
                                  __composite["1"]["onClick"] = async (
                                    rowKey,
                                    row
                                  ) => {
                                    const $steps = {};

                                    $steps["postgresDeleteMany"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            dataOp: {
                                              sourceId:
                                                "83X9ZdYzYUYJtgqe5fwXeX",
                                              opId: "1e5a66d3-7935-4543-98e5-903c820c380f",
                                              userArgs: {
                                                conditions: [row.id]
                                              },
                                              cacheKey: null,
                                              invalidatedKeys: [],
                                              roleId:
                                                "d035f350-edf5-4268-af03-4480b52522b0"
                                            }
                                          };
                                          return (async ({
                                            dataOp,
                                            continueOnError
                                          }) => {
                                            try {
                                              const response =
                                                await executePlasmicDataOp(
                                                  dataOp,
                                                  {
                                                    userAuthToken:
                                                      dataSourcesCtx?.userAuthToken,
                                                    user: dataSourcesCtx?.user
                                                  }
                                                );
                                              await plasmicInvalidate(
                                                dataOp.invalidatedKeys
                                              );
                                              return response;
                                            } catch (e) {
                                              if (!continueOnError) {
                                                throw e;
                                              }
                                              return e;
                                            }
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["postgresDeleteMany"] != null &&
                                      typeof $steps["postgresDeleteMany"] ===
                                        "object" &&
                                      typeof $steps["postgresDeleteMany"]
                                        .then === "function"
                                    ) {
                                      $steps["postgresDeleteMany"] =
                                        await $steps["postgresDeleteMany"];
                                    }

                                    $steps["refreshData"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            queryInvalidation: [
                                              "plasmic_refresh_all"
                                            ]
                                          };
                                          return (async ({
                                            queryInvalidation
                                          }) => {
                                            if (!queryInvalidation) {
                                              return;
                                            }
                                            await plasmicInvalidate(
                                              queryInvalidation
                                            );
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["refreshData"] != null &&
                                      typeof $steps["refreshData"] ===
                                        "object" &&
                                      typeof $steps["refreshData"].then ===
                                        "function"
                                    ) {
                                      $steps["refreshData"] = await $steps[
                                        "refreshData"
                                      ];
                                    }

                                    $steps["invokeGlobalAction"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            args: ["warning", "Row Deleted"]
                                          };
                                          return $globalActions[
                                            "plasmic-antd5-config-provider.showNotification"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["invokeGlobalAction"] != null &&
                                      typeof $steps["invokeGlobalAction"] ===
                                        "object" &&
                                      typeof $steps["invokeGlobalAction"]
                                        .then === "function"
                                    ) {
                                      $steps["invokeGlobalAction"] =
                                        await $steps["invokeGlobalAction"];
                                    }
                                  };
                                  return __composite;
                                })(),

                                scopeClassName:
                                  sty["tablePrintifyProducts__instance"],
                                selectedRowKey: generateStateValueProp($state, [
                                  "tablePrintifyProducts",
                                  "selectedRowKey"
                                ]),
                                selectedRowKeys: generateStateValueProp(
                                  $state,
                                  ["tablePrintifyProducts", "selectedRowKeys"]
                                ),
                                themeResetClassName: classNames(
                                  projectcss.root_reset,
                                  projectcss.root_reset_tags,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "selectedRowKey",
                                    plasmicStateName:
                                      "tablePrintifyProducts.selectedRowKey"
                                  },
                                  {
                                    name: "selectedRow",
                                    plasmicStateName:
                                      "tablePrintifyProducts.selectedRow"
                                  },
                                  {
                                    name: "selectedRows",
                                    plasmicStateName:
                                      "tablePrintifyProducts.selectedRows"
                                  },
                                  {
                                    name: "selectedRowKeys",
                                    plasmicStateName:
                                      "tablePrintifyProducts.selectedRowKeys"
                                  }
                                ],
                                [],
                                RichTable_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <RichTable
                                  data-plasmic-name={"tablePrintifyProducts"}
                                  data-plasmic-override={
                                    overrides.tablePrintifyProducts
                                  }
                                  {...child$Props}
                                />
                              );
                            })()}
                            <AntdModal
                              data-plasmic-name={"modalEditPrintifyProduct"}
                              data-plasmic-override={
                                overrides.modalEditPrintifyProduct
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.modalEditPrintifyProduct
                              )}
                              defaultStylesClassName={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                              hideFooter={true}
                              modalScopeClassName={
                                sty["modalEditPrintifyProduct__modal"]
                              }
                              onOpenChange={generateStateOnChangeProp($state, [
                                "modalEditPrintifyProduct",
                                "open"
                              ])}
                              open={generateStateValueProp($state, [
                                "modalEditPrintifyProduct",
                                "open"
                              ])}
                              title={
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $state.selectedProduct.title;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Modal title";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              }
                              trigger={null}
                              width={"90%"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__slLSc
                                )}
                              >
                                <AntdTabs
                                  data-plasmic-name={"tabs2"}
                                  data-plasmic-override={overrides.tabs2}
                                  activeKey={generateStateValueProp($state, [
                                    "tabs2",
                                    "activeKey"
                                  ])}
                                  animateTabBar={true}
                                  animateTabContent={false}
                                  animated={true}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.tabs2
                                  )}
                                  defaultActiveKey={"1"}
                                  items={
                                    <React.Fragment>
                                      <AntdTabItem
                                        className={classNames(
                                          "__wab_instance",
                                          sty.tabItem___5LaW
                                        )}
                                        key={"1"}
                                        label={
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__dinEh
                                            )}
                                          >
                                            {"Product Info"}
                                          </div>
                                        }
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__zLnlx
                                          )}
                                        >
                                          {"First Children"}
                                        </div>
                                        {(() => {
                                          const child$Props = {
                                            className: classNames(
                                              "__wab_instance",
                                              sty.formEditPrintifyProduct
                                            ),
                                            extendedOnValuesChange:
                                              generateStateOnChangePropForCodeComponents(
                                                $state,
                                                "value",
                                                [
                                                  "formEditPrintifyProduct",
                                                  "value"
                                                ],
                                                FormWrapper_Helpers
                                              ),
                                            formItems: [
                                              {
                                                label: "Name",
                                                name: "name",
                                                inputType: "Text"
                                              },
                                              {
                                                label: "Message",
                                                name: "message",
                                                inputType: "Text Area"
                                              }
                                            ],
                                            labelCol: {
                                              span: 8,
                                              horizontalOnly: true
                                            },
                                            layout: "vertical",
                                            mode: "advanced",
                                            onFinish: async values => {
                                              const $steps = {};

                                              $steps["defaultSubmit"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      dataOp: {
                                                        sourceId:
                                                          "83X9ZdYzYUYJtgqe5fwXeX",
                                                        opId: "4fdbb06b-7b96-4958-bfc0-d043ad8f9e2e",
                                                        userArgs: {
                                                          keys: [
                                                            $state
                                                              .selectedProduct
                                                              .id
                                                          ],
                                                          variables: [
                                                            $state
                                                              .formEditPrintifyProduct
                                                              .value
                                                              .blueprint_id,
                                                            $state
                                                              .descriptionTag
                                                              .value,
                                                            $state.email,
                                                            $state
                                                              .formEditPrintifyProduct
                                                              .value
                                                              .print_provider,
                                                            $state.titleTag.value
                                                              .charAt(0)
                                                              .toUpperCase() +
                                                              $state.titleTag.value.slice(
                                                                1
                                                              ),
                                                            $state
                                                              .formEditPrintifyProduct
                                                              .value.tags
                                                          ]
                                                        },
                                                        cacheKey: null,
                                                        invalidatedKeys: [
                                                          "96976b7c-aae9-4f5b-af98-d3e298594c95",
                                                          "fabbf223-5116-4499-a1f9-c10e58a5420f",
                                                          "221445e4-deb2-4d71-9956-3d6e7314b8da",
                                                          "e2812273-f8ca-486e-9604-f9b9aaf8b586"
                                                        ],
                                                        roleId:
                                                          "d035f350-edf5-4268-af03-4480b52522b0"
                                                      }
                                                    };
                                                    return (async ({
                                                      dataOp,
                                                      continueOnError
                                                    }) => {
                                                      try {
                                                        const response =
                                                          await executePlasmicDataOp(
                                                            dataOp,
                                                            {
                                                              userAuthToken:
                                                                dataSourcesCtx?.userAuthToken,
                                                              user: dataSourcesCtx?.user
                                                            }
                                                          );
                                                        await plasmicInvalidate(
                                                          dataOp.invalidatedKeys
                                                        );
                                                        return response;
                                                      } catch (e) {
                                                        if (!continueOnError) {
                                                          throw e;
                                                        }
                                                        return e;
                                                      }
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["defaultSubmit"] !=
                                                  null &&
                                                typeof $steps[
                                                  "defaultSubmit"
                                                ] === "object" &&
                                                typeof $steps["defaultSubmit"]
                                                  .then === "function"
                                              ) {
                                                $steps["defaultSubmit"] =
                                                  await $steps["defaultSubmit"];
                                              }

                                              $steps["invokeGlobalAction"] =
                                                true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        args: [
                                                          "success",
                                                          "Product Info Updated"
                                                        ]
                                                      };
                                                      return $globalActions[
                                                        "plasmic-antd5-config-provider.showNotification"
                                                      ]?.apply(null, [
                                                        ...actionArgs.args
                                                      ]);
                                                    })()
                                                  : undefined;
                                              if (
                                                $steps["invokeGlobalAction"] !=
                                                  null &&
                                                typeof $steps[
                                                  "invokeGlobalAction"
                                                ] === "object" &&
                                                typeof $steps[
                                                  "invokeGlobalAction"
                                                ].then === "function"
                                              ) {
                                                $steps["invokeGlobalAction"] =
                                                  await $steps[
                                                    "invokeGlobalAction"
                                                  ];
                                              }
                                            },
                                            onIsSubmittingChange:
                                              generateStateOnChangePropForCodeComponents(
                                                $state,
                                                "isSubmitting",
                                                [
                                                  "formEditPrintifyProduct",
                                                  "isSubmitting"
                                                ],
                                                FormWrapper_Helpers
                                              ),
                                            ref: ref => {
                                              $refs["formEditPrintifyProduct"] =
                                                ref;
                                            },
                                            submitSlot: null,
                                            wrapperCol: {
                                              span: 16,
                                              horizontalOnly: true
                                            }
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "value",
                                                plasmicStateName:
                                                  "formEditPrintifyProduct.value"
                                              },
                                              {
                                                name: "isSubmitting",
                                                plasmicStateName:
                                                  "formEditPrintifyProduct.isSubmitting"
                                              }
                                            ],
                                            [],
                                            FormWrapper_Helpers ?? {},
                                            child$Props
                                          );

                                          return (
                                            <FormWrapper
                                              data-plasmic-name={
                                                "formEditPrintifyProduct"
                                              }
                                              data-plasmic-override={
                                                overrides.formEditPrintifyProduct
                                              }
                                              {...child$Props}
                                            >
                                              <FormItemWrapper
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.formField__thOx5
                                                )}
                                                hidden={false}
                                                initialValue={(() => {
                                                  try {
                                                    return $state
                                                      .selectedProduct
                                                      .print_provider;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return undefined;
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                                label={"print_provider"}
                                                name={"print_provider"}
                                                preserve={false}
                                                rules={[
                                                  { ruleType: "required" }
                                                ]}
                                                shouldUpdate={true}
                                              >
                                                <AntdSelect
                                                  data-plasmic-name={"select"}
                                                  data-plasmic-override={
                                                    overrides.select
                                                  }
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.select
                                                  )}
                                                  defaultStylesClassName={classNames(
                                                    projectcss.root_reset,
                                                    projectcss.plasmic_default_styles,
                                                    projectcss.plasmic_mixins,
                                                    projectcss.plasmic_tokens,
                                                    plasmic_antd_5_hostless_css.plasmic_tokens,
                                                    plasmic_plasmic_rich_components_css.plasmic_tokens
                                                  )}
                                                  dropdownMatchSelectWidth={
                                                    false
                                                  }
                                                  onChange={generateStateOnChangeProp(
                                                    $state,
                                                    ["select", "value"]
                                                  )}
                                                  options={(() => {
                                                    try {
                                                      return $queries.queryGetPrintifyBlueprintPp?.data.response
                                                        .sort((a, b) =>
                                                          a.title.localeCompare(
                                                            b.title
                                                          )
                                                        )
                                                        .map(i => ({
                                                          label:
                                                            i.title +
                                                            " : " +
                                                            i.id,
                                                          value: i.id
                                                        }));
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  placeholder={"Select..."}
                                                  popupScopeClassName={
                                                    sty["select__popup"]
                                                  }
                                                  value={generateStateValueProp(
                                                    $state,
                                                    ["select", "value"]
                                                  )}
                                                />
                                              </FormItemWrapper>
                                              <Stack__
                                                as={"div"}
                                                data-plasmic-name={"title"}
                                                data-plasmic-override={
                                                  overrides.title
                                                }
                                                hasGap={true}
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.title
                                                )}
                                              >
                                                <Stack__
                                                  as={"div"}
                                                  hasGap={true}
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.freeBox__ylw2B
                                                  )}
                                                >
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__dXof1
                                                    )}
                                                  >
                                                    {"title"}
                                                  </div>
                                                  {(() => {
                                                    try {
                                                      return $state.titleTag
                                                        .value === ""
                                                        ? true
                                                        : undefined;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return true;
                                                      }
                                                      throw e;
                                                    }
                                                  })() ? (
                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        projectcss.__wab_text,
                                                        sty.text__nIq9Z
                                                      )}
                                                    >
                                                      {"*Title is required"}
                                                    </div>
                                                  ) : null}
                                                </Stack__>
                                                {(() => {
                                                  const child$Props = {
                                                    className: classNames(
                                                      "__wab_instance",
                                                      sty.titleTag
                                                    ),
                                                    onChange:
                                                      generateStateOnChangePropForCodeComponents(
                                                        $state,
                                                        "value",
                                                        ["titleTag", "value"],
                                                        AntdInput_Helpers
                                                      ),
                                                    value:
                                                      generateStateValueProp(
                                                        $state,
                                                        ["titleTag", "value"]
                                                      )
                                                  };
                                                  initializeCodeComponentStates(
                                                    $state,
                                                    [
                                                      {
                                                        name: "value",
                                                        plasmicStateName:
                                                          "titleTag.value"
                                                      }
                                                    ],
                                                    [],
                                                    AntdInput_Helpers ?? {},
                                                    child$Props
                                                  );

                                                  return (
                                                    <AntdInput
                                                      data-plasmic-name={
                                                        "titleTag"
                                                      }
                                                      data-plasmic-override={
                                                        overrides.titleTag
                                                      }
                                                      {...child$Props}
                                                    />
                                                  );
                                                })()}
                                              </Stack__>
                                              <Stack__
                                                as={"div"}
                                                data-plasmic-name={
                                                  "description"
                                                }
                                                data-plasmic-override={
                                                  overrides.description
                                                }
                                                hasGap={true}
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.description
                                                )}
                                              >
                                                <Stack__
                                                  as={"div"}
                                                  hasGap={true}
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.freeBox__inzGr
                                                  )}
                                                >
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__y4Cdr
                                                    )}
                                                  >
                                                    {"description"}
                                                  </div>
                                                  {(() => {
                                                    try {
                                                      return $state
                                                        .descriptionTag
                                                        .value === ""
                                                        ? true
                                                        : undefined;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return true;
                                                      }
                                                      throw e;
                                                    }
                                                  })() ? (
                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        projectcss.__wab_text,
                                                        sty.text__ehKlt
                                                      )}
                                                    >
                                                      {
                                                        "*Description is required"
                                                      }
                                                    </div>
                                                  ) : null}
                                                </Stack__>
                                                {(() => {
                                                  const child$Props = {
                                                    autoSize: true,
                                                    className: classNames(
                                                      "__wab_instance",
                                                      sty.descriptionTag
                                                    ),
                                                    onChange:
                                                      generateStateOnChangePropForCodeComponents(
                                                        $state,
                                                        "value",
                                                        [
                                                          "descriptionTag",
                                                          "value"
                                                        ],
                                                        AntdTextArea_Helpers
                                                      ),
                                                    value:
                                                      generateStateValueProp(
                                                        $state,
                                                        [
                                                          "descriptionTag",
                                                          "value"
                                                        ]
                                                      )
                                                  };
                                                  initializeCodeComponentStates(
                                                    $state,
                                                    [
                                                      {
                                                        name: "value",
                                                        plasmicStateName:
                                                          "descriptionTag.value"
                                                      }
                                                    ],
                                                    [],
                                                    AntdTextArea_Helpers ?? {},
                                                    child$Props
                                                  );

                                                  return (
                                                    <AntdTextArea
                                                      data-plasmic-name={
                                                        "descriptionTag"
                                                      }
                                                      data-plasmic-override={
                                                        overrides.descriptionTag
                                                      }
                                                      {...child$Props}
                                                    />
                                                  );
                                                })()}
                                              </Stack__>
                                              <FormItemWrapper
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.formField___3Cxe
                                                )}
                                                initialValue={(() => {
                                                  try {
                                                    return $state.selectedProduct.tags.toString();
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return undefined;
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                                label={"tags"}
                                                name={"tags"}
                                                preserve={false}
                                                shouldUpdate={true}
                                              >
                                                {(() => {
                                                  const child$Props = {
                                                    className: classNames(
                                                      "__wab_instance",
                                                      sty.input3
                                                    ),
                                                    onChange:
                                                      generateStateOnChangePropForCodeComponents(
                                                        $state,
                                                        "value",
                                                        ["input3", "value"],
                                                        AntdInput_Helpers
                                                      ),
                                                    value:
                                                      generateStateValueProp(
                                                        $state,
                                                        ["input3", "value"]
                                                      )
                                                  };
                                                  initializeCodeComponentStates(
                                                    $state,
                                                    [
                                                      {
                                                        name: "value",
                                                        plasmicStateName:
                                                          "input3.value"
                                                      }
                                                    ],
                                                    [],
                                                    AntdInput_Helpers ?? {},
                                                    child$Props
                                                  );

                                                  return (
                                                    <AntdInput
                                                      data-plasmic-name={
                                                        "input3"
                                                      }
                                                      data-plasmic-override={
                                                        overrides.input3
                                                      }
                                                      {...child$Props}
                                                    />
                                                  );
                                                })()}
                                              </FormItemWrapper>
                                              <AntdButton
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button__e5CQ
                                                )}
                                                disabled={(() => {
                                                  try {
                                                    return $state.titleTag
                                                      .value === "" ||
                                                      $state.descriptionTag
                                                        .value === ""
                                                      ? true
                                                      : undefined;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return undefined;
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                                submitsForm={true}
                                                type={"primary"}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__xoAAw
                                                  )}
                                                >
                                                  {"Submit"}
                                                </div>
                                              </AntdButton>
                                            </FormWrapper>
                                          );
                                        })()}
                                      </AntdTabItem>
                                      <AntdTabItem
                                        className={classNames(
                                          "__wab_instance",
                                          sty.tabItem__pQbSj
                                        )}
                                        key={"2"}
                                        label={
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__lyiTf
                                            )}
                                          >
                                            {"Variants"}
                                          </div>
                                        }
                                      >
                                        {(() => {
                                          try {
                                            return true;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return false;
                                            }
                                            throw e;
                                          }
                                        })() ? (
                                          <Stack__
                                            as={"div"}
                                            hasGap={true}
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__tgPaZ
                                            )}
                                          >
                                            {(() => {
                                              try {
                                                return (
                                                  $queries
                                                    .queryGetPrintifyVariantsByBlueprintandPrintProvider
                                                    ?.error !== undefined
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return false;
                                                }
                                                throw e;
                                              }
                                            })() ? (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__ywtNm
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return (
                                                        $queries
                                                          .queryGetPrintifyVariantsByBlueprintandPrintProvider
                                                          ?.error.error
                                                          .statusCode +
                                                        "\n" +
                                                        $queries
                                                          .queryGetPrintifyVariantsByBlueprintandPrintProvider
                                                          ?.error.error.details
                                                          .error +
                                                        "\n\n(Check your Product Config) or "
                                                      );
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                            ) : null}
                                            {(() => {
                                              try {
                                                return (
                                                  $queries
                                                    .getSupPrintifyVariants.data
                                                    .length === 0
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return true;
                                                }
                                                throw e;
                                              }
                                            })() ? (
                                              <PlasmicLink__
                                                data-plasmic-name={"link"}
                                                data-plasmic-override={
                                                  overrides.link
                                                }
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.a,
                                                  projectcss.__wab_text,
                                                  sty.link
                                                )}
                                                component={Link}
                                                onClick={async event => {
                                                  const $steps = {};

                                                  $steps["refreshData"] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          queryInvalidation: [
                                                            "e2812273-f8ca-486e-9604-f9b9aaf8b586",
                                                            "ca591123-2c6a-42ec-ab41-c76d32d823a7",
                                                            "e2812273-f8ca-486e-9604-f9b9aaf8b586",
                                                            "ca591123-2c6a-42ec-ab41-c76d32d823a7"
                                                          ]
                                                        };
                                                        return (async ({
                                                          queryInvalidation
                                                        }) => {
                                                          if (
                                                            !queryInvalidation
                                                          ) {
                                                            return;
                                                          }
                                                          await plasmicInvalidate(
                                                            queryInvalidation
                                                          );
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps["refreshData"] !=
                                                      null &&
                                                    typeof $steps[
                                                      "refreshData"
                                                    ] === "object" &&
                                                    typeof $steps["refreshData"]
                                                      .then === "function"
                                                  ) {
                                                    $steps["refreshData"] =
                                                      await $steps[
                                                        "refreshData"
                                                      ];
                                                  }
                                                }}
                                                platform={"nextjs"}
                                              >
                                                {"Refresh"}
                                              </PlasmicLink__>
                                            ) : null}
                                            {(() => {
                                              try {
                                                return (
                                                  $queries
                                                    .getSupPrintifyVariants.data
                                                    .length === 0
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return true;
                                                }
                                                throw e;
                                              }
                                            })() ? (
                                              <AntdButton
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button__z2Zt8
                                                )}
                                                onClick={async () => {
                                                  const $steps = {};

                                                  $steps["updateEmail"] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "email"
                                                            ]
                                                          },
                                                          operation: 0,
                                                          value:
                                                            currentUser.email
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps["updateEmail"] !=
                                                      null &&
                                                    typeof $steps[
                                                      "updateEmail"
                                                    ] === "object" &&
                                                    typeof $steps["updateEmail"]
                                                      .then === "function"
                                                  ) {
                                                    $steps["updateEmail"] =
                                                      await $steps[
                                                        "updateEmail"
                                                      ];
                                                  }

                                                  $steps["postgresCreateMany"] =
                                                    true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            dataOp: {
                                                              sourceId:
                                                                "83X9ZdYzYUYJtgqe5fwXeX",
                                                              opId: "051f937c-fce6-405e-bc62-286c8c606fe4",
                                                              userArgs: {
                                                                variables: [
                                                                  $queries.queryGetPrintifyVariantsByBlueprintandPrintProvider.data.response.variants.map(
                                                                    i => ({
                                                                      variant_id:
                                                                        i.id,
                                                                      email:
                                                                        $state.email,
                                                                      is_enabled:
                                                                        true,
                                                                      price: 0,
                                                                      printify_product_id:
                                                                        parseInt(
                                                                          $state
                                                                            .selectedProduct
                                                                            .id
                                                                        ),
                                                                      title:
                                                                        i.title,
                                                                      identifier:
                                                                        Math.floor(
                                                                          1000000 +
                                                                            Math.random() *
                                                                              9000000
                                                                        )
                                                                    })
                                                                  )
                                                                ]
                                                              },
                                                              cacheKey: null,
                                                              invalidatedKeys: [
                                                                "4dea7377-de40-40c8-ba10-c5a38ade6f03"
                                                              ],
                                                              roleId: null
                                                            }
                                                          };
                                                          return (async ({
                                                            dataOp,
                                                            continueOnError
                                                          }) => {
                                                            try {
                                                              const response =
                                                                await executePlasmicDataOp(
                                                                  dataOp,
                                                                  {
                                                                    userAuthToken:
                                                                      dataSourcesCtx?.userAuthToken,
                                                                    user: dataSourcesCtx?.user
                                                                  }
                                                                );
                                                              await plasmicInvalidate(
                                                                dataOp.invalidatedKeys
                                                              );
                                                              return response;
                                                            } catch (e) {
                                                              if (
                                                                !continueOnError
                                                              ) {
                                                                throw e;
                                                              }
                                                              return e;
                                                            }
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps[
                                                      "postgresCreateMany"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "postgresCreateMany"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "postgresCreateMany"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "postgresCreateMany"
                                                    ] = await $steps[
                                                      "postgresCreateMany"
                                                    ];
                                                  }

                                                  $steps["refreshData"] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          queryInvalidation: [
                                                            "plasmic_refresh_all"
                                                          ]
                                                        };
                                                        return (async ({
                                                          queryInvalidation
                                                        }) => {
                                                          if (
                                                            !queryInvalidation
                                                          ) {
                                                            return;
                                                          }
                                                          await plasmicInvalidate(
                                                            queryInvalidation
                                                          );
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps["refreshData"] !=
                                                      null &&
                                                    typeof $steps[
                                                      "refreshData"
                                                    ] === "object" &&
                                                    typeof $steps["refreshData"]
                                                      .then === "function"
                                                  ) {
                                                    $steps["refreshData"] =
                                                      await $steps[
                                                        "refreshData"
                                                      ];
                                                  }
                                                }}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__yFlEn
                                                  )}
                                                >
                                                  {"Populate"}
                                                </div>
                                              </AntdButton>
                                            ) : null}
                                          </Stack__>
                                        ) : null}
                                        {(() => {
                                          try {
                                            return !$queries
                                              .queryGetPrintifyVariantsByBlueprintandPrintProvider
                                              ?.error;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return true;
                                            }
                                            throw e;
                                          }
                                        })() ? (
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__n6OZt
                                            )}
                                          >
                                            {(() => {
                                              try {
                                                return (
                                                  $queries
                                                    .getSupPrintifyVariants.data
                                                    .length ===
                                                  $queries
                                                    .queryGetPrintifyVariantsByBlueprintandPrintProvider
                                                    .data.response.variants
                                                    .length
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return true;
                                                }
                                                throw e;
                                              }
                                            })() ? (
                                              <Stack__
                                                as={"div"}
                                                hasGap={true}
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__j9Hc3
                                                )}
                                              >
                                                <Stack__
                                                  as={"div"}
                                                  hasGap={true}
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.freeBox___9GD5N
                                                  )}
                                                >
                                                  <AntdSwitch
                                                    data-plasmic-name={
                                                      "_switch"
                                                    }
                                                    data-plasmic-override={
                                                      overrides._switch
                                                    }
                                                    checked={generateStateValueProp(
                                                      $state,
                                                      ["_switch", "checked"]
                                                    )}
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty._switch
                                                    )}
                                                    onChange={generateStateOnChangeProp(
                                                      $state,
                                                      ["_switch", "checked"]
                                                    )}
                                                  />

                                                  <AntdButton
                                                    data-plasmic-name={
                                                      "toggleIsEnabled"
                                                    }
                                                    data-plasmic-override={
                                                      overrides.toggleIsEnabled
                                                    }
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.toggleIsEnabled
                                                    )}
                                                    onClick={async () => {
                                                      const $steps = {};

                                                      $steps[
                                                        "postgresUpdateMany"
                                                      ] = true
                                                        ? (() => {
                                                            const actionArgs = {
                                                              dataOp: {
                                                                sourceId:
                                                                  "83X9ZdYzYUYJtgqe5fwXeX",
                                                                opId: "b287c689-748d-424f-af02-17c6f2539b42",
                                                                userArgs: {
                                                                  query: [
                                                                    $state
                                                                      ._switch
                                                                      .checked,
                                                                    $state.tablePrintifyVariants.selectedRows
                                                                      .map(
                                                                        row =>
                                                                          `"${row.identifier}"`
                                                                      )
                                                                      .join(",")
                                                                  ]
                                                                },
                                                                cacheKey: null,
                                                                invalidatedKeys:
                                                                  [
                                                                    "plasmic_refresh_all"
                                                                  ],
                                                                roleId: null
                                                              }
                                                            };
                                                            return (async ({
                                                              dataOp,
                                                              continueOnError
                                                            }) => {
                                                              try {
                                                                const response =
                                                                  await executePlasmicDataOp(
                                                                    dataOp,
                                                                    {
                                                                      userAuthToken:
                                                                        dataSourcesCtx?.userAuthToken,
                                                                      user: dataSourcesCtx?.user
                                                                    }
                                                                  );
                                                                await plasmicInvalidate(
                                                                  dataOp.invalidatedKeys
                                                                );
                                                                return response;
                                                              } catch (e) {
                                                                if (
                                                                  !continueOnError
                                                                ) {
                                                                  throw e;
                                                                }
                                                                return e;
                                                              }
                                                            })?.apply(null, [
                                                              actionArgs
                                                            ]);
                                                          })()
                                                        : undefined;
                                                      if (
                                                        $steps[
                                                          "postgresUpdateMany"
                                                        ] != null &&
                                                        typeof $steps[
                                                          "postgresUpdateMany"
                                                        ] === "object" &&
                                                        typeof $steps[
                                                          "postgresUpdateMany"
                                                        ].then === "function"
                                                      ) {
                                                        $steps[
                                                          "postgresUpdateMany"
                                                        ] = await $steps[
                                                          "postgresUpdateMany"
                                                        ];
                                                      }

                                                      $steps["refreshData"] =
                                                        true
                                                          ? (() => {
                                                              const actionArgs =
                                                                {
                                                                  queryInvalidation:
                                                                    [
                                                                      "plasmic_refresh_all"
                                                                    ]
                                                                };
                                                              return (async ({
                                                                queryInvalidation
                                                              }) => {
                                                                if (
                                                                  !queryInvalidation
                                                                ) {
                                                                  return;
                                                                }
                                                                await plasmicInvalidate(
                                                                  queryInvalidation
                                                                );
                                                              })?.apply(null, [
                                                                actionArgs
                                                              ]);
                                                            })()
                                                          : undefined;
                                                      if (
                                                        $steps["refreshData"] !=
                                                          null &&
                                                        typeof $steps[
                                                          "refreshData"
                                                        ] === "object" &&
                                                        typeof $steps[
                                                          "refreshData"
                                                        ].then === "function"
                                                      ) {
                                                        $steps["refreshData"] =
                                                          await $steps[
                                                            "refreshData"
                                                          ];
                                                      }

                                                      $steps[
                                                        "invokeGlobalAction"
                                                      ] = true
                                                        ? (() => {
                                                            const actionArgs = {
                                                              args: [
                                                                "success",
                                                                `Selected rows toggled to ${$state._switch.checked}`
                                                              ]
                                                            };
                                                            return $globalActions[
                                                              "plasmic-antd5-config-provider.showNotification"
                                                            ]?.apply(null, [
                                                              ...actionArgs.args
                                                            ]);
                                                          })()
                                                        : undefined;
                                                      if (
                                                        $steps[
                                                          "invokeGlobalAction"
                                                        ] != null &&
                                                        typeof $steps[
                                                          "invokeGlobalAction"
                                                        ] === "object" &&
                                                        typeof $steps[
                                                          "invokeGlobalAction"
                                                        ].then === "function"
                                                      ) {
                                                        $steps[
                                                          "invokeGlobalAction"
                                                        ] = await $steps[
                                                          "invokeGlobalAction"
                                                        ];
                                                      }
                                                    }}
                                                  >
                                                    <Stack__
                                                      as={"div"}
                                                      hasGap={true}
                                                      className={classNames(
                                                        projectcss.all,
                                                        sty.freeBox__uoCwx
                                                      )}
                                                    >
                                                      <div
                                                        className={classNames(
                                                          projectcss.all,
                                                          projectcss.__wab_text,
                                                          sty.text__mwgtl
                                                        )}
                                                      >
                                                        {"Toggle is_enabled"}
                                                      </div>
                                                    </Stack__>
                                                  </AntdButton>
                                                </Stack__>
                                                {(() => {
                                                  const child$Props = {
                                                    className: classNames(
                                                      "__wab_instance",
                                                      sty.inputPriceVariants
                                                    ),
                                                    onChange:
                                                      generateStateOnChangePropForCodeComponents(
                                                        $state,
                                                        "value",
                                                        [
                                                          "inputPriceVariants",
                                                          "value"
                                                        ],
                                                        AntdInput_Helpers
                                                      ),
                                                    placeholder:
                                                      "Enter Price in Cents",
                                                    value:
                                                      generateStateValueProp(
                                                        $state,
                                                        [
                                                          "inputPriceVariants",
                                                          "value"
                                                        ]
                                                      )
                                                  };
                                                  initializeCodeComponentStates(
                                                    $state,
                                                    [
                                                      {
                                                        name: "value",
                                                        plasmicStateName:
                                                          "inputPriceVariants.value"
                                                      }
                                                    ],
                                                    [],
                                                    AntdInput_Helpers ?? {},
                                                    child$Props
                                                  );

                                                  return (
                                                    <AntdInput
                                                      data-plasmic-name={
                                                        "inputPriceVariants"
                                                      }
                                                      data-plasmic-override={
                                                        overrides.inputPriceVariants
                                                      }
                                                      {...child$Props}
                                                    />
                                                  );
                                                })()}
                                                <AntdButton
                                                  data-plasmic-name={
                                                    "syncPrice"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.syncPrice
                                                  }
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.syncPrice
                                                  )}
                                                  onClick={async () => {
                                                    const $steps = {};

                                                    $steps[
                                                      "postgresUpdateMany6"
                                                    ] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            dataOp: {
                                                              sourceId:
                                                                "83X9ZdYzYUYJtgqe5fwXeX",
                                                              opId: "06f3d58a-e9d0-4ca4-b3f1-98d80f422937",
                                                              userArgs: {
                                                                query: [
                                                                  $state
                                                                    .inputPriceVariants
                                                                    .value,
                                                                  $state.tablePrintifyVariants.selectedRows
                                                                    .map(
                                                                      row =>
                                                                        `"${row.identifier}"`
                                                                    )
                                                                    .join(",")
                                                                ]
                                                              },
                                                              cacheKey: null,
                                                              invalidatedKeys: [
                                                                "plasmic_refresh_all"
                                                              ],
                                                              roleId: null
                                                            }
                                                          };
                                                          return (async ({
                                                            dataOp,
                                                            continueOnError
                                                          }) => {
                                                            try {
                                                              const response =
                                                                await executePlasmicDataOp(
                                                                  dataOp,
                                                                  {
                                                                    userAuthToken:
                                                                      dataSourcesCtx?.userAuthToken,
                                                                    user: dataSourcesCtx?.user
                                                                  }
                                                                );
                                                              await plasmicInvalidate(
                                                                dataOp.invalidatedKeys
                                                              );
                                                              return response;
                                                            } catch (e) {
                                                              if (
                                                                !continueOnError
                                                              ) {
                                                                throw e;
                                                              }
                                                              return e;
                                                            }
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps[
                                                        "postgresUpdateMany6"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "postgresUpdateMany6"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "postgresUpdateMany6"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "postgresUpdateMany6"
                                                      ] = await $steps[
                                                        "postgresUpdateMany6"
                                                      ];
                                                    }

                                                    $steps["refreshData"] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            queryInvalidation: [
                                                              "plasmic_refresh_all"
                                                            ]
                                                          };
                                                          return (async ({
                                                            queryInvalidation
                                                          }) => {
                                                            if (
                                                              !queryInvalidation
                                                            ) {
                                                              return;
                                                            }
                                                            await plasmicInvalidate(
                                                              queryInvalidation
                                                            );
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps["refreshData"] !=
                                                        null &&
                                                      typeof $steps[
                                                        "refreshData"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "refreshData"
                                                      ].then === "function"
                                                    ) {
                                                      $steps["refreshData"] =
                                                        await $steps[
                                                          "refreshData"
                                                        ];
                                                    }

                                                    $steps[
                                                      "invokeGlobalAction"
                                                    ] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            args: [
                                                              "success",
                                                              "sync price complete"
                                                            ]
                                                          };
                                                          return $globalActions[
                                                            "plasmic-antd5-config-provider.showNotification"
                                                          ]?.apply(null, [
                                                            ...actionArgs.args
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps[
                                                        "invokeGlobalAction"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "invokeGlobalAction"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "invokeGlobalAction"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "invokeGlobalAction"
                                                      ] = await $steps[
                                                        "invokeGlobalAction"
                                                      ];
                                                    }
                                                  }}
                                                >
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__v9EJc
                                                    )}
                                                  >
                                                    {"Sync Price"}
                                                  </div>
                                                </AntdButton>
                                              </Stack__>
                                            ) : null}
                                            {(() => {
                                              try {
                                                return (
                                                  $queries
                                                    .getSupPrintifyVariants.data
                                                    .length !== 0
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return true;
                                                }
                                                throw e;
                                              }
                                            })()
                                              ? (() => {
                                                  const child$Props = {
                                                    canSelectRows: "multiple",
                                                    className: classNames(
                                                      "__wab_instance",
                                                      sty.tablePrintifyVariants
                                                    ),
                                                    data: (() => {
                                                      try {
                                                        return $queries.getSupPrintifyVariants;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })(),
                                                    fields: (() => {
                                                      const __composite = [
                                                        {
                                                          key: "id",
                                                          fieldId: "id",
                                                          dataType: null
                                                        },
                                                        {
                                                          key: "variant_id",
                                                          fieldId: "variant_id"
                                                        },
                                                        {
                                                          key: "email",
                                                          fieldId: "email",
                                                          isHidden: null
                                                        },
                                                        {
                                                          key: "is_enabled",
                                                          fieldId: "is_enabled"
                                                        },
                                                        {
                                                          key: "title",
                                                          fieldId: "title"
                                                        },
                                                        {
                                                          key: "printify_product_id",
                                                          fieldId:
                                                            "printify_product_id"
                                                        },
                                                        {
                                                          key: "created_at",
                                                          fieldId: "created_at"
                                                        },
                                                        {
                                                          key: "price",
                                                          fieldId: "price"
                                                        },
                                                        {
                                                          key: "identifier",
                                                          fieldId: "identifier",
                                                          isHidden: null
                                                        }
                                                      ];
                                                      __composite["0"][
                                                        "dataType"
                                                      ] = "number";
                                                      __composite["2"][
                                                        "isHidden"
                                                      ] = true;
                                                      __composite["8"][
                                                        "isHidden"
                                                      ] = true;
                                                      return __composite;
                                                    })(),

                                                    hideColumnPicker: true,
                                                    hideExports: true,
                                                    onRowSelectionChanged:
                                                      async (
                                                        ...eventArgs: any
                                                      ) => {
                                                        generateStateOnChangePropForCodeComponents(
                                                          $state,
                                                          "selectedRowKey",
                                                          [
                                                            "tablePrintifyVariants",
                                                            "selectedRowKey"
                                                          ],
                                                          RichTable_Helpers
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );
                                                        generateStateOnChangePropForCodeComponents(
                                                          $state,
                                                          "selectedRow",
                                                          [
                                                            "tablePrintifyVariants",
                                                            "selectedRow"
                                                          ],
                                                          RichTable_Helpers
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );
                                                        generateStateOnChangePropForCodeComponents(
                                                          $state,
                                                          "selectedRows",
                                                          [
                                                            "tablePrintifyVariants",
                                                            "selectedRows"
                                                          ],
                                                          RichTable_Helpers
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );
                                                        generateStateOnChangePropForCodeComponents(
                                                          $state,
                                                          "selectedRowKeys",
                                                          [
                                                            "tablePrintifyVariants",
                                                            "selectedRowKeys"
                                                          ],
                                                          RichTable_Helpers
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );
                                                      },
                                                    rowActions: (() => {
                                                      const __composite = [
                                                        {
                                                          type: "item",
                                                          label: null,
                                                          onClick: null
                                                        },
                                                        {
                                                          type: null,
                                                          label: null,
                                                          children: null,
                                                          onClick: null
                                                        }
                                                      ];
                                                      __composite["0"][
                                                        "label"
                                                      ] = "Edit";
                                                      __composite["0"][
                                                        "onClick"
                                                      ] = async (
                                                        rowKey,
                                                        row
                                                      ) => {
                                                        const $steps = {};

                                                        $steps[
                                                          "updateSelectedVariant"
                                                        ] = true
                                                          ? (() => {
                                                              const actionArgs =
                                                                {
                                                                  variable: {
                                                                    objRoot:
                                                                      $state,
                                                                    variablePath:
                                                                      [
                                                                        "selectedVariant"
                                                                      ]
                                                                  },
                                                                  operation: 0,
                                                                  value: row
                                                                };
                                                              return (({
                                                                variable,
                                                                value,
                                                                startIndex,
                                                                deleteCount
                                                              }) => {
                                                                if (!variable) {
                                                                  return;
                                                                }
                                                                const {
                                                                  objRoot,
                                                                  variablePath
                                                                } = variable;

                                                                $stateSet(
                                                                  objRoot,
                                                                  variablePath,
                                                                  value
                                                                );
                                                                return value;
                                                              })?.apply(null, [
                                                                actionArgs
                                                              ]);
                                                            })()
                                                          : undefined;
                                                        if (
                                                          $steps[
                                                            "updateSelectedVariant"
                                                          ] != null &&
                                                          typeof $steps[
                                                            "updateSelectedVariant"
                                                          ] === "object" &&
                                                          typeof $steps[
                                                            "updateSelectedVariant"
                                                          ].then === "function"
                                                        ) {
                                                          $steps[
                                                            "updateSelectedVariant"
                                                          ] = await $steps[
                                                            "updateSelectedVariant"
                                                          ];
                                                        }

                                                        $steps[
                                                          "updateModalEditVariantOpen"
                                                        ] = true
                                                          ? (() => {
                                                              const actionArgs =
                                                                {
                                                                  variable: {
                                                                    objRoot:
                                                                      $state,
                                                                    variablePath:
                                                                      [
                                                                        "modalEditVariant",
                                                                        "open"
                                                                      ]
                                                                  },
                                                                  operation: 0,
                                                                  value: true
                                                                };
                                                              return (({
                                                                variable,
                                                                value,
                                                                startIndex,
                                                                deleteCount
                                                              }) => {
                                                                if (!variable) {
                                                                  return;
                                                                }
                                                                const {
                                                                  objRoot,
                                                                  variablePath
                                                                } = variable;

                                                                $stateSet(
                                                                  objRoot,
                                                                  variablePath,
                                                                  value
                                                                );
                                                                return value;
                                                              })?.apply(null, [
                                                                actionArgs
                                                              ]);
                                                            })()
                                                          : undefined;
                                                        if (
                                                          $steps[
                                                            "updateModalEditVariantOpen"
                                                          ] != null &&
                                                          typeof $steps[
                                                            "updateModalEditVariantOpen"
                                                          ] === "object" &&
                                                          typeof $steps[
                                                            "updateModalEditVariantOpen"
                                                          ].then === "function"
                                                        ) {
                                                          $steps[
                                                            "updateModalEditVariantOpen"
                                                          ] = await $steps[
                                                            "updateModalEditVariantOpen"
                                                          ];
                                                        }
                                                      };
                                                      __composite["1"]["type"] =
                                                        "item";
                                                      __composite["1"][
                                                        "label"
                                                      ] = "checked";
                                                      __composite["1"][
                                                        "children"
                                                      ] = [{}];
                                                      __composite["1"][
                                                        "onClick"
                                                      ] = async (
                                                        rowKey,
                                                        row
                                                      ) => {
                                                        const $steps = {};

                                                        $steps[
                                                          "postgresDeleteMany"
                                                        ] = true
                                                          ? (() => {
                                                              const actionArgs =
                                                                {
                                                                  dataOp: {
                                                                    sourceId:
                                                                      "83X9ZdYzYUYJtgqe5fwXeX",
                                                                    opId: "678ca699-7b13-4858-b325-a4b42f5b1e30",
                                                                    userArgs: {
                                                                      conditions:
                                                                        [row.id]
                                                                    },
                                                                    cacheKey:
                                                                      null,
                                                                    invalidatedKeys:
                                                                      [
                                                                        "plasmic_refresh_all"
                                                                      ],
                                                                    roleId: null
                                                                  }
                                                                };
                                                              return (async ({
                                                                dataOp,
                                                                continueOnError
                                                              }) => {
                                                                try {
                                                                  const response =
                                                                    await executePlasmicDataOp(
                                                                      dataOp,
                                                                      {
                                                                        userAuthToken:
                                                                          dataSourcesCtx?.userAuthToken,
                                                                        user: dataSourcesCtx?.user
                                                                      }
                                                                    );
                                                                  await plasmicInvalidate(
                                                                    dataOp.invalidatedKeys
                                                                  );
                                                                  return response;
                                                                } catch (e) {
                                                                  if (
                                                                    !continueOnError
                                                                  ) {
                                                                    throw e;
                                                                  }
                                                                  return e;
                                                                }
                                                              })?.apply(null, [
                                                                actionArgs
                                                              ]);
                                                            })()
                                                          : undefined;
                                                        if (
                                                          $steps[
                                                            "postgresDeleteMany"
                                                          ] != null &&
                                                          typeof $steps[
                                                            "postgresDeleteMany"
                                                          ] === "object" &&
                                                          typeof $steps[
                                                            "postgresDeleteMany"
                                                          ].then === "function"
                                                        ) {
                                                          $steps[
                                                            "postgresDeleteMany"
                                                          ] = await $steps[
                                                            "postgresDeleteMany"
                                                          ];
                                                        }

                                                        $steps["refreshData"] =
                                                          true
                                                            ? (() => {
                                                                const actionArgs =
                                                                  {
                                                                    queryInvalidation:
                                                                      [
                                                                        "plasmic_refresh_all"
                                                                      ]
                                                                  };
                                                                return (async ({
                                                                  queryInvalidation
                                                                }) => {
                                                                  if (
                                                                    !queryInvalidation
                                                                  ) {
                                                                    return;
                                                                  }
                                                                  await plasmicInvalidate(
                                                                    queryInvalidation
                                                                  );
                                                                })?.apply(
                                                                  null,
                                                                  [actionArgs]
                                                                );
                                                              })()
                                                            : undefined;
                                                        if (
                                                          $steps[
                                                            "refreshData"
                                                          ] != null &&
                                                          typeof $steps[
                                                            "refreshData"
                                                          ] === "object" &&
                                                          typeof $steps[
                                                            "refreshData"
                                                          ].then === "function"
                                                        ) {
                                                          $steps[
                                                            "refreshData"
                                                          ] = await $steps[
                                                            "refreshData"
                                                          ];
                                                        }
                                                      };
                                                      return __composite;
                                                    })(),

                                                    scopeClassName:
                                                      sty[
                                                        "tablePrintifyVariants__instance"
                                                      ],
                                                    selectedRowKey:
                                                      generateStateValueProp(
                                                        $state,
                                                        [
                                                          "tablePrintifyVariants",
                                                          "selectedRowKey"
                                                        ]
                                                      ),
                                                    selectedRowKeys:
                                                      generateStateValueProp(
                                                        $state,
                                                        [
                                                          "tablePrintifyVariants",
                                                          "selectedRowKeys"
                                                        ]
                                                      ),
                                                    themeResetClassName:
                                                      classNames(
                                                        projectcss.root_reset,
                                                        projectcss.root_reset_tags,
                                                        projectcss.plasmic_default_styles,
                                                        projectcss.plasmic_mixins,
                                                        projectcss.plasmic_tokens,
                                                        plasmic_antd_5_hostless_css.plasmic_tokens,
                                                        plasmic_plasmic_rich_components_css.plasmic_tokens
                                                      )
                                                  };
                                                  initializeCodeComponentStates(
                                                    $state,
                                                    [
                                                      {
                                                        name: "selectedRowKey",
                                                        plasmicStateName:
                                                          "tablePrintifyVariants.selectedRowKey"
                                                      },
                                                      {
                                                        name: "selectedRow",
                                                        plasmicStateName:
                                                          "tablePrintifyVariants.selectedRow"
                                                      },
                                                      {
                                                        name: "selectedRows",
                                                        plasmicStateName:
                                                          "tablePrintifyVariants.selectedRows"
                                                      },
                                                      {
                                                        name: "selectedRowKeys",
                                                        plasmicStateName:
                                                          "tablePrintifyVariants.selectedRowKeys"
                                                      }
                                                    ],
                                                    [],
                                                    RichTable_Helpers ?? {},
                                                    child$Props
                                                  );

                                                  return (
                                                    <RichTable
                                                      data-plasmic-name={
                                                        "tablePrintifyVariants"
                                                      }
                                                      data-plasmic-override={
                                                        overrides.tablePrintifyVariants
                                                      }
                                                      {...child$Props}
                                                    />
                                                  );
                                                })()
                                              : null}
                                          </div>
                                        ) : null}
                                        <AntdModal
                                          data-plasmic-name={"modalEditVariant"}
                                          data-plasmic-override={
                                            overrides.modalEditVariant
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.modalEditVariant
                                          )}
                                          defaultStylesClassName={classNames(
                                            projectcss.root_reset,
                                            projectcss.plasmic_default_styles,
                                            projectcss.plasmic_mixins,
                                            projectcss.plasmic_tokens,
                                            plasmic_antd_5_hostless_css.plasmic_tokens,
                                            plasmic_plasmic_rich_components_css.plasmic_tokens
                                          )}
                                          hideFooter={true}
                                          maskClosable={true}
                                          modalScopeClassName={
                                            sty["modalEditVariant__modal"]
                                          }
                                          onOpenChange={generateStateOnChangeProp(
                                            $state,
                                            ["modalEditVariant", "open"]
                                          )}
                                          open={generateStateValueProp($state, [
                                            "modalEditVariant",
                                            "open"
                                          ])}
                                          title={"Edit Variant"}
                                          trigger={null}
                                        >
                                          {(() => {
                                            const child$Props = {
                                              children: null,
                                              className: classNames(
                                                "__wab_instance",
                                                sty.formEditSinglePrintifyVariant
                                              ),
                                              data: {
                                                sourceId:
                                                  "83X9ZdYzYUYJtgqe5fwXeX",
                                                opId: "23b394a8-d060-4bc6-ac7a-26146bd7303c",
                                                userArgs: {
                                                  filters: [
                                                    $state.selectedVariant.id
                                                  ]
                                                },
                                                cacheKey: `plasmic.$.${(() => {
                                                  try {
                                                    return "getOne";
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return "";
                                                    }
                                                    throw e;
                                                  }
                                                })()}.$.d3HBvbMn3Uhl.$.23b394a8-d060-4bc6-ac7a-26146bd7303c.$.`,
                                                invalidatedKeys: null,
                                                roleId: null
                                              },
                                              dataFormItems: (() => {
                                                const __composite = [
                                                  {
                                                    key: "id",
                                                    inputType: "Number",
                                                    fieldId: "id",
                                                    label: "id",
                                                    name: "id",
                                                    initialValue: null,
                                                    hidden: null
                                                  },
                                                  {
                                                    key: "variant_id",
                                                    inputType: "Number",
                                                    fieldId: "variant_id",
                                                    label: "variant_id",
                                                    name: "variant_id",
                                                    initialValue: null,
                                                    hidden: null
                                                  },
                                                  {
                                                    key: "email",
                                                    inputType: "Text",
                                                    fieldId: "email",
                                                    label: "email",
                                                    name: "email",
                                                    initialValue:
                                                      "golfx2@gmail.com",
                                                    hidden: null
                                                  },
                                                  {
                                                    key: "is_enabled",
                                                    inputType: "Checkbox",
                                                    fieldId: "is_enabled",
                                                    label: "is_enabled",
                                                    name: "is_enabled",
                                                    initialValue: true
                                                  },
                                                  {
                                                    key: "title",
                                                    inputType: "Text",
                                                    fieldId: "title",
                                                    label: "title",
                                                    name: "title",
                                                    initialValue: null
                                                  },
                                                  {
                                                    key: "printify_product_id",
                                                    inputType: "Number",
                                                    fieldId:
                                                      "printify_product_id",
                                                    label:
                                                      "printify_product_id",
                                                    name: "printify_product_id",
                                                    initialValue: null,
                                                    hidden: null
                                                  },
                                                  {
                                                    key: "created_at",
                                                    inputType: "Text",
                                                    fieldId: "created_at",
                                                    label: "created_at",
                                                    name: "created_at",
                                                    initialValue:
                                                      "2024-08-22T14:23:37.055Z",
                                                    hidden: null
                                                  },
                                                  {
                                                    key: "price",
                                                    inputType: "Number",
                                                    fieldId: "price",
                                                    label: null,
                                                    name: "price",
                                                    initialValue: null
                                                  }
                                                ];
                                                __composite["0"][
                                                  "initialValue"
                                                ] = parseInt(
                                                  $state.selectedVariant.id
                                                );
                                                __composite["0"]["hidden"] =
                                                  true;
                                                __composite["1"][
                                                  "initialValue"
                                                ] = parseInt(
                                                  $state.selectedVariant
                                                    .variant_id
                                                );
                                                __composite["1"]["hidden"] =
                                                  true;
                                                __composite["2"]["hidden"] =
                                                  true;
                                                __composite["4"][
                                                  "initialValue"
                                                ] =
                                                  $state.selectedVariant.title;
                                                __composite["5"][
                                                  "initialValue"
                                                ] =
                                                  $state.selectedVariant.printify_product_id;
                                                __composite["5"]["hidden"] =
                                                  true;
                                                __composite["6"]["hidden"] =
                                                  true;
                                                __composite["7"]["label"] =
                                                  "price in cents";
                                                __composite["7"][
                                                  "initialValue"
                                                ] = parseInt(
                                                  $state.selectedVariant.price
                                                );
                                                return __composite;
                                              })(),

                                              extendedOnValuesChange:
                                                generateStateOnChangePropForCodeComponents(
                                                  $state,
                                                  "value",
                                                  [
                                                    "formEditSinglePrintifyVariant",
                                                    "value"
                                                  ],
                                                  FormWrapper_Helpers
                                                ),
                                              formItems: [],
                                              labelCol: {
                                                span: 8,
                                                horizontalOnly: true
                                              },
                                              layout: "vertical",
                                              mode: "simplified",
                                              onFinish: async values => {
                                                const $steps = {};

                                                $steps["defaultSubmit"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        dataOp: {
                                                          sourceId:
                                                            "83X9ZdYzYUYJtgqe5fwXeX",
                                                          opId: "3f1907f9-5427-46b9-b155-fd0e44464c2f",
                                                          userArgs: {
                                                            keys: [
                                                              $state
                                                                .formEditSinglePrintifyVariant
                                                                .value.id
                                                            ],
                                                            variables: [
                                                              $state
                                                                .formEditSinglePrintifyVariant
                                                                .value
                                                            ]
                                                          },
                                                          cacheKey: null,
                                                          invalidatedKeys: [
                                                            "4dea7377-de40-40c8-ba10-c5a38ade6f03"
                                                          ],
                                                          roleId: null
                                                        }
                                                      };
                                                      return (async ({
                                                        dataOp,
                                                        continueOnError
                                                      }) => {
                                                        try {
                                                          const response =
                                                            await executePlasmicDataOp(
                                                              dataOp,
                                                              {
                                                                userAuthToken:
                                                                  dataSourcesCtx?.userAuthToken,
                                                                user: dataSourcesCtx?.user
                                                              }
                                                            );
                                                          await plasmicInvalidate(
                                                            dataOp.invalidatedKeys
                                                          );
                                                          return response;
                                                        } catch (e) {
                                                          if (
                                                            !continueOnError
                                                          ) {
                                                            throw e;
                                                          }
                                                          return e;
                                                        }
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps["defaultSubmit"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "defaultSubmit"
                                                  ] === "object" &&
                                                  typeof $steps["defaultSubmit"]
                                                    .then === "function"
                                                ) {
                                                  $steps["defaultSubmit"] =
                                                    await $steps[
                                                      "defaultSubmit"
                                                    ];
                                                }

                                                $steps[
                                                  "updateModalEditVariantOpen"
                                                ] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        operation: 0,
                                                        value: false,
                                                        variable: {
                                                          objRoot: $state,
                                                          variablePath: [
                                                            "modalEditVariant",
                                                            "open"
                                                          ]
                                                        }
                                                      };
                                                      return (({
                                                        variable,
                                                        value,
                                                        startIndex,
                                                        deleteCount
                                                      }) => {
                                                        if (!variable) {
                                                          return;
                                                        }
                                                        const {
                                                          objRoot,
                                                          variablePath
                                                        } = variable;

                                                        $stateSet(
                                                          objRoot,
                                                          variablePath,
                                                          value
                                                        );
                                                        return value;
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps[
                                                    "updateModalEditVariantOpen"
                                                  ] != null &&
                                                  typeof $steps[
                                                    "updateModalEditVariantOpen"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "updateModalEditVariantOpen"
                                                  ].then === "function"
                                                ) {
                                                  $steps[
                                                    "updateModalEditVariantOpen"
                                                  ] = await $steps[
                                                    "updateModalEditVariantOpen"
                                                  ];
                                                }
                                              },
                                              onIsSubmittingChange:
                                                generateStateOnChangePropForCodeComponents(
                                                  $state,
                                                  "isSubmitting",
                                                  [
                                                    "formEditSinglePrintifyVariant",
                                                    "isSubmitting"
                                                  ],
                                                  FormWrapper_Helpers
                                                ),
                                              ref: ref => {
                                                $refs[
                                                  "formEditSinglePrintifyVariant"
                                                ] = ref;
                                              },
                                              submitSlot: (
                                                <AntdButton
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.button__rLNsK
                                                  )}
                                                  submitsForm={true}
                                                  type={"primary"}
                                                >
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text___2PHmw
                                                    )}
                                                  >
                                                    {"Submit"}
                                                  </div>
                                                </AntdButton>
                                              ),
                                              wrapperCol: {
                                                span: 16,
                                                horizontalOnly: true
                                              }
                                            };
                                            initializeCodeComponentStates(
                                              $state,
                                              [
                                                {
                                                  name: "value",
                                                  plasmicStateName:
                                                    "formEditSinglePrintifyVariant.value"
                                                },
                                                {
                                                  name: "isSubmitting",
                                                  plasmicStateName:
                                                    "formEditSinglePrintifyVariant.isSubmitting"
                                                }
                                              ],
                                              [],
                                              FormWrapper_Helpers ?? {},
                                              child$Props
                                            );

                                            return (
                                              <FormWrapper
                                                data-plasmic-name={
                                                  "formEditSinglePrintifyVariant"
                                                }
                                                data-plasmic-override={
                                                  overrides.formEditSinglePrintifyVariant
                                                }
                                                {...child$Props}
                                              />
                                            );
                                          })()}
                                        </AntdModal>
                                      </AntdTabItem>
                                      <AntdTabItem
                                        className={classNames(
                                          "__wab_instance",
                                          sty.tabItem__swLqd
                                        )}
                                        key={"3"}
                                        label={
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__kljvq
                                            )}
                                          >
                                            {"Placeholders"}
                                          </div>
                                        }
                                      >
                                        <AntdModal
                                          data-plasmic-name={
                                            "modalNewPrintifyPlaceholder"
                                          }
                                          data-plasmic-override={
                                            overrides.modalNewPrintifyPlaceholder
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.modalNewPrintifyPlaceholder
                                          )}
                                          defaultStylesClassName={classNames(
                                            projectcss.root_reset,
                                            projectcss.plasmic_default_styles,
                                            projectcss.plasmic_mixins,
                                            projectcss.plasmic_tokens,
                                            plasmic_antd_5_hostless_css.plasmic_tokens,
                                            plasmic_plasmic_rich_components_css.plasmic_tokens
                                          )}
                                          hideFooter={true}
                                          modalScopeClassName={
                                            sty[
                                              "modalNewPrintifyPlaceholder__modal"
                                            ]
                                          }
                                          onOpenChange={generateStateOnChangeProp(
                                            $state,
                                            [
                                              "modalNewPrintifyPlaceholder",
                                              "open"
                                            ]
                                          )}
                                          open={generateStateValueProp($state, [
                                            "modalNewPrintifyPlaceholder",
                                            "open"
                                          ])}
                                          title={"New Placeholder"}
                                          trigger={
                                            <AntdButton
                                              className={classNames(
                                                "__wab_instance",
                                                sty.button__y9GsG
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__mAmmw
                                                )}
                                              >
                                                {"New"}
                                              </div>
                                            </AntdButton>
                                          }
                                        >
                                          {(() => {
                                            const child$Props = {
                                              className: classNames(
                                                "__wab_instance",
                                                sty.formNewPrintifyPlaceholder
                                              ),
                                              extendedOnValuesChange:
                                                generateStateOnChangePropForCodeComponents(
                                                  $state,
                                                  "value",
                                                  [
                                                    "formNewPrintifyPlaceholder",
                                                    "value"
                                                  ],
                                                  FormWrapper_Helpers
                                                ),
                                              formItems: [
                                                {
                                                  label: "Name",
                                                  name: "name",
                                                  inputType: "Text"
                                                },
                                                {
                                                  label: "Message",
                                                  name: "message",
                                                  inputType: "Text Area"
                                                }
                                              ],
                                              labelCol: {
                                                span: 8,
                                                horizontalOnly: true
                                              },
                                              layout: "vertical",
                                              mode: "advanced",
                                              onFinish: async values => {
                                                const $steps = {};

                                                $steps["defaultSubmit"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        dataOp: {
                                                          sourceId:
                                                            "83X9ZdYzYUYJtgqe5fwXeX",
                                                          opId: "62824c72-4bd4-478f-a45c-240e0ca9b3c7",
                                                          userArgs: {
                                                            variables: [
                                                              $state
                                                                .formNewPrintifyPlaceholder
                                                                .value
                                                            ]
                                                          },
                                                          cacheKey: null,
                                                          invalidatedKeys: [
                                                            "e183df9e-abbe-4e5f-a20d-dc0eda82bb31"
                                                          ],
                                                          roleId: null
                                                        }
                                                      };
                                                      return (async ({
                                                        dataOp,
                                                        continueOnError
                                                      }) => {
                                                        try {
                                                          const response =
                                                            await executePlasmicDataOp(
                                                              dataOp,
                                                              {
                                                                userAuthToken:
                                                                  dataSourcesCtx?.userAuthToken,
                                                                user: dataSourcesCtx?.user
                                                              }
                                                            );
                                                          await plasmicInvalidate(
                                                            dataOp.invalidatedKeys
                                                          );
                                                          return response;
                                                        } catch (e) {
                                                          if (
                                                            !continueOnError
                                                          ) {
                                                            throw e;
                                                          }
                                                          return e;
                                                        }
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps["defaultSubmit"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "defaultSubmit"
                                                  ] === "object" &&
                                                  typeof $steps["defaultSubmit"]
                                                    .then === "function"
                                                ) {
                                                  $steps["defaultSubmit"] =
                                                    await $steps[
                                                      "defaultSubmit"
                                                    ];
                                                }
                                              },
                                              onIsSubmittingChange:
                                                generateStateOnChangePropForCodeComponents(
                                                  $state,
                                                  "isSubmitting",
                                                  [
                                                    "formNewPrintifyPlaceholder",
                                                    "isSubmitting"
                                                  ],
                                                  FormWrapper_Helpers
                                                ),
                                              ref: ref => {
                                                $refs[
                                                  "formNewPrintifyPlaceholder"
                                                ] = ref;
                                              },
                                              submitSlot: null,
                                              wrapperCol: {
                                                span: 16,
                                                horizontalOnly: true
                                              }
                                            };
                                            initializeCodeComponentStates(
                                              $state,
                                              [
                                                {
                                                  name: "value",
                                                  plasmicStateName:
                                                    "formNewPrintifyPlaceholder.value"
                                                },
                                                {
                                                  name: "isSubmitting",
                                                  plasmicStateName:
                                                    "formNewPrintifyPlaceholder.isSubmitting"
                                                }
                                              ],
                                              [],
                                              FormWrapper_Helpers ?? {},
                                              child$Props
                                            );

                                            return (
                                              <FormWrapper
                                                data-plasmic-name={
                                                  "formNewPrintifyPlaceholder"
                                                }
                                                data-plasmic-override={
                                                  overrides.formNewPrintifyPlaceholder
                                                }
                                                {...child$Props}
                                              >
                                                <FormItemWrapper
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.formField__fxiQa
                                                  )}
                                                  hidden={true}
                                                  initialValue={undefined}
                                                  label={"id"}
                                                  name={"id"}
                                                >
                                                  <AntdInputNumber
                                                    data-plasmic-name={
                                                      "numberInput7"
                                                    }
                                                    data-plasmic-override={
                                                      overrides.numberInput7
                                                    }
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.numberInput7
                                                    )}
                                                    onChange={generateStateOnChangeProp(
                                                      $state,
                                                      ["numberInput7", "value"]
                                                    )}
                                                    type={"number"}
                                                    value={generateStateValueProp(
                                                      $state,
                                                      ["numberInput7", "value"]
                                                    )}
                                                  />
                                                </FormItemWrapper>
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.freeBox___5Pa8
                                                  )}
                                                >
                                                  <FormItemWrapper
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.formField__omGp
                                                    )}
                                                    initialValue={1}
                                                    label={"scale"}
                                                    name={"scale"}
                                                    rules={[
                                                      { ruleType: "required" }
                                                    ]}
                                                  >
                                                    <AntdInputNumber
                                                      data-plasmic-name={
                                                        "numberInput8"
                                                      }
                                                      data-plasmic-override={
                                                        overrides.numberInput8
                                                      }
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.numberInput8
                                                      )}
                                                      min={0}
                                                      onChange={generateStateOnChangeProp(
                                                        $state,
                                                        [
                                                          "numberInput8",
                                                          "value"
                                                        ]
                                                      )}
                                                      step={0.05}
                                                      type={"number"}
                                                      value={generateStateValueProp(
                                                        $state,
                                                        [
                                                          "numberInput8",
                                                          "value"
                                                        ]
                                                      )}
                                                    />
                                                  </FormItemWrapper>
                                                  <FormItemWrapper
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.formField__z9ZSz
                                                    )}
                                                    initialValue={0.5}
                                                    label={"x"}
                                                    name={"x"}
                                                    rules={[
                                                      { ruleType: "required" }
                                                    ]}
                                                  >
                                                    <AntdInputNumber
                                                      data-plasmic-name={
                                                        "numberInput10"
                                                      }
                                                      data-plasmic-override={
                                                        overrides.numberInput10
                                                      }
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.numberInput10
                                                      )}
                                                      min={0}
                                                      onChange={generateStateOnChangeProp(
                                                        $state,
                                                        [
                                                          "numberInput10",
                                                          "value"
                                                        ]
                                                      )}
                                                      step={0.05}
                                                      type={"number"}
                                                      value={generateStateValueProp(
                                                        $state,
                                                        [
                                                          "numberInput10",
                                                          "value"
                                                        ]
                                                      )}
                                                    />
                                                  </FormItemWrapper>
                                                  <FormItemWrapper
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.formField__wZvBv
                                                    )}
                                                    initialValue={0.5}
                                                    label={"y"}
                                                    name={"y"}
                                                    rules={[
                                                      { ruleType: "required" }
                                                    ]}
                                                  >
                                                    <AntdInputNumber
                                                      data-plasmic-name={
                                                        "numberInput11"
                                                      }
                                                      data-plasmic-override={
                                                        overrides.numberInput11
                                                      }
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.numberInput11
                                                      )}
                                                      min={0}
                                                      onChange={generateStateOnChangeProp(
                                                        $state,
                                                        [
                                                          "numberInput11",
                                                          "value"
                                                        ]
                                                      )}
                                                      step={0.05}
                                                      type={"number"}
                                                      value={generateStateValueProp(
                                                        $state,
                                                        [
                                                          "numberInput11",
                                                          "value"
                                                        ]
                                                      )}
                                                    />
                                                  </FormItemWrapper>
                                                  <FormItemWrapper
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.formField__gNV
                                                    )}
                                                    initialValue={0}
                                                    label={"rotate"}
                                                    name={"rotate"}
                                                    rules={[
                                                      {
                                                        ruleType: "advanced",
                                                        custom: (
                                                          rule,
                                                          value
                                                        ) => {
                                                          return {
                                                            min: 0,
                                                            max: 360
                                                          };
                                                        }
                                                      },

                                                      { ruleType: "required" }
                                                    ]}
                                                  >
                                                    <AntdInputNumber
                                                      data-plasmic-name={
                                                        "numberInput12"
                                                      }
                                                      data-plasmic-override={
                                                        overrides.numberInput12
                                                      }
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.numberInput12
                                                      )}
                                                      max={359}
                                                      min={0}
                                                      onChange={generateStateOnChangeProp(
                                                        $state,
                                                        [
                                                          "numberInput12",
                                                          "value"
                                                        ]
                                                      )}
                                                      step={1}
                                                      type={"number"}
                                                      value={generateStateValueProp(
                                                        $state,
                                                        [
                                                          "numberInput12",
                                                          "value"
                                                        ]
                                                      )}
                                                    />
                                                  </FormItemWrapper>
                                                </div>
                                                <FormItemWrapper
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.formField___0Rolp
                                                  )}
                                                  hidden={true}
                                                  initialValue={(() => {
                                                    try {
                                                      return parseInt(
                                                        $state.selectedProduct
                                                          .id
                                                      );
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  label={"Printify Product ID"}
                                                  name={"Printify Product ID"}
                                                >
                                                  <AntdInputNumber
                                                    data-plasmic-name={
                                                      "numberInput9"
                                                    }
                                                    data-plasmic-override={
                                                      overrides.numberInput9
                                                    }
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.numberInput9
                                                    )}
                                                    onChange={generateStateOnChangeProp(
                                                      $state,
                                                      ["numberInput9", "value"]
                                                    )}
                                                    type={"number"}
                                                    value={generateStateValueProp(
                                                      $state,
                                                      ["numberInput9", "value"]
                                                    )}
                                                  />
                                                </FormItemWrapper>
                                                <FormItemWrapper
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.formField__vdede
                                                  )}
                                                  hidden={true}
                                                  initialValue={undefined}
                                                  label={"created_at"}
                                                  name={"created_at"}
                                                >
                                                  {(() => {
                                                    const child$Props = {
                                                      className: classNames(
                                                        "__wab_instance",
                                                        sty.input4
                                                      ),
                                                      onChange:
                                                        generateStateOnChangePropForCodeComponents(
                                                          $state,
                                                          "value",
                                                          ["input4", "value"],
                                                          AntdInput_Helpers
                                                        ),
                                                      value:
                                                        generateStateValueProp(
                                                          $state,
                                                          ["input4", "value"]
                                                        )
                                                    };
                                                    initializeCodeComponentStates(
                                                      $state,
                                                      [
                                                        {
                                                          name: "value",
                                                          plasmicStateName:
                                                            "input4.value"
                                                        }
                                                      ],
                                                      [],
                                                      AntdInput_Helpers ?? {},
                                                      child$Props
                                                    );

                                                    return (
                                                      <AntdInput
                                                        data-plasmic-name={
                                                          "input4"
                                                        }
                                                        data-plasmic-override={
                                                          overrides.input4
                                                        }
                                                        {...child$Props}
                                                      />
                                                    );
                                                  })()}
                                                </FormItemWrapper>
                                                <FormItemWrapper
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.formField__imr6M
                                                  )}
                                                  initialValue={(() => {
                                                    try {
                                                      return $queries.queryGetPrintifyVariantsByBlueprintandPrintProvider.data.response.variants[0].placeholders.map(
                                                        i => ({
                                                          label: i.position,
                                                          value: i.position
                                                        })
                                                      )[0].value;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  label={"position"}
                                                  name={"position"}
                                                  rules={[
                                                    { ruleType: "required" }
                                                  ]}
                                                >
                                                  <AntdSelect
                                                    data-plasmic-name={
                                                      "select4"
                                                    }
                                                    data-plasmic-override={
                                                      overrides.select4
                                                    }
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.select4
                                                    )}
                                                    defaultStylesClassName={classNames(
                                                      projectcss.root_reset,
                                                      projectcss.plasmic_default_styles,
                                                      projectcss.plasmic_mixins,
                                                      projectcss.plasmic_tokens,
                                                      plasmic_antd_5_hostless_css.plasmic_tokens,
                                                      plasmic_plasmic_rich_components_css.plasmic_tokens
                                                    )}
                                                    onChange={generateStateOnChangeProp(
                                                      $state,
                                                      ["select4", "value"]
                                                    )}
                                                    options={(() => {
                                                      try {
                                                        return $queries.queryGetPrintifyVariantsByBlueprintandPrintProvider.data.response.variants[0].placeholders.map(
                                                          i => ({
                                                            label: i.position,
                                                            value: i.position
                                                          })
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return [];
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    placeholder={"Select..."}
                                                    popupScopeClassName={
                                                      sty["select4__popup"]
                                                    }
                                                    value={generateStateValueProp(
                                                      $state,
                                                      ["select4", "value"]
                                                    )}
                                                  />
                                                </FormItemWrapper>
                                                <FormItemWrapper
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.formField__llVbf
                                                  )}
                                                  initialValue={undefined}
                                                  label={"image_id"}
                                                  name={"image_id"}
                                                  rules={[
                                                    { ruleType: "required" }
                                                  ]}
                                                >
                                                  <AntdSelect
                                                    data-plasmic-name={
                                                      "select5"
                                                    }
                                                    data-plasmic-override={
                                                      overrides.select5
                                                    }
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.select5
                                                    )}
                                                    defaultStylesClassName={classNames(
                                                      projectcss.root_reset,
                                                      projectcss.plasmic_default_styles,
                                                      projectcss.plasmic_mixins,
                                                      projectcss.plasmic_tokens,
                                                      plasmic_antd_5_hostless_css.plasmic_tokens,
                                                      plasmic_plasmic_rich_components_css.plasmic_tokens
                                                    )}
                                                    onChange={generateStateOnChangeProp(
                                                      $state,
                                                      ["select5", "value"]
                                                    )}
                                                    options={(() => {
                                                      const __composite = [
                                                        {
                                                          value: null,
                                                          label: null,
                                                          type: "option"
                                                        },
                                                        {
                                                          value: null,
                                                          label: null,
                                                          type: "option"
                                                        }
                                                      ];
                                                      __composite["0"][
                                                        "value"
                                                      ] = "design";
                                                      __composite["0"][
                                                        "label"
                                                      ] = "Design";
                                                      __composite["1"][
                                                        "value"
                                                      ] = "logo";
                                                      __composite["1"][
                                                        "label"
                                                      ] = "Logo";
                                                      return __composite;
                                                    })()}
                                                    placeholder={"Select..."}
                                                    popupScopeClassName={
                                                      sty["select5__popup"]
                                                    }
                                                    value={generateStateValueProp(
                                                      $state,
                                                      ["select5", "value"]
                                                    )}
                                                  />
                                                </FormItemWrapper>
                                                <AntdButton
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.button__lI3Ym
                                                  )}
                                                  submitsForm={"boolean"}
                                                  type={"primary"}
                                                >
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__tnr2A
                                                    )}
                                                  >
                                                    {"Submit"}
                                                  </div>
                                                </AntdButton>
                                              </FormWrapper>
                                            );
                                          })()}
                                        </AntdModal>
                                        <AntdModal
                                          data-plasmic-name={
                                            "modalEditPlaceholder"
                                          }
                                          data-plasmic-override={
                                            overrides.modalEditPlaceholder
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.modalEditPlaceholder
                                          )}
                                          defaultStylesClassName={classNames(
                                            projectcss.root_reset,
                                            projectcss.plasmic_default_styles,
                                            projectcss.plasmic_mixins,
                                            projectcss.plasmic_tokens,
                                            plasmic_antd_5_hostless_css.plasmic_tokens,
                                            plasmic_plasmic_rich_components_css.plasmic_tokens
                                          )}
                                          hideFooter={true}
                                          modalScopeClassName={
                                            sty["modalEditPlaceholder__modal"]
                                          }
                                          onOpenChange={generateStateOnChangeProp(
                                            $state,
                                            ["modalEditPlaceholder", "open"]
                                          )}
                                          open={generateStateValueProp($state, [
                                            "modalEditPlaceholder",
                                            "open"
                                          ])}
                                          title={"Modal title"}
                                          trigger={null}
                                        >
                                          {(() => {
                                            const child$Props = {
                                              className: classNames(
                                                "__wab_instance",
                                                sty.formEditPrintifyPlaceholder
                                              ),
                                              extendedOnValuesChange:
                                                generateStateOnChangePropForCodeComponents(
                                                  $state,
                                                  "value",
                                                  [
                                                    "formEditPrintifyPlaceholder",
                                                    "value"
                                                  ],
                                                  FormWrapper_Helpers
                                                ),
                                              formItems: [
                                                {
                                                  label: "Name",
                                                  name: "name",
                                                  inputType: "Text"
                                                },
                                                {
                                                  label: "Message",
                                                  name: "message",
                                                  inputType: "Text Area"
                                                }
                                              ],
                                              labelCol: {
                                                span: 8,
                                                horizontalOnly: true
                                              },
                                              layout: "vertical",
                                              mode: "advanced",
                                              onFinish: async values => {
                                                const $steps = {};

                                                $steps["defaultSubmit"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        dataOp: {
                                                          sourceId:
                                                            "83X9ZdYzYUYJtgqe5fwXeX",
                                                          opId: "127a8d6d-8f8e-4466-82a3-391a622fc5af",
                                                          userArgs: {
                                                            conditions: [
                                                              $state.selectedPlaceholder
                                                            ],
                                                            variables: [
                                                              $state
                                                                .formEditPrintifyPlaceholder
                                                                .value.rotate,
                                                              $state
                                                                .formEditPrintifyPlaceholder
                                                                .value.scale,
                                                              $state
                                                                .formEditPrintifyPlaceholder
                                                                .value.x,
                                                              $state
                                                                .formEditPrintifyPlaceholder
                                                                .value.y,
                                                              $state
                                                                .formEditPrintifyPlaceholder
                                                                .value[
                                                                "Printify Product ID"
                                                              ],
                                                              $state
                                                                .formEditPrintifyPlaceholder
                                                                .value.position,
                                                              $state
                                                                .formEditPrintifyPlaceholder
                                                                .value.image_id
                                                            ]
                                                          },
                                                          cacheKey: null,
                                                          invalidatedKeys: [
                                                            "plasmic_refresh_all"
                                                          ],
                                                          roleId: null
                                                        }
                                                      };
                                                      return (async ({
                                                        dataOp,
                                                        continueOnError
                                                      }) => {
                                                        try {
                                                          const response =
                                                            await executePlasmicDataOp(
                                                              dataOp,
                                                              {
                                                                userAuthToken:
                                                                  dataSourcesCtx?.userAuthToken,
                                                                user: dataSourcesCtx?.user
                                                              }
                                                            );
                                                          await plasmicInvalidate(
                                                            dataOp.invalidatedKeys
                                                          );
                                                          return response;
                                                        } catch (e) {
                                                          if (
                                                            !continueOnError
                                                          ) {
                                                            throw e;
                                                          }
                                                          return e;
                                                        }
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps["defaultSubmit"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "defaultSubmit"
                                                  ] === "object" &&
                                                  typeof $steps["defaultSubmit"]
                                                    .then === "function"
                                                ) {
                                                  $steps["defaultSubmit"] =
                                                    await $steps[
                                                      "defaultSubmit"
                                                    ];
                                                }

                                                $steps[
                                                  "updateModalEditPlaceholderOpen"
                                                ] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        variable: {
                                                          objRoot: $state,
                                                          variablePath: [
                                                            "modalEditPlaceholder",
                                                            "open"
                                                          ]
                                                        },
                                                        operation: 0,
                                                        value: false
                                                      };
                                                      return (({
                                                        variable,
                                                        value,
                                                        startIndex,
                                                        deleteCount
                                                      }) => {
                                                        if (!variable) {
                                                          return;
                                                        }
                                                        const {
                                                          objRoot,
                                                          variablePath
                                                        } = variable;

                                                        $stateSet(
                                                          objRoot,
                                                          variablePath,
                                                          value
                                                        );
                                                        return value;
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps[
                                                    "updateModalEditPlaceholderOpen"
                                                  ] != null &&
                                                  typeof $steps[
                                                    "updateModalEditPlaceholderOpen"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "updateModalEditPlaceholderOpen"
                                                  ].then === "function"
                                                ) {
                                                  $steps[
                                                    "updateModalEditPlaceholderOpen"
                                                  ] = await $steps[
                                                    "updateModalEditPlaceholderOpen"
                                                  ];
                                                }

                                                $steps["invokeGlobalAction"] =
                                                  true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          args: [
                                                            "success",
                                                            "Placeholder updated"
                                                          ]
                                                        };
                                                        return $globalActions[
                                                          "plasmic-antd5-config-provider.showNotification"
                                                        ]?.apply(null, [
                                                          ...actionArgs.args
                                                        ]);
                                                      })()
                                                    : undefined;
                                                if (
                                                  $steps[
                                                    "invokeGlobalAction"
                                                  ] != null &&
                                                  typeof $steps[
                                                    "invokeGlobalAction"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "invokeGlobalAction"
                                                  ].then === "function"
                                                ) {
                                                  $steps["invokeGlobalAction"] =
                                                    await $steps[
                                                      "invokeGlobalAction"
                                                    ];
                                                }
                                              },
                                              onIsSubmittingChange:
                                                generateStateOnChangePropForCodeComponents(
                                                  $state,
                                                  "isSubmitting",
                                                  [
                                                    "formEditPrintifyPlaceholder",
                                                    "isSubmitting"
                                                  ],
                                                  FormWrapper_Helpers
                                                ),
                                              ref: ref => {
                                                $refs[
                                                  "formEditPrintifyPlaceholder"
                                                ] = ref;
                                              },
                                              submitSlot: null,
                                              wrapperCol: {
                                                span: 16,
                                                horizontalOnly: true
                                              }
                                            };
                                            initializeCodeComponentStates(
                                              $state,
                                              [
                                                {
                                                  name: "value",
                                                  plasmicStateName:
                                                    "formEditPrintifyPlaceholder.value"
                                                },
                                                {
                                                  name: "isSubmitting",
                                                  plasmicStateName:
                                                    "formEditPrintifyPlaceholder.isSubmitting"
                                                }
                                              ],
                                              [],
                                              FormWrapper_Helpers ?? {},
                                              child$Props
                                            );

                                            return (
                                              <FormWrapper
                                                data-plasmic-name={
                                                  "formEditPrintifyPlaceholder"
                                                }
                                                data-plasmic-override={
                                                  overrides.formEditPrintifyPlaceholder
                                                }
                                                {...child$Props}
                                              >
                                                <FormItemWrapper
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.formField__vwzLe
                                                  )}
                                                  hidden={true}
                                                  initialValue={10}
                                                  label={"id"}
                                                  name={"id"}
                                                >
                                                  <AntdInputNumber
                                                    data-plasmic-name={
                                                      "numberInput19"
                                                    }
                                                    data-plasmic-override={
                                                      overrides.numberInput19
                                                    }
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.numberInput19
                                                    )}
                                                    onChange={generateStateOnChangeProp(
                                                      $state,
                                                      ["numberInput19", "value"]
                                                    )}
                                                    type={"number"}
                                                    value={generateStateValueProp(
                                                      $state,
                                                      ["numberInput19", "value"]
                                                    )}
                                                  />
                                                </FormItemWrapper>
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.freeBox__qJpfA
                                                  )}
                                                >
                                                  <FormItemWrapper
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.formField__vnNrC
                                                    )}
                                                    initialValue={1}
                                                    label={"scale"}
                                                    name={"scale"}
                                                    rules={[
                                                      { ruleType: "required" }
                                                    ]}
                                                  >
                                                    <AntdInputNumber
                                                      data-plasmic-name={
                                                        "numberInput20"
                                                      }
                                                      data-plasmic-override={
                                                        overrides.numberInput20
                                                      }
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.numberInput20
                                                      )}
                                                      onChange={generateStateOnChangeProp(
                                                        $state,
                                                        [
                                                          "numberInput20",
                                                          "value"
                                                        ]
                                                      )}
                                                      type={"number"}
                                                      value={generateStateValueProp(
                                                        $state,
                                                        [
                                                          "numberInput20",
                                                          "value"
                                                        ]
                                                      )}
                                                    />
                                                  </FormItemWrapper>
                                                  <FormItemWrapper
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.formField___4Vxk9
                                                    )}
                                                    initialValue={0.5}
                                                    label={"x"}
                                                    name={"x"}
                                                    rules={[
                                                      { ruleType: "required" },

                                                      {
                                                        ruleType: "advanced",
                                                        custom: (
                                                          rule,
                                                          value
                                                        ) => {
                                                          return {
                                                            min: 0,
                                                            max: 2
                                                          };
                                                        }
                                                      }
                                                    ]}
                                                  >
                                                    <AntdInputNumber
                                                      data-plasmic-name={
                                                        "numberInput22"
                                                      }
                                                      data-plasmic-override={
                                                        overrides.numberInput22
                                                      }
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.numberInput22
                                                      )}
                                                      onChange={generateStateOnChangeProp(
                                                        $state,
                                                        [
                                                          "numberInput22",
                                                          "value"
                                                        ]
                                                      )}
                                                      type={"number"}
                                                      value={generateStateValueProp(
                                                        $state,
                                                        [
                                                          "numberInput22",
                                                          "value"
                                                        ]
                                                      )}
                                                    />
                                                  </FormItemWrapper>
                                                  <FormItemWrapper
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.formField__lAD
                                                    )}
                                                    initialValue={0.5}
                                                    label={"y"}
                                                    name={"y"}
                                                    rules={[
                                                      { ruleType: "required" },

                                                      {
                                                        ruleType: "advanced",
                                                        custom: (
                                                          rule,
                                                          value
                                                        ) => {
                                                          return {
                                                            min: 0,
                                                            max: 2
                                                          };
                                                        }
                                                      }
                                                    ]}
                                                  >
                                                    <AntdInputNumber
                                                      data-plasmic-name={
                                                        "numberInput23"
                                                      }
                                                      data-plasmic-override={
                                                        overrides.numberInput23
                                                      }
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.numberInput23
                                                      )}
                                                      onChange={generateStateOnChangeProp(
                                                        $state,
                                                        [
                                                          "numberInput23",
                                                          "value"
                                                        ]
                                                      )}
                                                      type={"number"}
                                                      value={generateStateValueProp(
                                                        $state,
                                                        [
                                                          "numberInput23",
                                                          "value"
                                                        ]
                                                      )}
                                                    />
                                                  </FormItemWrapper>
                                                  <FormItemWrapper
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.formField__ucOHz
                                                    )}
                                                    initialValue={0}
                                                    label={"rotate"}
                                                    name={"rotate"}
                                                    rules={[
                                                      { ruleType: "required" },

                                                      {
                                                        ruleType: "advanced",
                                                        custom: (
                                                          rule,
                                                          value
                                                        ) => {
                                                          return {
                                                            min: 0,
                                                            max: 360
                                                          };
                                                        }
                                                      }
                                                    ]}
                                                  >
                                                    <AntdInputNumber
                                                      data-plasmic-name={
                                                        "numberInput24"
                                                      }
                                                      data-plasmic-override={
                                                        overrides.numberInput24
                                                      }
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.numberInput24
                                                      )}
                                                      onChange={generateStateOnChangeProp(
                                                        $state,
                                                        [
                                                          "numberInput24",
                                                          "value"
                                                        ]
                                                      )}
                                                      type={"number"}
                                                      value={generateStateValueProp(
                                                        $state,
                                                        [
                                                          "numberInput24",
                                                          "value"
                                                        ]
                                                      )}
                                                    />
                                                  </FormItemWrapper>
                                                </div>
                                                <FormItemWrapper
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.formField__kwYnt
                                                  )}
                                                  hidden={true}
                                                  initialValue={(() => {
                                                    try {
                                                      return parseInt(
                                                        $state.selectedProduct
                                                          .id
                                                      );
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  label={"Printify Product ID"}
                                                  name={"Printify Product ID"}
                                                  preserve={false}
                                                  rules={[
                                                    { ruleType: "required" }
                                                  ]}
                                                >
                                                  <AntdInputNumber
                                                    data-plasmic-name={
                                                      "numberInput21"
                                                    }
                                                    data-plasmic-override={
                                                      overrides.numberInput21
                                                    }
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.numberInput21
                                                    )}
                                                    onChange={generateStateOnChangeProp(
                                                      $state,
                                                      ["numberInput21", "value"]
                                                    )}
                                                    type={"number"}
                                                    value={generateStateValueProp(
                                                      $state,
                                                      ["numberInput21", "value"]
                                                    )}
                                                  />
                                                </FormItemWrapper>
                                                <FormItemWrapper
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.formField__npsrc
                                                  )}
                                                  hidden={true}
                                                  initialValue={
                                                    "2024-08-12T21:33:15.955Z"
                                                  }
                                                  label={"created_at"}
                                                  name={"created_at"}
                                                >
                                                  {(() => {
                                                    const child$Props = {
                                                      className: classNames(
                                                        "__wab_instance",
                                                        sty.input9
                                                      ),
                                                      onChange:
                                                        generateStateOnChangePropForCodeComponents(
                                                          $state,
                                                          "value",
                                                          ["input9", "value"],
                                                          AntdInput_Helpers
                                                        ),
                                                      value:
                                                        generateStateValueProp(
                                                          $state,
                                                          ["input9", "value"]
                                                        )
                                                    };
                                                    initializeCodeComponentStates(
                                                      $state,
                                                      [
                                                        {
                                                          name: "value",
                                                          plasmicStateName:
                                                            "input9.value"
                                                        }
                                                      ],
                                                      [],
                                                      AntdInput_Helpers ?? {},
                                                      child$Props
                                                    );

                                                    return (
                                                      <AntdInput
                                                        data-plasmic-name={
                                                          "input9"
                                                        }
                                                        data-plasmic-override={
                                                          overrides.input9
                                                        }
                                                        {...child$Props}
                                                      />
                                                    );
                                                  })()}
                                                </FormItemWrapper>
                                                <FormItemWrapper
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.formField___8PRKv
                                                  )}
                                                  label={"position"}
                                                  name={"position"}
                                                  preserve={false}
                                                  rules={[
                                                    { ruleType: "required" }
                                                  ]}
                                                >
                                                  <AntdSelect
                                                    data-plasmic-name={
                                                      "select6"
                                                    }
                                                    data-plasmic-override={
                                                      overrides.select6
                                                    }
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.select6
                                                    )}
                                                    defaultStylesClassName={classNames(
                                                      projectcss.root_reset,
                                                      projectcss.plasmic_default_styles,
                                                      projectcss.plasmic_mixins,
                                                      projectcss.plasmic_tokens,
                                                      plasmic_antd_5_hostless_css.plasmic_tokens,
                                                      plasmic_plasmic_rich_components_css.plasmic_tokens
                                                    )}
                                                    onChange={generateStateOnChangeProp(
                                                      $state,
                                                      ["select6", "value"]
                                                    )}
                                                    options={(() => {
                                                      try {
                                                        return $queries.queryGetPrintifyVariantsByBlueprintandPrintProvider.data.response.variants[0].placeholders.map(
                                                          ({ position }) => ({
                                                            label: position,
                                                            value: position
                                                          })
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    placeholder={"Select..."}
                                                    popupScopeClassName={
                                                      sty["select6__popup"]
                                                    }
                                                    value={generateStateValueProp(
                                                      $state,
                                                      ["select6", "value"]
                                                    )}
                                                  />
                                                </FormItemWrapper>
                                                <FormItemWrapper
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.formField__oSgJ
                                                  )}
                                                  initialValue={"design"}
                                                  label={"image_id"}
                                                  name={"image_id"}
                                                  preserve={false}
                                                  rules={[
                                                    { ruleType: "required" }
                                                  ]}
                                                >
                                                  <AntdSelect
                                                    data-plasmic-name={
                                                      "select7"
                                                    }
                                                    data-plasmic-override={
                                                      overrides.select7
                                                    }
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.select7
                                                    )}
                                                    defaultStylesClassName={classNames(
                                                      projectcss.root_reset,
                                                      projectcss.plasmic_default_styles,
                                                      projectcss.plasmic_mixins,
                                                      projectcss.plasmic_tokens,
                                                      plasmic_antd_5_hostless_css.plasmic_tokens,
                                                      plasmic_plasmic_rich_components_css.plasmic_tokens
                                                    )}
                                                    onChange={generateStateOnChangeProp(
                                                      $state,
                                                      ["select7", "value"]
                                                    )}
                                                    options={(() => {
                                                      const __composite = [
                                                        {
                                                          type: "option",
                                                          label: null,
                                                          value: null
                                                        },
                                                        {
                                                          type: "option",
                                                          label: null,
                                                          value: null
                                                        }
                                                      ];
                                                      __composite["0"][
                                                        "label"
                                                      ] = "design";
                                                      __composite["0"][
                                                        "value"
                                                      ] = "design";
                                                      __composite["1"][
                                                        "label"
                                                      ] = "logo";
                                                      __composite["1"][
                                                        "value"
                                                      ] = "logo";
                                                      return __composite;
                                                    })()}
                                                    placeholder={"Select..."}
                                                    popupScopeClassName={
                                                      sty["select7__popup"]
                                                    }
                                                    value={generateStateValueProp(
                                                      $state,
                                                      ["select7", "value"]
                                                    )}
                                                  />
                                                </FormItemWrapper>
                                                <AntdButton
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.button__yYvx
                                                  )}
                                                  submitsForm={true}
                                                  type={"primary"}
                                                >
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text___98VcE
                                                    )}
                                                  >
                                                    {"Submit"}
                                                  </div>
                                                </AntdButton>
                                              </FormWrapper>
                                            );
                                          })()}
                                        </AntdModal>
                                        {(() => {
                                          const child$Props = {
                                            className: classNames(
                                              "__wab_instance",
                                              sty.tablePrintifyPlaceholders
                                            ),
                                            data: (() => {
                                              try {
                                                return $queries.getSupPrintifyPlaceholders;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })(),
                                            fields: (() => {
                                              const __composite = [
                                                { key: "id", fieldId: "id" },
                                                {
                                                  key: "scale",
                                                  fieldId: "scale"
                                                },
                                                {
                                                  key: "Printify Product ID",
                                                  fieldId:
                                                    "Printify Product ID",
                                                  isHidden: null
                                                },
                                                { key: "x", fieldId: "x" },
                                                { key: "y", fieldId: "y" },
                                                {
                                                  key: "rotate",
                                                  fieldId: "rotate"
                                                },
                                                {
                                                  key: "created_at",
                                                  fieldId: "created_at",
                                                  isHidden: null
                                                },
                                                {
                                                  key: "position",
                                                  fieldId: "position"
                                                },
                                                {
                                                  key: "image_id",
                                                  fieldId: "image_id"
                                                },
                                                {
                                                  key: "printful_product_id",
                                                  fieldId:
                                                    "printful_product_id",
                                                  isHidden: null
                                                }
                                              ];
                                              __composite["2"]["isHidden"] =
                                                true;
                                              __composite["6"]["isHidden"] =
                                                false;
                                              __composite["9"]["isHidden"] =
                                                true;
                                              return __composite;
                                            })(),

                                            hideColumnPicker: true,
                                            hideDensity: false,
                                            hideExports: true,
                                            hideSearch: true,
                                            onRowSelectionChanged: async (
                                              ...eventArgs: any
                                            ) => {
                                              generateStateOnChangePropForCodeComponents(
                                                $state,
                                                "selectedRowKey",
                                                [
                                                  "tablePrintifyPlaceholders",
                                                  "selectedRowKey"
                                                ],
                                                RichTable_Helpers
                                              ).apply(null, eventArgs);
                                              generateStateOnChangePropForCodeComponents(
                                                $state,
                                                "selectedRow",
                                                [
                                                  "tablePrintifyPlaceholders",
                                                  "selectedRow"
                                                ],
                                                RichTable_Helpers
                                              ).apply(null, eventArgs);
                                              generateStateOnChangePropForCodeComponents(
                                                $state,
                                                "selectedRows",
                                                [
                                                  "tablePrintifyPlaceholders",
                                                  "selectedRows"
                                                ],
                                                RichTable_Helpers
                                              ).apply(null, eventArgs);
                                              generateStateOnChangePropForCodeComponents(
                                                $state,
                                                "selectedRowKeys",
                                                [
                                                  "tablePrintifyPlaceholders",
                                                  "selectedRowKeys"
                                                ],
                                                RichTable_Helpers
                                              ).apply(null, eventArgs);
                                            },
                                            pagination: false,
                                            rowActions: (() => {
                                              const __composite = [
                                                {
                                                  type: "item",
                                                  label: null,
                                                  onClick: null
                                                },
                                                {
                                                  type: "item",
                                                  label: null,
                                                  onClick: null
                                                }
                                              ];
                                              __composite["0"]["label"] =
                                                "Edit";
                                              __composite["0"]["onClick"] =
                                                async (rowKey, row) => {
                                                  const $steps = {};

                                                  $steps[
                                                    "updateSelectedPlaceholder"
                                                  ] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "selectedPlaceholder"
                                                            ]
                                                          },
                                                          operation: 0,
                                                          value: row.id
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps[
                                                      "updateSelectedPlaceholder"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "updateSelectedPlaceholder"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "updateSelectedPlaceholder"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "updateSelectedPlaceholder"
                                                    ] = await $steps[
                                                      "updateSelectedPlaceholder"
                                                    ];
                                                  }

                                                  $steps[
                                                    "updateModalNewPlaceholderOpen"
                                                  ] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "modalEditPlaceholder",
                                                              "open"
                                                            ]
                                                          },
                                                          operation: 0,
                                                          value: true
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps[
                                                      "updateModalNewPlaceholderOpen"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "updateModalNewPlaceholderOpen"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "updateModalNewPlaceholderOpen"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "updateModalNewPlaceholderOpen"
                                                    ] = await $steps[
                                                      "updateModalNewPlaceholderOpen"
                                                    ];
                                                  }
                                                };
                                              __composite["1"]["label"] =
                                                "Delete";
                                              __composite["1"]["onClick"] =
                                                async (rowKey, row) => {
                                                  const $steps = {};

                                                  $steps["postgresDeleteMany"] =
                                                    true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            dataOp: {
                                                              sourceId:
                                                                "83X9ZdYzYUYJtgqe5fwXeX",
                                                              opId: "e545d701-182e-4531-8d95-9190ea251b3f",
                                                              userArgs: {
                                                                conditions: [
                                                                  row.id
                                                                ]
                                                              },
                                                              cacheKey: null,
                                                              invalidatedKeys: [
                                                                "plasmic_refresh_all"
                                                              ],
                                                              roleId: null
                                                            }
                                                          };
                                                          return (async ({
                                                            dataOp,
                                                            continueOnError
                                                          }) => {
                                                            try {
                                                              const response =
                                                                await executePlasmicDataOp(
                                                                  dataOp,
                                                                  {
                                                                    userAuthToken:
                                                                      dataSourcesCtx?.userAuthToken,
                                                                    user: dataSourcesCtx?.user
                                                                  }
                                                                );
                                                              await plasmicInvalidate(
                                                                dataOp.invalidatedKeys
                                                              );
                                                              return response;
                                                            } catch (e) {
                                                              if (
                                                                !continueOnError
                                                              ) {
                                                                throw e;
                                                              }
                                                              return e;
                                                            }
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps[
                                                      "postgresDeleteMany"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "postgresDeleteMany"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "postgresDeleteMany"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "postgresDeleteMany"
                                                    ] = await $steps[
                                                      "postgresDeleteMany"
                                                    ];
                                                  }

                                                  $steps["invokeGlobalAction"] =
                                                    true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            args: [
                                                              "warning",
                                                              "Placeholder deleted"
                                                            ]
                                                          };
                                                          return $globalActions[
                                                            "plasmic-antd5-config-provider.showNotification"
                                                          ]?.apply(null, [
                                                            ...actionArgs.args
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps[
                                                      "invokeGlobalAction"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "invokeGlobalAction"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "invokeGlobalAction"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "invokeGlobalAction"
                                                    ] = await $steps[
                                                      "invokeGlobalAction"
                                                    ];
                                                  }
                                                };
                                              return __composite;
                                            })(),

                                            scopeClassName:
                                              sty[
                                                "tablePrintifyPlaceholders__instance"
                                              ],
                                            selectedRowKey:
                                              generateStateValueProp($state, [
                                                "tablePrintifyPlaceholders",
                                                "selectedRowKey"
                                              ]),
                                            selectedRowKeys:
                                              generateStateValueProp($state, [
                                                "tablePrintifyPlaceholders",
                                                "selectedRowKeys"
                                              ]),
                                            themeResetClassName: classNames(
                                              projectcss.root_reset,
                                              projectcss.root_reset_tags,
                                              projectcss.plasmic_default_styles,
                                              projectcss.plasmic_mixins,
                                              projectcss.plasmic_tokens,
                                              plasmic_antd_5_hostless_css.plasmic_tokens,
                                              plasmic_plasmic_rich_components_css.plasmic_tokens
                                            )
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "selectedRowKey",
                                                plasmicStateName:
                                                  "tablePrintifyPlaceholders.selectedRowKey"
                                              },
                                              {
                                                name: "selectedRow",
                                                plasmicStateName:
                                                  "tablePrintifyPlaceholders.selectedRow"
                                              },
                                              {
                                                name: "selectedRows",
                                                plasmicStateName:
                                                  "tablePrintifyPlaceholders.selectedRows"
                                              },
                                              {
                                                name: "selectedRowKeys",
                                                plasmicStateName:
                                                  "tablePrintifyPlaceholders.selectedRowKeys"
                                              }
                                            ],
                                            [],
                                            RichTable_Helpers ?? {},
                                            child$Props
                                          );

                                          return (
                                            <RichTable
                                              data-plasmic-name={
                                                "tablePrintifyPlaceholders"
                                              }
                                              data-plasmic-override={
                                                overrides.tablePrintifyPlaceholders
                                              }
                                              {...child$Props}
                                            />
                                          );
                                        })()}
                                      </AntdTabItem>
                                    </React.Fragment>
                                  }
                                  onChange={generateStateOnChangeProp($state, [
                                    "tabs2",
                                    "activeKey"
                                  ])}
                                  sticky={false}
                                  tabBarBackground={"#FFF"}
                                  tabsDropdownScopeClassName={
                                    sty["tabs2__tabsDropdown"]
                                  }
                                  tabsScopeClassName={sty["tabs2__tabs"]}
                                />
                              </div>
                            </AntdModal>
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__rF9RU
                              )}
                            >
                              <div
                                data-plasmic-name={"search"}
                                data-plasmic-override={overrides.search}
                                className={classNames(
                                  projectcss.all,
                                  sty.search
                                )}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.form2
                                    ),
                                    extendedOnValuesChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["form2", "value"],
                                        FormWrapper_Helpers
                                      ),
                                    formItems: [
                                      {
                                        label: "Name",
                                        name: "name",
                                        inputType: "Text"
                                      },
                                      {
                                        label: "Message",
                                        name: "message",
                                        inputType: "Text Area"
                                      }
                                    ],
                                    labelCol: { span: 8, horizontalOnly: true },
                                    layout: "vertical",
                                    mode: "advanced",
                                    onFinish: async values => {
                                      const $steps = {};

                                      $steps["updateVariable5"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["search2"]
                                              },
                                              operation: 0,
                                              value:
                                                $state.form2.value.search
                                                  .charAt(0)
                                                  .toUpperCase() +
                                                $state.form2.value.search.slice(
                                                  1
                                                )
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateVariable5"] != null &&
                                        typeof $steps["updateVariable5"] ===
                                          "object" &&
                                        typeof $steps["updateVariable5"]
                                          .then === "function"
                                      ) {
                                        $steps["updateVariable5"] =
                                          await $steps["updateVariable5"];
                                      }
                                    },
                                    onIsSubmittingChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "isSubmitting",
                                        ["form2", "isSubmitting"],
                                        FormWrapper_Helpers
                                      ),
                                    ref: ref => {
                                      $refs["form2"] = ref;
                                    },
                                    submitSlot: null,
                                    wrapperCol: {
                                      span: 16,
                                      horizontalOnly: true
                                    }
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "form2.value"
                                      },
                                      {
                                        name: "isSubmitting",
                                        plasmicStateName: "form2.isSubmitting"
                                      }
                                    ],
                                    [],
                                    FormWrapper_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <FormWrapper
                                      data-plasmic-name={"form2"}
                                      data-plasmic-override={overrides.form2}
                                      {...child$Props}
                                    >
                                      <FormItemWrapper
                                        className={classNames(
                                          "__wab_instance",
                                          sty.formField__x1Dk2
                                        )}
                                        initialValue={``}
                                        label={null}
                                        name={"search"}
                                      >
                                        {(() => {
                                          const child$Props = {
                                            className: classNames(
                                              "__wab_instance",
                                              sty.input12
                                            ),
                                            onChange:
                                              generateStateOnChangePropForCodeComponents(
                                                $state,
                                                "value",
                                                ["input12", "value"],
                                                AntdInput_Helpers
                                              ),
                                            value: generateStateValueProp(
                                              $state,
                                              ["input12", "value"]
                                            )
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "value",
                                                plasmicStateName:
                                                  "input12.value"
                                              }
                                            ],
                                            [],
                                            AntdInput_Helpers ?? {},
                                            child$Props
                                          );

                                          return (
                                            <AntdInput
                                              data-plasmic-name={"input12"}
                                              data-plasmic-override={
                                                overrides.input12
                                              }
                                              {...child$Props}
                                            />
                                          );
                                        })()}
                                      </FormItemWrapper>
                                      <FormItemWrapper
                                        className={classNames(
                                          "__wab_instance",
                                          sty.formField__vtO7D
                                        )}
                                        label={"Message"}
                                        name={"message"}
                                      >
                                        {(() => {
                                          const child$Props = {
                                            className: classNames(
                                              "__wab_instance",
                                              sty.textArea
                                            ),
                                            onChange:
                                              generateStateOnChangePropForCodeComponents(
                                                $state,
                                                "value",
                                                ["textArea", "value"],
                                                AntdTextArea_Helpers
                                              ),
                                            value: generateStateValueProp(
                                              $state,
                                              ["textArea", "value"]
                                            )
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "value",
                                                plasmicStateName:
                                                  "textArea.value"
                                              }
                                            ],
                                            [],
                                            AntdTextArea_Helpers ?? {},
                                            child$Props
                                          );

                                          return (
                                            <AntdTextArea
                                              data-plasmic-name={"textArea"}
                                              data-plasmic-override={
                                                overrides.textArea
                                              }
                                              {...child$Props}
                                            />
                                          );
                                        })()}
                                      </FormItemWrapper>
                                      <AntdButton
                                        className={classNames(
                                          "__wab_instance",
                                          sty.button__jcw2E
                                        )}
                                        submitsForm={true}
                                        type={"primary"}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__wMpbz
                                          )}
                                        >
                                          {"Search"}
                                        </div>
                                      </AntdButton>
                                    </FormWrapper>
                                  );
                                })()}
                              </div>
                              <div
                                data-plasmic-name={"tableHead2"}
                                data-plasmic-override={overrides.tableHead2}
                                className={classNames(
                                  projectcss.all,
                                  sty.tableHead2
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__fgMcn
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__iQ20
                                    )}
                                  >
                                    {"validations"}
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__b44Qf
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__vXpuN
                                    )}
                                  >
                                    {"id"}
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__h4Zzk
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__fReH
                                    )}
                                  >
                                    {"title"}
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__vrTf8
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__ghlsB
                                    )}
                                  >
                                    {"Print_provider"}
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___7E9O5
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__mt1Ht
                                    )}
                                  >
                                    {"tags"}
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__q94RE
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__ukUkW
                                    )}
                                  >
                                    {"blueprints_id"}
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__kvmMu
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___0Io1P
                                    )}
                                  >
                                    {"actions"}
                                  </div>
                                </div>
                              </div>
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $queries.getSupPrintifyProducts.data;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                const currentItem = __plasmic_item_0;
                                const currentIndex = __plasmic_idx_0;
                                return (
                                  <Stack__
                                    as={"div"}
                                    data-plasmic-name={"tableBody"}
                                    data-plasmic-override={overrides.tableBody}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.tableBody
                                    )}
                                    key={currentIndex}
                                  >
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__e3LPr
                                      )}
                                    >
                                      {(() => {
                                        try {
                                          return currentItem.print_provider ===
                                            null
                                            ? true
                                            : undefined;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__rgxVi
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__l59Bz
                                            )}
                                          >
                                            {"no print provider"}
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return $queries.totalPrintifyPlaceholder.data.filter(
                                            row =>
                                              row["Printify Product ID"] ===
                                              currentItem.id
                                          ).length === 0
                                            ? true
                                            : undefined;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox___3QAen
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___7ZvwX
                                            )}
                                          >
                                            {"no printify placeholder"}
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return $queries.totalPrintifyProductVariant.data.filter(
                                            row =>
                                              row["printify_product_id"] ===
                                              currentItem.id
                                          ).length === 0
                                            ? true
                                            : undefined;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__bhVXg
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__nEbap
                                            )}
                                          >
                                            {"no printify variant"}
                                          </div>
                                        </div>
                                      ) : null}
                                    </Stack__>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__nDeHg
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__cf2Hl
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__rSo9Q
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.id;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "id";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__yoaZt
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__n5Iy6
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.title;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "title";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__jgf0U
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__dDrM
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.print_provider;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "Print_provider";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__a54Oy
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__duBDj
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.tags;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "tags";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__uhInn
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__vsH85
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.blueprint_id;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "blueprints_id";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                      <Stack__
                                        as={"div"}
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__tj8K0
                                        )}
                                      >
                                        <AntdButton
                                          className={classNames(
                                            "__wab_instance",
                                            sty.button__ocEtf
                                          )}
                                          onClick={async () => {
                                            const $steps = {};

                                            $steps["updateSelectedProduct"] =
                                              true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "selectedProduct"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: currentItem
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                            if (
                                              $steps["updateSelectedProduct"] !=
                                                null &&
                                              typeof $steps[
                                                "updateSelectedProduct"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateSelectedProduct"
                                              ].then === "function"
                                            ) {
                                              $steps["updateSelectedProduct"] =
                                                await $steps[
                                                  "updateSelectedProduct"
                                                ];
                                            }

                                            $steps["refreshData"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    queryInvalidation: [
                                                      "221445e4-deb2-4d71-9956-3d6e7314b8da"
                                                    ]
                                                  };
                                                  return (async ({
                                                    queryInvalidation
                                                  }) => {
                                                    if (!queryInvalidation) {
                                                      return;
                                                    }
                                                    await plasmicInvalidate(
                                                      queryInvalidation
                                                    );
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["refreshData"] != null &&
                                              typeof $steps["refreshData"] ===
                                                "object" &&
                                              typeof $steps["refreshData"]
                                                .then === "function"
                                            ) {
                                              $steps["refreshData"] =
                                                await $steps["refreshData"];
                                            }

                                            $steps[
                                              "runActionOnFormEditPrintifyProduct"
                                            ] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    tplRef:
                                                      "formEditPrintifyProduct",
                                                    action: "resetFields"
                                                  };
                                                  return (({
                                                    tplRef,
                                                    action,
                                                    args
                                                  }) => {
                                                    return $refs?.[tplRef]?.[
                                                      action
                                                    ]?.(...(args ?? []));
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps[
                                                "runActionOnFormEditPrintifyProduct"
                                              ] != null &&
                                              typeof $steps[
                                                "runActionOnFormEditPrintifyProduct"
                                              ] === "object" &&
                                              typeof $steps[
                                                "runActionOnFormEditPrintifyProduct"
                                              ].then === "function"
                                            ) {
                                              $steps[
                                                "runActionOnFormEditPrintifyProduct"
                                              ] = await $steps[
                                                "runActionOnFormEditPrintifyProduct"
                                              ];
                                            }

                                            $steps["updateTabs2ActiveKey"] =
                                              true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "tabs2",
                                                          "activeKey"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: "1"
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                            if (
                                              $steps["updateTabs2ActiveKey"] !=
                                                null &&
                                              typeof $steps[
                                                "updateTabs2ActiveKey"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateTabs2ActiveKey"
                                              ].then === "function"
                                            ) {
                                              $steps["updateTabs2ActiveKey"] =
                                                await $steps[
                                                  "updateTabs2ActiveKey"
                                                ];
                                            }

                                            $steps[
                                              "updateModalEditPrintifyProductOpen"
                                            ] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "modalEditPrintifyProduct",
                                                        "open"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: true
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps[
                                                "updateModalEditPrintifyProductOpen"
                                              ] != null &&
                                              typeof $steps[
                                                "updateModalEditPrintifyProductOpen"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateModalEditPrintifyProductOpen"
                                              ].then === "function"
                                            ) {
                                              $steps[
                                                "updateModalEditPrintifyProductOpen"
                                              ] = await $steps[
                                                "updateModalEditPrintifyProductOpen"
                                              ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___0FnH9
                                            )}
                                          >
                                            {"Edit"}
                                          </div>
                                        </AntdButton>
                                        <AntdButton
                                          className={classNames(
                                            "__wab_instance",
                                            sty.button__hFjW
                                          )}
                                          onClick={async () => {
                                            const $steps = {};

                                            $steps["postgresDeleteMany"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    dataOp: {
                                                      sourceId:
                                                        "83X9ZdYzYUYJtgqe5fwXeX",
                                                      opId: "0e74a710-6c89-4aa0-8b77-a22d1089e40a",
                                                      userArgs: {
                                                        conditions: [
                                                          currentItem.id
                                                        ]
                                                      },
                                                      cacheKey: null,
                                                      invalidatedKeys: [
                                                        "plasmic_refresh_all"
                                                      ],
                                                      roleId: null
                                                    }
                                                  };
                                                  return (async ({
                                                    dataOp,
                                                    continueOnError
                                                  }) => {
                                                    try {
                                                      const response =
                                                        await executePlasmicDataOp(
                                                          dataOp,
                                                          {
                                                            userAuthToken:
                                                              dataSourcesCtx?.userAuthToken,
                                                            user: dataSourcesCtx?.user
                                                          }
                                                        );
                                                      await plasmicInvalidate(
                                                        dataOp.invalidatedKeys
                                                      );
                                                      return response;
                                                    } catch (e) {
                                                      if (!continueOnError) {
                                                        throw e;
                                                      }
                                                      return e;
                                                    }
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["postgresDeleteMany"] !=
                                                null &&
                                              typeof $steps[
                                                "postgresDeleteMany"
                                              ] === "object" &&
                                              typeof $steps[
                                                "postgresDeleteMany"
                                              ].then === "function"
                                            ) {
                                              $steps["postgresDeleteMany"] =
                                                await $steps[
                                                  "postgresDeleteMany"
                                                ];
                                            }

                                            $steps["invokeGlobalAction"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    args: [
                                                      "warning",
                                                      "Printify product deleted"
                                                    ]
                                                  };
                                                  return $globalActions[
                                                    "plasmic-antd5-config-provider.showNotification"
                                                  ]?.apply(null, [
                                                    ...actionArgs.args
                                                  ]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["invokeGlobalAction"] !=
                                                null &&
                                              typeof $steps[
                                                "invokeGlobalAction"
                                              ] === "object" &&
                                              typeof $steps[
                                                "invokeGlobalAction"
                                              ].then === "function"
                                            ) {
                                              $steps["invokeGlobalAction"] =
                                                await $steps[
                                                  "invokeGlobalAction"
                                                ];
                                            }

                                            $steps["refreshData"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    queryInvalidation: [
                                                      "plasmic_refresh_all"
                                                    ]
                                                  };
                                                  return (async ({
                                                    queryInvalidation
                                                  }) => {
                                                    if (!queryInvalidation) {
                                                      return;
                                                    }
                                                    await plasmicInvalidate(
                                                      queryInvalidation
                                                    );
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["refreshData"] != null &&
                                              typeof $steps["refreshData"] ===
                                                "object" &&
                                              typeof $steps["refreshData"]
                                                .then === "function"
                                            ) {
                                              $steps["refreshData"] =
                                                await $steps["refreshData"];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__kxPi8
                                            )}
                                          >
                                            {"delete"}
                                          </div>
                                        </AntdButton>
                                      </Stack__>
                                    </div>
                                  </Stack__>
                                );
                              })}
                            </Stack__>
                          </Stack__>
                        </AntdTabItem>
                        <AntdTabItem
                          className={classNames(
                            "__wab_instance",
                            sty.tabItem__o3CZ
                          )}
                          key={"2"}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__y8YcP
                              )}
                            >
                              {"Printful"}
                            </div>
                          }
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__zg9ZU
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__r3M6T
                              )}
                            >
                              <h2
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.h2__eJzYy
                                )}
                              >
                                {"Products"}
                              </h2>
                              {(() => {
                                try {
                                  return (
                                    $queries.getSupPrintfulProducts.data
                                      .length === 0
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <AntdButton
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__a4WnZ
                                  )}
                                  onClick={async () => {
                                    const $steps = {};

                                    $steps["postgresCreateMany"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            dataOp: {
                                              sourceId:
                                                "83X9ZdYzYUYJtgqe5fwXeX",
                                              opId: "63380e8b-c0f3-4cc1-b695-7666042ec793",
                                              userArgs: {
                                                variables: [
                                                  $queries.queryGetPrintfulProducts.data.response.result
                                                    .filter(i =>
                                                      $queries.getSupRecipeById.data[0].printful_blueprints.includes(
                                                        i.id
                                                      )
                                                    )
                                                    .map(i => ({
                                                      blueprint_id: i.id,
                                                      description:
                                                        i.description,
                                                      title: i.title,
                                                      tags: "",
                                                      email: $state.email,
                                                      recipe_id: $ctx.params.id
                                                    }))
                                                ]
                                              },
                                              cacheKey: null,
                                              invalidatedKeys: [
                                                "80500ca5-ece6-429f-8c72-87c8593bee17"
                                              ],
                                              roleId: null
                                            }
                                          };
                                          return (async ({
                                            dataOp,
                                            continueOnError
                                          }) => {
                                            try {
                                              const response =
                                                await executePlasmicDataOp(
                                                  dataOp,
                                                  {
                                                    userAuthToken:
                                                      dataSourcesCtx?.userAuthToken,
                                                    user: dataSourcesCtx?.user
                                                  }
                                                );
                                              await plasmicInvalidate(
                                                dataOp.invalidatedKeys
                                              );
                                              return response;
                                            } catch (e) {
                                              if (!continueOnError) {
                                                throw e;
                                              }
                                              return e;
                                            }
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["postgresCreateMany"] != null &&
                                      typeof $steps["postgresCreateMany"] ===
                                        "object" &&
                                      typeof $steps["postgresCreateMany"]
                                        .then === "function"
                                    ) {
                                      $steps["postgresCreateMany"] =
                                        await $steps["postgresCreateMany"];
                                    }
                                  }}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__ogpVv
                                    )}
                                  >
                                    {"Populate"}
                                  </div>
                                </AntdButton>
                              ) : null}
                            </div>
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.tablePrintfulProducts
                                ),
                                data: (() => {
                                  try {
                                    return $queries.getSupPrintfulProducts;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                fields: (() => {
                                  const __composite = [
                                    { key: "id", fieldId: "id" },
                                    {
                                      key: "placeholder_ids",
                                      fieldId: "placeholder_ids",
                                      isHidden: null
                                    },
                                    { key: "title", fieldId: "title" },
                                    {
                                      key: "description",
                                      fieldId: "description"
                                    },
                                    {
                                      key: "email",
                                      fieldId: "email",
                                      isHidden: null
                                    },
                                    {
                                      key: "variant_ids",
                                      fieldId: "variant_ids",
                                      isHidden: null
                                    },
                                    {
                                      key: "sync_product_id",
                                      fieldId: "sync_product_id",
                                      isHidden: null
                                    },
                                    { key: "tags", fieldId: "tags" },
                                    {
                                      key: "recipe_id",
                                      fieldId: "recipe_id",
                                      isHidden: null
                                    },
                                    {
                                      key: "blueprint_id",
                                      fieldId: "blueprint_id",
                                      isHidden: null
                                    },
                                    {
                                      key: "created_at",
                                      fieldId: "created_at",
                                      isHidden: null
                                    }
                                  ];
                                  __composite["1"]["isHidden"] = true;
                                  __composite["4"]["isHidden"] = true;
                                  __composite["5"]["isHidden"] = true;
                                  __composite["6"]["isHidden"] = true;
                                  __composite["8"]["isHidden"] = true;
                                  __composite["9"]["isHidden"] = false;
                                  __composite["10"]["isHidden"] = true;
                                  return __composite;
                                })(),

                                hideColumnPicker: true,
                                hideExports: true,
                                hideSearch: false,
                                onRowSelectionChanged: async (
                                  ...eventArgs: any
                                ) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "selectedRowKey",
                                    ["tablePrintfulProducts", "selectedRowKey"],
                                    RichTable_Helpers
                                  ).apply(null, eventArgs);
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "selectedRow",
                                    ["tablePrintfulProducts", "selectedRow"],
                                    RichTable_Helpers
                                  ).apply(null, eventArgs);
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "selectedRows",
                                    ["tablePrintfulProducts", "selectedRows"],
                                    RichTable_Helpers
                                  ).apply(null, eventArgs);
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "selectedRowKeys",
                                    [
                                      "tablePrintfulProducts",
                                      "selectedRowKeys"
                                    ],
                                    RichTable_Helpers
                                  ).apply(null, eventArgs);
                                },
                                rowActions: (() => {
                                  const __composite = [
                                    {
                                      type: "item",
                                      label: null,
                                      onClick: null
                                    },
                                    { type: "item", label: null, onClick: null }
                                  ];
                                  __composite["0"]["label"] = "Edit";
                                  __composite["0"]["onClick"] = async (
                                    rowKey,
                                    row
                                  ) => {
                                    const $steps = {};

                                    $steps["updateSelectedProduct"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["selectedProduct"]
                                            },
                                            operation: 0,
                                            value: row
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateSelectedProduct"] != null &&
                                      typeof $steps["updateSelectedProduct"] ===
                                        "object" &&
                                      typeof $steps["updateSelectedProduct"]
                                        .then === "function"
                                    ) {
                                      $steps["updateSelectedProduct"] =
                                        await $steps["updateSelectedProduct"];
                                    }

                                    $steps[
                                      "updateModalEditPrintfulProductOpen"
                                    ] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "modalEditPrintfulProduct",
                                                "open"
                                              ]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps[
                                        "updateModalEditPrintfulProductOpen"
                                      ] != null &&
                                      typeof $steps[
                                        "updateModalEditPrintfulProductOpen"
                                      ] === "object" &&
                                      typeof $steps[
                                        "updateModalEditPrintfulProductOpen"
                                      ].then === "function"
                                    ) {
                                      $steps[
                                        "updateModalEditPrintfulProductOpen"
                                      ] = await $steps[
                                        "updateModalEditPrintfulProductOpen"
                                      ];
                                    }

                                    $steps[
                                      "runActionOnFormEditPrintifyProduct"
                                    ] = true
                                      ? (() => {
                                          const actionArgs = {
                                            tplRef: "formEditPrintifyProduct",
                                            action: "resetFields"
                                          };
                                          return (({
                                            tplRef,
                                            action,
                                            args
                                          }) => {
                                            return $refs?.[tplRef]?.[action]?.(
                                              ...(args ?? [])
                                            );
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps[
                                        "runActionOnFormEditPrintifyProduct"
                                      ] != null &&
                                      typeof $steps[
                                        "runActionOnFormEditPrintifyProduct"
                                      ] === "object" &&
                                      typeof $steps[
                                        "runActionOnFormEditPrintifyProduct"
                                      ].then === "function"
                                    ) {
                                      $steps[
                                        "runActionOnFormEditPrintifyProduct"
                                      ] = await $steps[
                                        "runActionOnFormEditPrintifyProduct"
                                      ];
                                    }
                                  };
                                  __composite["1"]["label"] = "Delete";
                                  __composite["1"]["onClick"] = async (
                                    rowKey,
                                    row
                                  ) => {
                                    const $steps = {};

                                    $steps["postgresDeleteMany"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            dataOp: {
                                              sourceId:
                                                "83X9ZdYzYUYJtgqe5fwXeX",
                                              opId: "6e5db295-7a47-4e04-be84-3f132dba12a1",
                                              userArgs: {
                                                conditions: [row.id]
                                              },
                                              cacheKey: null,
                                              invalidatedKeys: [
                                                "plasmic_refresh_all"
                                              ],
                                              roleId: null
                                            }
                                          };
                                          return (async ({
                                            dataOp,
                                            continueOnError
                                          }) => {
                                            try {
                                              const response =
                                                await executePlasmicDataOp(
                                                  dataOp,
                                                  {
                                                    userAuthToken:
                                                      dataSourcesCtx?.userAuthToken,
                                                    user: dataSourcesCtx?.user
                                                  }
                                                );
                                              await plasmicInvalidate(
                                                dataOp.invalidatedKeys
                                              );
                                              return response;
                                            } catch (e) {
                                              if (!continueOnError) {
                                                throw e;
                                              }
                                              return e;
                                            }
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["postgresDeleteMany"] != null &&
                                      typeof $steps["postgresDeleteMany"] ===
                                        "object" &&
                                      typeof $steps["postgresDeleteMany"]
                                        .then === "function"
                                    ) {
                                      $steps["postgresDeleteMany"] =
                                        await $steps["postgresDeleteMany"];
                                    }

                                    $steps["invokeGlobalAction"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              "warning",
                                              "Printful product deleted"
                                            ]
                                          };
                                          return $globalActions[
                                            "plasmic-antd5-config-provider.showNotification"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["invokeGlobalAction"] != null &&
                                      typeof $steps["invokeGlobalAction"] ===
                                        "object" &&
                                      typeof $steps["invokeGlobalAction"]
                                        .then === "function"
                                    ) {
                                      $steps["invokeGlobalAction"] =
                                        await $steps["invokeGlobalAction"];
                                    }
                                  };
                                  return __composite;
                                })(),

                                scopeClassName:
                                  sty["tablePrintfulProducts__instance"],
                                selectedRowKey: generateStateValueProp($state, [
                                  "tablePrintfulProducts",
                                  "selectedRowKey"
                                ]),
                                selectedRowKeys: generateStateValueProp(
                                  $state,
                                  ["tablePrintfulProducts", "selectedRowKeys"]
                                ),
                                themeResetClassName: classNames(
                                  projectcss.root_reset,
                                  projectcss.root_reset_tags,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "selectedRowKey",
                                    plasmicStateName:
                                      "tablePrintfulProducts.selectedRowKey"
                                  },
                                  {
                                    name: "selectedRow",
                                    plasmicStateName:
                                      "tablePrintfulProducts.selectedRow"
                                  },
                                  {
                                    name: "selectedRows",
                                    plasmicStateName:
                                      "tablePrintfulProducts.selectedRows"
                                  },
                                  {
                                    name: "selectedRowKeys",
                                    plasmicStateName:
                                      "tablePrintfulProducts.selectedRowKeys"
                                  }
                                ],
                                [],
                                RichTable_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <RichTable
                                  data-plasmic-name={"tablePrintfulProducts"}
                                  data-plasmic-override={
                                    overrides.tablePrintfulProducts
                                  }
                                  {...child$Props}
                                />
                              );
                            })()}
                            <AntdModal
                              data-plasmic-name={"modalEditPrintfulProduct"}
                              data-plasmic-override={
                                overrides.modalEditPrintfulProduct
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.modalEditPrintfulProduct
                              )}
                              defaultStylesClassName={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                              hideFooter={true}
                              modalScopeClassName={
                                sty["modalEditPrintfulProduct__modal"]
                              }
                              onOpenChange={generateStateOnChangeProp($state, [
                                "modalEditPrintfulProduct",
                                "open"
                              ])}
                              open={generateStateValueProp($state, [
                                "modalEditPrintfulProduct",
                                "open"
                              ])}
                              title={
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $state.selectedProduct.title;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Modal title";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              }
                              trigger={null}
                              width={"80%"}
                            >
                              <AntdTabs
                                data-plasmic-name={"tabsEditPrintfulProduct"}
                                data-plasmic-override={
                                  overrides.tabsEditPrintfulProduct
                                }
                                activeKey={generateStateValueProp($state, [
                                  "tabsEditPrintfulProduct",
                                  "activeKey"
                                ])}
                                animateTabBar={true}
                                animateTabContent={false}
                                animated={true}
                                className={classNames(
                                  "__wab_instance",
                                  sty.tabsEditPrintfulProduct
                                )}
                                defaultActiveKey={"1"}
                                items={
                                  <React.Fragment>
                                    <AntdTabItem
                                      className={classNames(
                                        "__wab_instance",
                                        sty.tabItem__smk71
                                      )}
                                      key={"1"}
                                      label={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__erZqh
                                          )}
                                        >
                                          {"Product Info"}
                                        </div>
                                      }
                                    >
                                      {(() => {
                                        const child$Props = {
                                          className: classNames(
                                            "__wab_instance",
                                            sty.formEditPrintfulProduct
                                          ),
                                          extendedOnValuesChange:
                                            generateStateOnChangePropForCodeComponents(
                                              $state,
                                              "value",
                                              [
                                                "formEditPrintfulProduct",
                                                "value"
                                              ],
                                              FormWrapper_Helpers
                                            ),
                                          formItems: [
                                            {
                                              label: "Name",
                                              name: "name",
                                              inputType: "Text"
                                            },
                                            {
                                              label: "Message",
                                              name: "message",
                                              inputType: "Text Area"
                                            }
                                          ],
                                          labelCol: {
                                            span: 8,
                                            horizontalOnly: true
                                          },
                                          layout: "vertical",
                                          mode: "advanced",
                                          onFinish: async values => {
                                            const $steps = {};

                                            $steps["defaultSubmit"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    dataOp: {
                                                      sourceId:
                                                        "83X9ZdYzYUYJtgqe5fwXeX",
                                                      opId: "bd6c5eea-3c19-4758-ba37-bce428476227",
                                                      userArgs: {
                                                        keys: [
                                                          parseInt(
                                                            $state
                                                              .selectedProduct
                                                              .id
                                                          )
                                                        ],
                                                        variables: [
                                                          $state.selectedProduct
                                                            .blueprint_id,
                                                          $state.textTagZ.value,
                                                          $state.selectedProduct
                                                            .recipe_id,
                                                          $state
                                                            .formEditPrintfulProduct
                                                            .value.tags,
                                                          $state.titleTagz
                                                            .value,
                                                          Object.keys(
                                                            $state
                                                              .formEditPrintfulProduct
                                                              .value
                                                          ).reduce(
                                                            (acc, key) => {
                                                              if (
                                                                key.includes(
                                                                  "thread_colors"
                                                                )
                                                              ) {
                                                                acc[key] =
                                                                  $state.formEditPrintfulProduct.value[
                                                                    key
                                                                  ];
                                                              }
                                                              return acc;
                                                            },
                                                            {}
                                                          ),
                                                          $state
                                                            .formEditPrintfulProduct
                                                            .value
                                                            .printing_technique
                                                        ]
                                                      },
                                                      cacheKey: null,
                                                      invalidatedKeys: [
                                                        "plasmic_refresh_all"
                                                      ],
                                                      roleId: null
                                                    }
                                                  };
                                                  return (async ({
                                                    dataOp,
                                                    continueOnError
                                                  }) => {
                                                    try {
                                                      const response =
                                                        await executePlasmicDataOp(
                                                          dataOp,
                                                          {
                                                            userAuthToken:
                                                              dataSourcesCtx?.userAuthToken,
                                                            user: dataSourcesCtx?.user
                                                          }
                                                        );
                                                      await plasmicInvalidate(
                                                        dataOp.invalidatedKeys
                                                      );
                                                      return response;
                                                    } catch (e) {
                                                      if (!continueOnError) {
                                                        throw e;
                                                      }
                                                      return e;
                                                    }
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["defaultSubmit"] != null &&
                                              typeof $steps["defaultSubmit"] ===
                                                "object" &&
                                              typeof $steps["defaultSubmit"]
                                                .then === "function"
                                            ) {
                                              $steps["defaultSubmit"] =
                                                await $steps["defaultSubmit"];
                                            }

                                            $steps["invokeGlobalAction"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    args: [
                                                      "success",
                                                      "Product updated"
                                                    ]
                                                  };
                                                  return $globalActions[
                                                    "plasmic-antd5-config-provider.showNotification"
                                                  ]?.apply(null, [
                                                    ...actionArgs.args
                                                  ]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["invokeGlobalAction"] !=
                                                null &&
                                              typeof $steps[
                                                "invokeGlobalAction"
                                              ] === "object" &&
                                              typeof $steps[
                                                "invokeGlobalAction"
                                              ].then === "function"
                                            ) {
                                              $steps["invokeGlobalAction"] =
                                                await $steps[
                                                  "invokeGlobalAction"
                                                ];
                                            }
                                          },
                                          onIsSubmittingChange:
                                            generateStateOnChangePropForCodeComponents(
                                              $state,
                                              "isSubmitting",
                                              [
                                                "formEditPrintfulProduct",
                                                "isSubmitting"
                                              ],
                                              FormWrapper_Helpers
                                            ),
                                          ref: ref => {
                                            $refs["formEditPrintfulProduct"] =
                                              ref;
                                          },
                                          requiredMark: true,
                                          submitSlot: null,
                                          wrapperCol: {
                                            span: 16,
                                            horizontalOnly: true
                                          }
                                        };
                                        initializeCodeComponentStates(
                                          $state,
                                          [
                                            {
                                              name: "value",
                                              plasmicStateName:
                                                "formEditPrintfulProduct.value"
                                            },
                                            {
                                              name: "isSubmitting",
                                              plasmicStateName:
                                                "formEditPrintfulProduct.isSubmitting"
                                            }
                                          ],
                                          [],
                                          FormWrapper_Helpers ?? {},
                                          child$Props
                                        );

                                        return (
                                          <FormWrapper
                                            data-plasmic-name={
                                              "formEditPrintfulProduct"
                                            }
                                            data-plasmic-override={
                                              overrides.formEditPrintfulProduct
                                            }
                                            {...child$Props}
                                          >
                                            <FormItemWrapper
                                              className={classNames(
                                                "__wab_instance",
                                                sty.formField___1BEi
                                              )}
                                              hidden={true}
                                              initialValue={92}
                                              label={"id"}
                                              name={"id"}
                                              rules={[{ ruleType: "required" }]}
                                            >
                                              <AntdInputNumber
                                                data-plasmic-name={
                                                  "numberInput13"
                                                }
                                                data-plasmic-override={
                                                  overrides.numberInput13
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.numberInput13
                                                )}
                                                onChange={generateStateOnChangeProp(
                                                  $state,
                                                  ["numberInput13", "value"]
                                                )}
                                                type={"number"}
                                                value={generateStateValueProp(
                                                  $state,
                                                  ["numberInput13", "value"]
                                                )}
                                              />
                                            </FormItemWrapper>
                                            <Stack__
                                              as={"div"}
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__mr40
                                              )}
                                            >
                                              <Stack__
                                                as={"div"}
                                                hasGap={true}
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox___911OF
                                                )}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__bgneq
                                                  )}
                                                >
                                                  {"*"}
                                                </div>
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__zKKiF
                                                  )}
                                                >
                                                  {"Title"}
                                                </div>
                                                {(() => {
                                                  try {
                                                    return $state.titleTagz
                                                      .value === ""
                                                      ? true
                                                      : undefined;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return true;
                                                    }
                                                    throw e;
                                                  }
                                                })() ? (
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__o86Ll
                                                    )}
                                                  >
                                                    {"*Title is required"}
                                                  </div>
                                                ) : null}
                                              </Stack__>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__fz2Kw
                                                )}
                                              >
                                                {(() => {
                                                  const child$Props = {
                                                    className: classNames(
                                                      "__wab_instance",
                                                      sty.titleTagz
                                                    ),
                                                    onChange:
                                                      generateStateOnChangePropForCodeComponents(
                                                        $state,
                                                        "value",
                                                        ["titleTagz", "value"],
                                                        AntdInput_Helpers
                                                      ),
                                                    value:
                                                      generateStateValueProp(
                                                        $state,
                                                        ["titleTagz", "value"]
                                                      )
                                                  };
                                                  initializeCodeComponentStates(
                                                    $state,
                                                    [
                                                      {
                                                        name: "value",
                                                        plasmicStateName:
                                                          "titleTagz.value"
                                                      }
                                                    ],
                                                    [],
                                                    AntdInput_Helpers ?? {},
                                                    child$Props
                                                  );

                                                  return (
                                                    <AntdInput
                                                      data-plasmic-name={
                                                        "titleTagz"
                                                      }
                                                      data-plasmic-override={
                                                        overrides.titleTagz
                                                      }
                                                      {...child$Props}
                                                    />
                                                  );
                                                })()}
                                              </div>
                                            </Stack__>
                                            <FormItemWrapper
                                              className={classNames(
                                                "__wab_instance",
                                                sty.formField___4F9K4
                                              )}
                                              hidden={true}
                                              initialValue={{}}
                                              label={"placeholder_ids"}
                                              name={"placeholder_ids"}
                                            >
                                              <AntdInputNumber
                                                data-plasmic-name={
                                                  "numberInput14"
                                                }
                                                data-plasmic-override={
                                                  overrides.numberInput14
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.numberInput14
                                                )}
                                                onChange={generateStateOnChangeProp(
                                                  $state,
                                                  ["numberInput14", "value"]
                                                )}
                                                type={"number"}
                                                value={generateStateValueProp(
                                                  $state,
                                                  ["numberInput14", "value"]
                                                )}
                                              />
                                            </FormItemWrapper>
                                            <Stack__
                                              as={"div"}
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__aY61G
                                              )}
                                            >
                                              <Stack__
                                                as={"div"}
                                                hasGap={true}
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__api9N
                                                )}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__yisVb
                                                  )}
                                                >
                                                  {"*"}
                                                </div>
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__lqLbW
                                                  )}
                                                >
                                                  {"Description"}
                                                </div>
                                                {(() => {
                                                  try {
                                                    return $state.textTagZ
                                                      .value === ""
                                                      ? true
                                                      : undefined;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return true;
                                                    }
                                                    throw e;
                                                  }
                                                })() ? (
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__iVbTl
                                                    )}
                                                  >
                                                    {"*Description required"}
                                                  </div>
                                                ) : null}
                                              </Stack__>
                                              {(() => {
                                                const child$Props = {
                                                  className: classNames(
                                                    "__wab_instance",
                                                    sty.textTagZ
                                                  ),
                                                  onChange:
                                                    generateStateOnChangePropForCodeComponents(
                                                      $state,
                                                      "value",
                                                      ["textTagZ", "value"],
                                                      AntdTextArea_Helpers
                                                    ),
                                                  value: generateStateValueProp(
                                                    $state,
                                                    ["textTagZ", "value"]
                                                  )
                                                };
                                                initializeCodeComponentStates(
                                                  $state,
                                                  [
                                                    {
                                                      name: "value",
                                                      plasmicStateName:
                                                        "textTagZ.value"
                                                    }
                                                  ],
                                                  [],
                                                  AntdTextArea_Helpers ?? {},
                                                  child$Props
                                                );

                                                return (
                                                  <AntdTextArea
                                                    data-plasmic-name={
                                                      "textTagZ"
                                                    }
                                                    data-plasmic-override={
                                                      overrides.textTagZ
                                                    }
                                                    {...child$Props}
                                                  />
                                                );
                                              })()}
                                            </Stack__>
                                            <FormItemWrapper
                                              className={classNames(
                                                "__wab_instance",
                                                sty.formField__ai7QG
                                              )}
                                              hidden={true}
                                              initialValue={"golfx2@gmail.com"}
                                              label={"email"}
                                              name={"email"}
                                            >
                                              {(() => {
                                                const child$Props = {
                                                  className: classNames(
                                                    "__wab_instance",
                                                    sty.input6
                                                  ),
                                                  onChange:
                                                    generateStateOnChangePropForCodeComponents(
                                                      $state,
                                                      "value",
                                                      ["input6", "value"],
                                                      AntdInput_Helpers
                                                    ),
                                                  value: generateStateValueProp(
                                                    $state,
                                                    ["input6", "value"]
                                                  )
                                                };
                                                initializeCodeComponentStates(
                                                  $state,
                                                  [
                                                    {
                                                      name: "value",
                                                      plasmicStateName:
                                                        "input6.value"
                                                    }
                                                  ],
                                                  [],
                                                  AntdInput_Helpers ?? {},
                                                  child$Props
                                                );

                                                return (
                                                  <AntdInput
                                                    data-plasmic-name={"input6"}
                                                    data-plasmic-override={
                                                      overrides.input6
                                                    }
                                                    {...child$Props}
                                                  />
                                                );
                                              })()}
                                            </FormItemWrapper>
                                            <FormItemWrapper
                                              className={classNames(
                                                "__wab_instance",
                                                sty.formField___0NjQt
                                              )}
                                              hidden={true}
                                              initialValue={{}}
                                              label={"variant_ids"}
                                              name={"variant_ids"}
                                            >
                                              <AntdInputNumber
                                                data-plasmic-name={
                                                  "numberInput15"
                                                }
                                                data-plasmic-override={
                                                  overrides.numberInput15
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.numberInput15
                                                )}
                                                onChange={generateStateOnChangeProp(
                                                  $state,
                                                  ["numberInput15", "value"]
                                                )}
                                                type={"number"}
                                                value={generateStateValueProp(
                                                  $state,
                                                  ["numberInput15", "value"]
                                                )}
                                              />
                                            </FormItemWrapper>
                                            <FormItemWrapper
                                              className={classNames(
                                                "__wab_instance",
                                                sty.formField__ykAGl
                                              )}
                                              hidden={true}
                                              initialValue={{}}
                                              label={"sync_product_id"}
                                              name={"sync_product_id"}
                                            >
                                              <AntdInputNumber
                                                data-plasmic-name={
                                                  "numberInput16"
                                                }
                                                data-plasmic-override={
                                                  overrides.numberInput16
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.numberInput16
                                                )}
                                                onChange={generateStateOnChangeProp(
                                                  $state,
                                                  ["numberInput16", "value"]
                                                )}
                                                type={"number"}
                                                value={generateStateValueProp(
                                                  $state,
                                                  ["numberInput16", "value"]
                                                )}
                                              />
                                            </FormItemWrapper>
                                            <FormItemWrapper
                                              className={classNames(
                                                "__wab_instance",
                                                sty.formField__nOLd7
                                              )}
                                              initialValue={(() => {
                                                try {
                                                  return $state.selectedProduct
                                                    .tags;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                              label={"tags"}
                                              name={"tags"}
                                              preserve={false}
                                              rules={[]}
                                              shouldUpdate={true}
                                            >
                                              {(() => {
                                                const child$Props = {
                                                  className: classNames(
                                                    "__wab_instance",
                                                    sty.input7
                                                  ),
                                                  onChange:
                                                    generateStateOnChangePropForCodeComponents(
                                                      $state,
                                                      "value",
                                                      ["input7", "value"],
                                                      AntdInput_Helpers
                                                    ),
                                                  value: generateStateValueProp(
                                                    $state,
                                                    ["input7", "value"]
                                                  )
                                                };
                                                initializeCodeComponentStates(
                                                  $state,
                                                  [
                                                    {
                                                      name: "value",
                                                      plasmicStateName:
                                                        "input7.value"
                                                    }
                                                  ],
                                                  [],
                                                  AntdInput_Helpers ?? {},
                                                  child$Props
                                                );

                                                return (
                                                  <AntdInput
                                                    data-plasmic-name={"input7"}
                                                    data-plasmic-override={
                                                      overrides.input7
                                                    }
                                                    {...child$Props}
                                                  />
                                                );
                                              })()}
                                            </FormItemWrapper>
                                            <FormItemWrapper
                                              className={classNames(
                                                "__wab_instance",
                                                sty.formField__wbEgB
                                              )}
                                              label={
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__buK2D
                                                  )}
                                                >
                                                  {"Printing Technique"}
                                                </div>
                                              }
                                              name={"printing_technique"}
                                              preserve={false}
                                              rules={[{ ruleType: "required" }]}
                                              shouldUpdate={true}
                                            >
                                              <AntdSelect
                                                data-plasmic-name={"select10"}
                                                data-plasmic-override={
                                                  overrides.select10
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.select10
                                                )}
                                                defaultStylesClassName={classNames(
                                                  projectcss.root_reset,
                                                  projectcss.plasmic_default_styles,
                                                  projectcss.plasmic_mixins,
                                                  projectcss.plasmic_tokens,
                                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                                )}
                                                dropdownMatchSelectWidth={true}
                                                mode={"single"}
                                                onChange={async (
                                                  ...eventArgs: any
                                                ) => {
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    ["select10", "value"]
                                                  ).apply(null, eventArgs);
                                                  (async (value, option) => {
                                                    const $steps = {};

                                                    $steps["updateSelect102"] =
                                                      true
                                                        ? (() => {
                                                            const actionArgs = {
                                                              variable: {
                                                                objRoot: $state,
                                                                variablePath: [
                                                                  "select102"
                                                                ]
                                                              },
                                                              operation: 0,
                                                              value: value
                                                            };
                                                            return (({
                                                              variable,
                                                              value,
                                                              startIndex,
                                                              deleteCount
                                                            }) => {
                                                              if (!variable) {
                                                                return;
                                                              }
                                                              const {
                                                                objRoot,
                                                                variablePath
                                                              } = variable;

                                                              $stateSet(
                                                                objRoot,
                                                                variablePath,
                                                                value
                                                              );
                                                              return value;
                                                            })?.apply(null, [
                                                              actionArgs
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps[
                                                        "updateSelect102"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateSelect102"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateSelect102"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateSelect102"
                                                      ] = await $steps[
                                                        "updateSelect102"
                                                      ];
                                                    }
                                                  }).apply(null, eventArgs);
                                                }}
                                                options={(() => {
                                                  try {
                                                    return $queries.queryGetPrintfulBlueprint.data.response.result.product.techniques.map(
                                                      tech => ({
                                                        label:
                                                          tech.display_name,
                                                        value: tech.key
                                                      })
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return [
                                                        {
                                                          value: "option1",
                                                          label: "Option 1",
                                                          type: "option"
                                                        },
                                                        {
                                                          value: "option2",
                                                          label: "Option 2",
                                                          type: "option"
                                                        }
                                                      ];
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                                placeholder={"Select..."}
                                                popupScopeClassName={
                                                  sty["select10__popup"]
                                                }
                                                value={generateStateValueProp(
                                                  $state,
                                                  ["select10", "value"]
                                                )}
                                              />
                                            </FormItemWrapper>
                                            <FormItemWrapper
                                              className={classNames(
                                                "__wab_instance",
                                                sty.formField__pp6Pj
                                              )}
                                              hidden={true}
                                              initialValue={(() => {
                                                try {
                                                  return parseInt(
                                                    $ctx.params.id
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return 24;
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                              label={"recipe_id"}
                                              name={"recipe_id"}
                                            >
                                              <AntdInputNumber
                                                data-plasmic-name={
                                                  "numberInput17"
                                                }
                                                data-plasmic-override={
                                                  overrides.numberInput17
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.numberInput17
                                                )}
                                                onChange={generateStateOnChangeProp(
                                                  $state,
                                                  ["numberInput17", "value"]
                                                )}
                                                type={"number"}
                                                value={generateStateValueProp(
                                                  $state,
                                                  ["numberInput17", "value"]
                                                )}
                                              />
                                            </FormItemWrapper>
                                            <FormItemWrapper
                                              className={classNames(
                                                "__wab_instance",
                                                sty.formField__iRAd6
                                              )}
                                              hidden={true}
                                              initialValue={(() => {
                                                try {
                                                  return $state.selectedProduct
                                                    .blueprint_id;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return 679;
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                              label={"blueprint_id"}
                                              name={"blueprint_id"}
                                              preserve={false}
                                            >
                                              <AntdInputNumber
                                                data-plasmic-name={
                                                  "numberInput18"
                                                }
                                                data-plasmic-override={
                                                  overrides.numberInput18
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.numberInput18
                                                )}
                                                onChange={generateStateOnChangeProp(
                                                  $state,
                                                  ["numberInput18", "value"]
                                                )}
                                                type={"number"}
                                                value={generateStateValueProp(
                                                  $state,
                                                  ["numberInput18", "value"]
                                                )}
                                              />
                                            </FormItemWrapper>
                                            <FormItemWrapper
                                              className={classNames(
                                                "__wab_instance",
                                                sty.formField__eNaSk
                                              )}
                                              hidden={true}
                                              initialValue={
                                                "2024-09-12T16:40:49.164Z"
                                              }
                                              label={"created_at"}
                                              name={"created_at"}
                                            >
                                              {(() => {
                                                const child$Props = {
                                                  className: classNames(
                                                    "__wab_instance",
                                                    sty.input8
                                                  ),
                                                  onChange:
                                                    generateStateOnChangePropForCodeComponents(
                                                      $state,
                                                      "value",
                                                      ["input8", "value"],
                                                      AntdInput_Helpers
                                                    ),
                                                  value: generateStateValueProp(
                                                    $state,
                                                    ["input8", "value"]
                                                  )
                                                };
                                                initializeCodeComponentStates(
                                                  $state,
                                                  [
                                                    {
                                                      name: "value",
                                                      plasmicStateName:
                                                        "input8.value"
                                                    }
                                                  ],
                                                  [],
                                                  AntdInput_Helpers ?? {},
                                                  child$Props
                                                );

                                                return (
                                                  <AntdInput
                                                    data-plasmic-name={"input8"}
                                                    data-plasmic-override={
                                                      overrides.input8
                                                    }
                                                    {...child$Props}
                                                  />
                                                );
                                              })()}
                                            </FormItemWrapper>
                                            {(_par =>
                                              !_par
                                                ? []
                                                : Array.isArray(_par)
                                                ? _par
                                                : [_par])(
                                              (() => {
                                                try {
                                                  return $queries.queryGetPrinfulBlueprint.data.response.result.product.options.filter(
                                                    option =>
                                                      !option.id.includes(
                                                        "lifelike"
                                                      ) &&
                                                      !option.id.includes(
                                                        "notes"
                                                      )
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return [];
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            ).map(
                                              (
                                                __plasmic_item_0,
                                                __plasmic_idx_0
                                              ) => {
                                                const currentItem =
                                                  __plasmic_item_0;
                                                const currentIndex =
                                                  __plasmic_idx_0;
                                                return (
                                                  <FormItemWrapper
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.formField__sWnPs
                                                    )}
                                                    key={currentIndex}
                                                    label={
                                                      <div
                                                        className={classNames(
                                                          projectcss.all,
                                                          projectcss.__wab_text,
                                                          sty.text__kjoH
                                                        )}
                                                      >
                                                        <React.Fragment>
                                                          {(() => {
                                                            try {
                                                              return currentItem.title;
                                                            } catch (e) {
                                                              if (
                                                                e instanceof
                                                                  TypeError ||
                                                                e?.plasmicType ===
                                                                  "PlasmicUndefinedDataError"
                                                              ) {
                                                                return "Label";
                                                              }
                                                              throw e;
                                                            }
                                                          })()}
                                                        </React.Fragment>
                                                      </div>
                                                    }
                                                    name={(() => {
                                                      try {
                                                        return currentItem.id;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    preserve={false}
                                                    rules={[
                                                      { ruleType: "required" }
                                                    ]}
                                                    shouldUpdate={true}
                                                  >
                                                    {(() => {
                                                      const child$Props = {
                                                        className: classNames(
                                                          "__wab_instance",
                                                          sty.select9
                                                        ),
                                                        defaultStylesClassName:
                                                          classNames(
                                                            projectcss.root_reset,
                                                            projectcss.plasmic_default_styles,
                                                            projectcss.plasmic_mixins,
                                                            projectcss.plasmic_tokens,
                                                            plasmic_antd_5_hostless_css.plasmic_tokens,
                                                            plasmic_plasmic_rich_components_css.plasmic_tokens
                                                          ),
                                                        onChange: async (
                                                          ...eventArgs: any
                                                        ) => {
                                                          generateStateOnChangeProp(
                                                            $state,
                                                            [
                                                              "select9",
                                                              __plasmic_idx_0,
                                                              "value"
                                                            ]
                                                          ).apply(
                                                            null,
                                                            eventArgs
                                                          );
                                                          (async (
                                                            value,
                                                            option
                                                          ) => {
                                                            const $steps = {};

                                                            $steps[
                                                              "updateVariable5"
                                                            ] = true
                                                              ? (() => {
                                                                  const actionArgs =
                                                                    {
                                                                      variable:
                                                                        {
                                                                          objRoot:
                                                                            $state,
                                                                          variablePath:
                                                                            [
                                                                              "printfulProductOptions"
                                                                            ]
                                                                        },
                                                                      operation: 0
                                                                    };
                                                                  return (({
                                                                    variable,
                                                                    value,
                                                                    startIndex,
                                                                    deleteCount
                                                                  }) => {
                                                                    if (
                                                                      !variable
                                                                    ) {
                                                                      return;
                                                                    }
                                                                    const {
                                                                      objRoot,
                                                                      variablePath
                                                                    } =
                                                                      variable;

                                                                    $stateSet(
                                                                      objRoot,
                                                                      variablePath,
                                                                      value
                                                                    );
                                                                    return value;
                                                                  })?.apply(
                                                                    null,
                                                                    [actionArgs]
                                                                  );
                                                                })()
                                                              : undefined;
                                                            if (
                                                              $steps[
                                                                "updateVariable5"
                                                              ] != null &&
                                                              typeof $steps[
                                                                "updateVariable5"
                                                              ] === "object" &&
                                                              typeof $steps[
                                                                "updateVariable5"
                                                              ].then ===
                                                                "function"
                                                            ) {
                                                              $steps[
                                                                "updateVariable5"
                                                              ] = await $steps[
                                                                "updateVariable5"
                                                              ];
                                                            }
                                                          }).apply(
                                                            null,
                                                            eventArgs
                                                          );
                                                        },
                                                        options: (() => {
                                                          try {
                                                            return Object.entries(
                                                              currentItem.values
                                                            ).map(
                                                              ([
                                                                key,
                                                                value
                                                              ]) => ({
                                                                label: value,
                                                                value: key
                                                              })
                                                            );
                                                          } catch (e) {
                                                            if (
                                                              e instanceof
                                                                TypeError ||
                                                              e?.plasmicType ===
                                                                "PlasmicUndefinedDataError"
                                                            ) {
                                                              return [
                                                                {
                                                                  value:
                                                                    "option1",
                                                                  label:
                                                                    "Option 1",
                                                                  type: "option"
                                                                },
                                                                {
                                                                  value:
                                                                    "option2",
                                                                  label:
                                                                    "Option 2",
                                                                  type: "option"
                                                                }
                                                              ];
                                                            }
                                                            throw e;
                                                          }
                                                        })(),
                                                        placeholder:
                                                          "Select...",
                                                        popupScopeClassName:
                                                          sty["select9__popup"],
                                                        value:
                                                          generateStateValueProp(
                                                            $state,
                                                            [
                                                              "select9",
                                                              __plasmic_idx_0,
                                                              "value"
                                                            ]
                                                          )
                                                      };
                                                      initializeCodeComponentStates(
                                                        $state,
                                                        [
                                                          {
                                                            name: "value",
                                                            plasmicStateName:
                                                              "select9[].value"
                                                          }
                                                        ],
                                                        [__plasmic_idx_0],
                                                        undefined ?? {},
                                                        child$Props
                                                      );
                                                      initializePlasmicStates(
                                                        $state,
                                                        [
                                                          {
                                                            name: "select9[].value",
                                                            initFunc: ({
                                                              $props,
                                                              $state,
                                                              $queries
                                                            }) => undefined
                                                          }
                                                        ],
                                                        [__plasmic_idx_0]
                                                      );
                                                      return (
                                                        <AntdSelect
                                                          data-plasmic-name={
                                                            "select9"
                                                          }
                                                          data-plasmic-override={
                                                            overrides.select9
                                                          }
                                                          {...child$Props}
                                                        />
                                                      );
                                                    })()}
                                                  </FormItemWrapper>
                                                );
                                              }
                                            )}
                                            <AntdButton
                                              className={classNames(
                                                "__wab_instance",
                                                sty.button__sjQj
                                              )}
                                              disabled={(() => {
                                                try {
                                                  return $state.textTagZ
                                                    .value === "" ||
                                                    $state.titleTagz.value ===
                                                      ""
                                                    ? true
                                                    : undefined;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                              submitsForm={true}
                                              type={"primary"}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__j5W38
                                                )}
                                              >
                                                {"Submit"}
                                              </div>
                                            </AntdButton>
                                          </FormWrapper>
                                        );
                                      })()}
                                    </AntdTabItem>
                                    <AntdTabItem
                                      className={classNames(
                                        "__wab_instance",
                                        sty.tabItem__nRa29
                                      )}
                                      key={"2"}
                                      label={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__inXiZ
                                          )}
                                        >
                                          {"Variants"}
                                        </div>
                                      }
                                    >
                                      <Stack__
                                        as={"div"}
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__sPddI
                                        )}
                                      >
                                        {(() => {
                                          try {
                                            return (
                                              $queries
                                                .getPrintfulProductsVariants
                                                .data.length == 0
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return true;
                                            }
                                            throw e;
                                          }
                                        })() ? (
                                          <AntdButton
                                            data-plasmic-name={
                                              "populatePrintfulVariants"
                                            }
                                            data-plasmic-override={
                                              overrides.populatePrintfulVariants
                                            }
                                            className={classNames(
                                              "__wab_instance",
                                              sty.populatePrintfulVariants
                                            )}
                                            onClick={async () => {
                                              const $steps = {};

                                              $steps["httpGet"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      dataOp: {
                                                        sourceId:
                                                          "w9bT7zJHQBMsxuYyCMQHKC",
                                                        opId: "91ced04a-655c-4a98-8520-46ce40dfb694",
                                                        userArgs: {
                                                          path: [
                                                            parseInt(
                                                              $state
                                                                .selectedProduct
                                                                .blueprint_id
                                                            )
                                                          ]
                                                        },
                                                        cacheKey: null,
                                                        invalidatedKeys: null,
                                                        roleId: null
                                                      }
                                                    };
                                                    return (async ({
                                                      dataOp,
                                                      continueOnError
                                                    }) => {
                                                      try {
                                                        const response =
                                                          await executePlasmicDataOp(
                                                            dataOp,
                                                            {
                                                              userAuthToken:
                                                                dataSourcesCtx?.userAuthToken,
                                                              user: dataSourcesCtx?.user
                                                            }
                                                          );
                                                        await plasmicInvalidate(
                                                          dataOp.invalidatedKeys
                                                        );
                                                        return response;
                                                      } catch (e) {
                                                        if (!continueOnError) {
                                                          throw e;
                                                        }
                                                        return e;
                                                      }
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["httpGet"] != null &&
                                                typeof $steps["httpGet"] ===
                                                  "object" &&
                                                typeof $steps["httpGet"]
                                                  .then === "function"
                                              ) {
                                                $steps["httpGet"] =
                                                  await $steps["httpGet"];
                                              }

                                              $steps[
                                                "updatePrintfulVariantsPop"
                                              ] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "printfulVariantsPop"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: $steps.httpGet
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps[
                                                  "updatePrintfulVariantsPop"
                                                ] != null &&
                                                typeof $steps[
                                                  "updatePrintfulVariantsPop"
                                                ] === "object" &&
                                                typeof $steps[
                                                  "updatePrintfulVariantsPop"
                                                ].then === "function"
                                              ) {
                                                $steps[
                                                  "updatePrintfulVariantsPop"
                                                ] = await $steps[
                                                  "updatePrintfulVariantsPop"
                                                ];
                                              }

                                              $steps["postgresCreateMany"] =
                                                $queries
                                                  .getPrintfulProductsVariants
                                                  .data.length !==
                                                $state.printfulVariantsPop
                                                  .length
                                                  ? (() => {
                                                      const actionArgs = {
                                                        dataOp: {
                                                          sourceId:
                                                            "83X9ZdYzYUYJtgqe5fwXeX",
                                                          opId: "6d164c8a-55e0-4190-8d12-3951bac4296e",
                                                          userArgs: {
                                                            variables: [
                                                              (() => {
                                                                return $state.printfulVariantsPop.data.response.result.variants.map(
                                                                  i => ({
                                                                    title:
                                                                      i.name,
                                                                    variant_id:
                                                                      i.id,
                                                                    price: 0,
                                                                    email:
                                                                      $state.email,
                                                                    printful_product_id:
                                                                      parseInt(
                                                                        $state
                                                                          .selectedProduct
                                                                          .id
                                                                      ),
                                                                    is_enabled:
                                                                      true,
                                                                    identifier:
                                                                      Math.floor(
                                                                        1000000 +
                                                                          Math.random() *
                                                                            9000000
                                                                      )
                                                                  })
                                                                );
                                                              })()
                                                            ]
                                                          },
                                                          cacheKey: null,
                                                          invalidatedKeys: [
                                                            "994b6bc8-cba1-4480-99d5-6a2cca13a4a1"
                                                          ],
                                                          roleId: null
                                                        }
                                                      };
                                                      return (async ({
                                                        dataOp,
                                                        continueOnError
                                                      }) => {
                                                        try {
                                                          const response =
                                                            await executePlasmicDataOp(
                                                              dataOp,
                                                              {
                                                                userAuthToken:
                                                                  dataSourcesCtx?.userAuthToken,
                                                                user: dataSourcesCtx?.user
                                                              }
                                                            );
                                                          await plasmicInvalidate(
                                                            dataOp.invalidatedKeys
                                                          );
                                                          return response;
                                                        } catch (e) {
                                                          if (
                                                            !continueOnError
                                                          ) {
                                                            throw e;
                                                          }
                                                          return e;
                                                        }
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                              if (
                                                $steps["postgresCreateMany"] !=
                                                  null &&
                                                typeof $steps[
                                                  "postgresCreateMany"
                                                ] === "object" &&
                                                typeof $steps[
                                                  "postgresCreateMany"
                                                ].then === "function"
                                              ) {
                                                $steps["postgresCreateMany"] =
                                                  await $steps[
                                                    "postgresCreateMany"
                                                  ];
                                              }

                                              $steps["refreshData"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      queryInvalidation: [
                                                        "plasmic_refresh_all"
                                                      ]
                                                    };
                                                    return (async ({
                                                      queryInvalidation
                                                    }) => {
                                                      if (!queryInvalidation) {
                                                        return;
                                                      }
                                                      await plasmicInvalidate(
                                                        queryInvalidation
                                                      );
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["refreshData"] != null &&
                                                typeof $steps["refreshData"] ===
                                                  "object" &&
                                                typeof $steps["refreshData"]
                                                  .then === "function"
                                              ) {
                                                $steps["refreshData"] =
                                                  await $steps["refreshData"];
                                              }
                                            }}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__zQGc5
                                              )}
                                            >
                                              {"Populate"}
                                            </div>
                                          </AntdButton>
                                        ) : null}
                                        {(() => {
                                          try {
                                            return (
                                              $queries
                                                .queryGetSupPrintfulVariants
                                                .data.length !== 0
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return true;
                                            }
                                            throw e;
                                          }
                                        })() ? (
                                          <Stack__
                                            as={"div"}
                                            hasGap={true}
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__yzCtb
                                            )}
                                          >
                                            <AntdSwitch
                                              data-plasmic-name={"switch2"}
                                              data-plasmic-override={
                                                overrides.switch2
                                              }
                                              checked={generateStateValueProp(
                                                $state,
                                                ["switch2", "checked"]
                                              )}
                                              className={classNames(
                                                "__wab_instance",
                                                sty.switch2
                                              )}
                                              onChange={generateStateOnChangeProp(
                                                $state,
                                                ["switch2", "checked"]
                                              )}
                                            />

                                            <AntdButton
                                              className={classNames(
                                                "__wab_instance",
                                                sty.button__qEEje
                                              )}
                                              onClick={async () => {
                                                const $steps = {};

                                                $steps["postgresCustomWrite"] =
                                                  true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          dataOp: {
                                                            sourceId:
                                                              "83X9ZdYzYUYJtgqe5fwXeX",
                                                            opId: "edd1740f-b966-4edd-afa9-1178f65000ca",
                                                            userArgs: {
                                                              query: [
                                                                $state.switch2
                                                                  .checked,
                                                                $state.printfulVariantsTable.selectedRows
                                                                  .map(
                                                                    row =>
                                                                      `"${row.identifier}"`
                                                                  )
                                                                  .join(",")
                                                              ]
                                                            },
                                                            cacheKey: null,
                                                            invalidatedKeys: [
                                                              "plasmic_refresh_all"
                                                            ],
                                                            roleId: null
                                                          }
                                                        };
                                                        return (async ({
                                                          dataOp,
                                                          continueOnError
                                                        }) => {
                                                          try {
                                                            const response =
                                                              await executePlasmicDataOp(
                                                                dataOp,
                                                                {
                                                                  userAuthToken:
                                                                    dataSourcesCtx?.userAuthToken,
                                                                  user: dataSourcesCtx?.user
                                                                }
                                                              );
                                                            await plasmicInvalidate(
                                                              dataOp.invalidatedKeys
                                                            );
                                                            return response;
                                                          } catch (e) {
                                                            if (
                                                              !continueOnError
                                                            ) {
                                                              throw e;
                                                            }
                                                            return e;
                                                          }
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                if (
                                                  $steps[
                                                    "postgresCustomWrite"
                                                  ] != null &&
                                                  typeof $steps[
                                                    "postgresCustomWrite"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "postgresCustomWrite"
                                                  ].then === "function"
                                                ) {
                                                  $steps[
                                                    "postgresCustomWrite"
                                                  ] = await $steps[
                                                    "postgresCustomWrite"
                                                  ];
                                                }

                                                $steps["refreshData"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        queryInvalidation: [
                                                          "plasmic_refresh_all"
                                                        ]
                                                      };
                                                      return (async ({
                                                        queryInvalidation
                                                      }) => {
                                                        if (
                                                          !queryInvalidation
                                                        ) {
                                                          return;
                                                        }
                                                        await plasmicInvalidate(
                                                          queryInvalidation
                                                        );
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps["refreshData"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "refreshData"
                                                  ] === "object" &&
                                                  typeof $steps["refreshData"]
                                                    .then === "function"
                                                ) {
                                                  $steps["refreshData"] =
                                                    await $steps["refreshData"];
                                                }

                                                $steps["invokeGlobalAction"] =
                                                  true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          args: [
                                                            "success",
                                                            `Selected rows toggled to ${$state.switch2.checked}`
                                                          ]
                                                        };
                                                        return $globalActions[
                                                          "plasmic-antd5-config-provider.showNotification"
                                                        ]?.apply(null, [
                                                          ...actionArgs.args
                                                        ]);
                                                      })()
                                                    : undefined;
                                                if (
                                                  $steps[
                                                    "invokeGlobalAction"
                                                  ] != null &&
                                                  typeof $steps[
                                                    "invokeGlobalAction"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "invokeGlobalAction"
                                                  ].then === "function"
                                                ) {
                                                  $steps["invokeGlobalAction"] =
                                                    await $steps[
                                                      "invokeGlobalAction"
                                                    ];
                                                }
                                              }}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__xkXch
                                                )}
                                              >
                                                {"Toggle is_enabled"}
                                              </div>
                                            </AntdButton>
                                            {(() => {
                                              const child$Props = {
                                                className: classNames(
                                                  "__wab_instance",
                                                  sty.inputPriceVariants2
                                                ),
                                                onChange:
                                                  generateStateOnChangePropForCodeComponents(
                                                    $state,
                                                    "value",
                                                    [
                                                      "inputPriceVariants2",
                                                      "value"
                                                    ],
                                                    AntdInput_Helpers
                                                  ),
                                                placeholder:
                                                  "Enter Price in Cents",
                                                value: generateStateValueProp(
                                                  $state,
                                                  [
                                                    "inputPriceVariants2",
                                                    "value"
                                                  ]
                                                )
                                              };
                                              initializeCodeComponentStates(
                                                $state,
                                                [
                                                  {
                                                    name: "value",
                                                    plasmicStateName:
                                                      "inputPriceVariants2.value"
                                                  }
                                                ],
                                                [],
                                                AntdInput_Helpers ?? {},
                                                child$Props
                                              );

                                              return (
                                                <AntdInput
                                                  data-plasmic-name={
                                                    "inputPriceVariants2"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.inputPriceVariants2
                                                  }
                                                  {...child$Props}
                                                />
                                              );
                                            })()}
                                            <AntdButton
                                              className={classNames(
                                                "__wab_instance",
                                                sty.button__pQg4P
                                              )}
                                              onClick={async () => {
                                                const $steps = {};

                                                $steps["postgresUpdateMany"] =
                                                  true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          dataOp: {
                                                            sourceId:
                                                              "83X9ZdYzYUYJtgqe5fwXeX",
                                                            opId: "4ff12a5d-0bf9-45b1-85ab-336dd112e372",
                                                            userArgs: {
                                                              query: [
                                                                $state
                                                                  .inputPriceVariants2
                                                                  .value,
                                                                $state.printfulVariantsTable.selectedRows
                                                                  .map(
                                                                    row =>
                                                                      `"${row.identifier}"`
                                                                  )
                                                                  .join(",")
                                                              ]
                                                            },
                                                            cacheKey: null,
                                                            invalidatedKeys: [
                                                              "plasmic_refresh_all"
                                                            ],
                                                            roleId:
                                                              "d035f350-edf5-4268-af03-4480b52522b0"
                                                          },
                                                          continueOnError: false
                                                        };
                                                        return (async ({
                                                          dataOp,
                                                          continueOnError
                                                        }) => {
                                                          try {
                                                            const response =
                                                              await executePlasmicDataOp(
                                                                dataOp,
                                                                {
                                                                  userAuthToken:
                                                                    dataSourcesCtx?.userAuthToken,
                                                                  user: dataSourcesCtx?.user
                                                                }
                                                              );
                                                            await plasmicInvalidate(
                                                              dataOp.invalidatedKeys
                                                            );
                                                            return response;
                                                          } catch (e) {
                                                            if (
                                                              !continueOnError
                                                            ) {
                                                              throw e;
                                                            }
                                                            return e;
                                                          }
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                if (
                                                  $steps[
                                                    "postgresUpdateMany"
                                                  ] != null &&
                                                  typeof $steps[
                                                    "postgresUpdateMany"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "postgresUpdateMany"
                                                  ].then === "function"
                                                ) {
                                                  $steps["postgresUpdateMany"] =
                                                    await $steps[
                                                      "postgresUpdateMany"
                                                    ];
                                                }

                                                $steps["refreshData"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        queryInvalidation: [
                                                          "plasmic_refresh_all"
                                                        ]
                                                      };
                                                      return (async ({
                                                        queryInvalidation
                                                      }) => {
                                                        if (
                                                          !queryInvalidation
                                                        ) {
                                                          return;
                                                        }
                                                        await plasmicInvalidate(
                                                          queryInvalidation
                                                        );
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps["refreshData"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "refreshData"
                                                  ] === "object" &&
                                                  typeof $steps["refreshData"]
                                                    .then === "function"
                                                ) {
                                                  $steps["refreshData"] =
                                                    await $steps["refreshData"];
                                                }

                                                $steps["invokeGlobalAction"] =
                                                  true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          args: [
                                                            "success",
                                                            "Sync complete"
                                                          ]
                                                        };
                                                        return $globalActions[
                                                          "plasmic-antd5-config-provider.showNotification"
                                                        ]?.apply(null, [
                                                          ...actionArgs.args
                                                        ]);
                                                      })()
                                                    : undefined;
                                                if (
                                                  $steps[
                                                    "invokeGlobalAction"
                                                  ] != null &&
                                                  typeof $steps[
                                                    "invokeGlobalAction"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "invokeGlobalAction"
                                                  ].then === "function"
                                                ) {
                                                  $steps["invokeGlobalAction"] =
                                                    await $steps[
                                                      "invokeGlobalAction"
                                                    ];
                                                }
                                              }}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__war9B
                                                )}
                                              >
                                                {"Sync Price"}
                                              </div>
                                            </AntdButton>
                                          </Stack__>
                                        ) : null}
                                      </Stack__>
                                      {(() => {
                                        try {
                                          return (
                                            $queries.queryGetSupPrintfulVariants
                                              .data.length !== 0
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })()
                                        ? (() => {
                                            const child$Props = {
                                              canSelectRows: "multiple",
                                              className: classNames(
                                                "__wab_instance",
                                                sty.printfulVariantsTable
                                              ),
                                              data: (() => {
                                                try {
                                                  return $queries.queryGetSupPrintfulVariants;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })(),
                                              fields: (() => {
                                                const __composite = [
                                                  { key: "id", fieldId: "id" },
                                                  {
                                                    key: "title",
                                                    fieldId: "title"
                                                  },
                                                  {
                                                    key: "is_enabled",
                                                    fieldId: "is_enabled"
                                                  },
                                                  {
                                                    key: "printful_product_id",
                                                    fieldId:
                                                      "printful_product_id",
                                                    isHidden: null
                                                  },
                                                  {
                                                    key: "price",
                                                    fieldId: "price"
                                                  },
                                                  {
                                                    key: "variant_id",
                                                    fieldId: "variant_id"
                                                  },
                                                  {
                                                    key: "created_at",
                                                    fieldId: "created_at",
                                                    disableSorting: null,
                                                    isHidden: null
                                                  },
                                                  {
                                                    key: "email",
                                                    fieldId: "email",
                                                    isHidden: null
                                                  },
                                                  {
                                                    key: "identifier",
                                                    fieldId: "identifier",
                                                    isHidden: null
                                                  }
                                                ];
                                                __composite["3"]["isHidden"] =
                                                  true;
                                                __composite["6"][
                                                  "disableSorting"
                                                ] = false;
                                                __composite["6"]["isHidden"] =
                                                  true;
                                                __composite["7"]["isHidden"] =
                                                  true;
                                                __composite["8"]["isHidden"] =
                                                  true;
                                                return __composite;
                                              })(),

                                              hideColumnPicker: true,
                                              hideDensity: true,
                                              hideExports: true,
                                              hideSelectionBar: false,
                                              onRowSelectionChanged: async (
                                                ...eventArgs: any
                                              ) => {
                                                generateStateOnChangePropForCodeComponents(
                                                  $state,
                                                  "selectedRowKey",
                                                  [
                                                    "printfulVariantsTable",
                                                    "selectedRowKey"
                                                  ],
                                                  RichTable_Helpers
                                                ).apply(null, eventArgs);
                                                generateStateOnChangePropForCodeComponents(
                                                  $state,
                                                  "selectedRow",
                                                  [
                                                    "printfulVariantsTable",
                                                    "selectedRow"
                                                  ],
                                                  RichTable_Helpers
                                                ).apply(null, eventArgs);
                                                generateStateOnChangePropForCodeComponents(
                                                  $state,
                                                  "selectedRows",
                                                  [
                                                    "printfulVariantsTable",
                                                    "selectedRows"
                                                  ],
                                                  RichTable_Helpers
                                                ).apply(null, eventArgs);
                                                generateStateOnChangePropForCodeComponents(
                                                  $state,
                                                  "selectedRowKeys",
                                                  [
                                                    "printfulVariantsTable",
                                                    "selectedRowKeys"
                                                  ],
                                                  RichTable_Helpers
                                                ).apply(null, eventArgs);
                                              },
                                              rowActions: (() => {
                                                const __composite = [
                                                  {
                                                    type: "item",
                                                    label: null,
                                                    onClick: null
                                                  }
                                                ];
                                                __composite["0"]["label"] =
                                                  "delete";
                                                __composite["0"]["onClick"] =
                                                  async (rowKey, row) => {
                                                    const $steps = {};

                                                    $steps[
                                                      "postgresDeleteMany"
                                                    ] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            dataOp: {
                                                              sourceId:
                                                                "83X9ZdYzYUYJtgqe5fwXeX",
                                                              opId: "35d7c4e5-ef94-4fcb-bf27-a451ef3a2559",
                                                              userArgs: {
                                                                conditions: [
                                                                  row.id
                                                                ]
                                                              },
                                                              cacheKey: null,
                                                              invalidatedKeys: [
                                                                "plasmic_refresh_all"
                                                              ],
                                                              roleId: null
                                                            }
                                                          };
                                                          return (async ({
                                                            dataOp,
                                                            continueOnError
                                                          }) => {
                                                            try {
                                                              const response =
                                                                await executePlasmicDataOp(
                                                                  dataOp,
                                                                  {
                                                                    userAuthToken:
                                                                      dataSourcesCtx?.userAuthToken,
                                                                    user: dataSourcesCtx?.user
                                                                  }
                                                                );
                                                              await plasmicInvalidate(
                                                                dataOp.invalidatedKeys
                                                              );
                                                              return response;
                                                            } catch (e) {
                                                              if (
                                                                !continueOnError
                                                              ) {
                                                                throw e;
                                                              }
                                                              return e;
                                                            }
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps[
                                                        "postgresDeleteMany"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "postgresDeleteMany"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "postgresDeleteMany"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "postgresDeleteMany"
                                                      ] = await $steps[
                                                        "postgresDeleteMany"
                                                      ];
                                                    }

                                                    $steps[
                                                      "invokeGlobalAction"
                                                    ] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            args: [
                                                              "success",
                                                              "deleted"
                                                            ]
                                                          };
                                                          return $globalActions[
                                                            "plasmic-antd5-config-provider.showNotification"
                                                          ]?.apply(null, [
                                                            ...actionArgs.args
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps[
                                                        "invokeGlobalAction"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "invokeGlobalAction"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "invokeGlobalAction"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "invokeGlobalAction"
                                                      ] = await $steps[
                                                        "invokeGlobalAction"
                                                      ];
                                                    }
                                                  };
                                                return __composite;
                                              })(),

                                              scopeClassName:
                                                sty[
                                                  "printfulVariantsTable__instance"
                                                ],
                                              selectedRowKey:
                                                generateStateValueProp($state, [
                                                  "printfulVariantsTable",
                                                  "selectedRowKey"
                                                ]),
                                              selectedRowKeys:
                                                generateStateValueProp($state, [
                                                  "printfulVariantsTable",
                                                  "selectedRowKeys"
                                                ]),
                                              themeResetClassName: classNames(
                                                projectcss.root_reset,
                                                projectcss.root_reset_tags,
                                                projectcss.plasmic_default_styles,
                                                projectcss.plasmic_mixins,
                                                projectcss.plasmic_tokens,
                                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                                plasmic_plasmic_rich_components_css.plasmic_tokens
                                              )
                                            };
                                            initializeCodeComponentStates(
                                              $state,
                                              [
                                                {
                                                  name: "selectedRowKey",
                                                  plasmicStateName:
                                                    "printfulVariantsTable.selectedRowKey"
                                                },
                                                {
                                                  name: "selectedRow",
                                                  plasmicStateName:
                                                    "printfulVariantsTable.selectedRow"
                                                },
                                                {
                                                  name: "selectedRows",
                                                  plasmicStateName:
                                                    "printfulVariantsTable.selectedRows"
                                                },
                                                {
                                                  name: "selectedRowKeys",
                                                  plasmicStateName:
                                                    "printfulVariantsTable.selectedRowKeys"
                                                }
                                              ],
                                              [],
                                              RichTable_Helpers ?? {},
                                              child$Props
                                            );

                                            return (
                                              <RichTable
                                                data-plasmic-name={
                                                  "printfulVariantsTable"
                                                }
                                                data-plasmic-override={
                                                  overrides.printfulVariantsTable
                                                }
                                                {...child$Props}
                                              />
                                            );
                                          })()
                                        : null}
                                    </AntdTabItem>
                                    <AntdTabItem
                                      className={classNames(
                                        "__wab_instance",
                                        sty.tabItem__qUnei
                                      )}
                                      key={"3"}
                                      label={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__jh36M
                                          )}
                                        >
                                          {"Placeholders"}
                                        </div>
                                      }
                                    >
                                      <AntdModal
                                        data-plasmic-name={"modal"}
                                        data-plasmic-override={overrides.modal}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.modal
                                        )}
                                        defaultStylesClassName={classNames(
                                          projectcss.root_reset,
                                          projectcss.plasmic_default_styles,
                                          projectcss.plasmic_mixins,
                                          projectcss.plasmic_tokens,
                                          plasmic_antd_5_hostless_css.plasmic_tokens,
                                          plasmic_plasmic_rich_components_css.plasmic_tokens
                                        )}
                                        hideFooter={true}
                                        modalScopeClassName={
                                          sty["modal__modal"]
                                        }
                                        onOpenChange={generateStateOnChangeProp(
                                          $state,
                                          ["modal", "open"]
                                        )}
                                        open={generateStateValueProp($state, [
                                          "modal",
                                          "open"
                                        ])}
                                        title={"New Placeholder"}
                                        trigger={
                                          <AntdButton
                                            className={classNames(
                                              "__wab_instance",
                                              sty.button___4NVvh
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text___78Oa
                                              )}
                                            >
                                              {"New"}
                                            </div>
                                          </AntdButton>
                                        }
                                      >
                                        {(() => {
                                          const child$Props = {
                                            className: classNames(
                                              "__wab_instance",
                                              sty.form
                                            ),
                                            extendedOnValuesChange:
                                              generateStateOnChangePropForCodeComponents(
                                                $state,
                                                "value",
                                                ["form", "value"],
                                                FormWrapper_Helpers
                                              ),
                                            formItems: [
                                              {
                                                label: "Name",
                                                name: "name",
                                                inputType: "Text"
                                              },
                                              {
                                                label: "Message",
                                                name: "message",
                                                inputType: "Text Area"
                                              }
                                            ],
                                            labelCol: {
                                              span: 8,
                                              horizontalOnly: true
                                            },
                                            layout: "vertical",
                                            mode: "advanced",
                                            onFinish: async values => {
                                              const $steps = {};

                                              $steps["postgresCreate"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      dataOp: {
                                                        sourceId:
                                                          "83X9ZdYzYUYJtgqe5fwXeX",
                                                        opId: "49b9f3e6-3f05-4a04-8549-72d35555d9c9",
                                                        userArgs: {
                                                          variables: [
                                                            $state.form.value
                                                          ]
                                                        },
                                                        cacheKey: null,
                                                        invalidatedKeys: [
                                                          "plasmic_refresh_all"
                                                        ],
                                                        roleId: null
                                                      }
                                                    };
                                                    return (async ({
                                                      dataOp,
                                                      continueOnError
                                                    }) => {
                                                      try {
                                                        const response =
                                                          await executePlasmicDataOp(
                                                            dataOp,
                                                            {
                                                              userAuthToken:
                                                                dataSourcesCtx?.userAuthToken,
                                                              user: dataSourcesCtx?.user
                                                            }
                                                          );
                                                        await plasmicInvalidate(
                                                          dataOp.invalidatedKeys
                                                        );
                                                        return response;
                                                      } catch (e) {
                                                        if (!continueOnError) {
                                                          throw e;
                                                        }
                                                        return e;
                                                      }
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["postgresCreate"] !=
                                                  null &&
                                                typeof $steps[
                                                  "postgresCreate"
                                                ] === "object" &&
                                                typeof $steps["postgresCreate"]
                                                  .then === "function"
                                              ) {
                                                $steps["postgresCreate"] =
                                                  await $steps[
                                                    "postgresCreate"
                                                  ];
                                              }

                                              $steps["invokeGlobalAction"] =
                                                true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        args: [
                                                          "success",
                                                          "Placeholder created"
                                                        ]
                                                      };
                                                      return $globalActions[
                                                        "plasmic-antd5-config-provider.showNotification"
                                                      ]?.apply(null, [
                                                        ...actionArgs.args
                                                      ]);
                                                    })()
                                                  : undefined;
                                              if (
                                                $steps["invokeGlobalAction"] !=
                                                  null &&
                                                typeof $steps[
                                                  "invokeGlobalAction"
                                                ] === "object" &&
                                                typeof $steps[
                                                  "invokeGlobalAction"
                                                ].then === "function"
                                              ) {
                                                $steps["invokeGlobalAction"] =
                                                  await $steps[
                                                    "invokeGlobalAction"
                                                  ];
                                              }
                                            },
                                            onIsSubmittingChange:
                                              generateStateOnChangePropForCodeComponents(
                                                $state,
                                                "isSubmitting",
                                                ["form", "isSubmitting"],
                                                FormWrapper_Helpers
                                              ),
                                            ref: ref => {
                                              $refs["form"] = ref;
                                            },
                                            submitSlot: null,
                                            wrapperCol: {
                                              span: 16,
                                              horizontalOnly: true
                                            }
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "value",
                                                plasmicStateName: "form.value"
                                              },
                                              {
                                                name: "isSubmitting",
                                                plasmicStateName:
                                                  "form.isSubmitting"
                                              }
                                            ],
                                            [],
                                            FormWrapper_Helpers ?? {},
                                            child$Props
                                          );

                                          return (
                                            <FormWrapper
                                              data-plasmic-name={"form"}
                                              data-plasmic-override={
                                                overrides.form
                                              }
                                              {...child$Props}
                                            >
                                              <Stack__
                                                as={"div"}
                                                hasGap={true}
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__i22P
                                                )}
                                              >
                                                <FormItemWrapper
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.formField__upZsD
                                                  )}
                                                  initialValue={"1"}
                                                  label={"Scale"}
                                                  name={"scale"}
                                                  rules={[
                                                    { ruleType: "required" }
                                                  ]}
                                                >
                                                  {(() => {
                                                    const child$Props = {
                                                      className: classNames(
                                                        "__wab_instance",
                                                        sty.input
                                                      ),
                                                      onChange:
                                                        generateStateOnChangePropForCodeComponents(
                                                          $state,
                                                          "value",
                                                          ["input", "value"],
                                                          AntdInput_Helpers
                                                        ),
                                                      value:
                                                        generateStateValueProp(
                                                          $state,
                                                          ["input", "value"]
                                                        )
                                                    };
                                                    initializeCodeComponentStates(
                                                      $state,
                                                      [
                                                        {
                                                          name: "value",
                                                          plasmicStateName:
                                                            "input.value"
                                                        }
                                                      ],
                                                      [],
                                                      AntdInput_Helpers ?? {},
                                                      child$Props
                                                    );

                                                    return (
                                                      <AntdInput
                                                        data-plasmic-name={
                                                          "input"
                                                        }
                                                        data-plasmic-override={
                                                          overrides.input
                                                        }
                                                        {...child$Props}
                                                      />
                                                    );
                                                  })()}
                                                </FormItemWrapper>
                                                <FormItemWrapper
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.formField__gvXYw
                                                  )}
                                                  initialValue={"0.50"}
                                                  label={"X"}
                                                  name={"x"}
                                                  rules={[
                                                    { ruleType: "required" }
                                                  ]}
                                                >
                                                  {(() => {
                                                    const child$Props = {
                                                      className: classNames(
                                                        "__wab_instance",
                                                        sty.input2
                                                      ),
                                                      onChange:
                                                        generateStateOnChangePropForCodeComponents(
                                                          $state,
                                                          "value",
                                                          ["input2", "value"],
                                                          AntdInput_Helpers
                                                        ),
                                                      value:
                                                        generateStateValueProp(
                                                          $state,
                                                          ["input2", "value"]
                                                        )
                                                    };
                                                    initializeCodeComponentStates(
                                                      $state,
                                                      [
                                                        {
                                                          name: "value",
                                                          plasmicStateName:
                                                            "input2.value"
                                                        }
                                                      ],
                                                      [],
                                                      AntdInput_Helpers ?? {},
                                                      child$Props
                                                    );

                                                    return (
                                                      <AntdInput
                                                        data-plasmic-name={
                                                          "input2"
                                                        }
                                                        data-plasmic-override={
                                                          overrides.input2
                                                        }
                                                        {...child$Props}
                                                      />
                                                    );
                                                  })()}
                                                </FormItemWrapper>
                                                <FormItemWrapper
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.formField___1JvAt
                                                  )}
                                                  initialValue={"0.50"}
                                                  label={"Y"}
                                                  name={"y"}
                                                  rules={[
                                                    { ruleType: "required" }
                                                  ]}
                                                >
                                                  {(() => {
                                                    const child$Props = {
                                                      className: classNames(
                                                        "__wab_instance",
                                                        sty.input5
                                                      ),
                                                      onChange:
                                                        generateStateOnChangePropForCodeComponents(
                                                          $state,
                                                          "value",
                                                          ["input5", "value"],
                                                          AntdInput_Helpers
                                                        ),
                                                      value:
                                                        generateStateValueProp(
                                                          $state,
                                                          ["input5", "value"]
                                                        )
                                                    };
                                                    initializeCodeComponentStates(
                                                      $state,
                                                      [
                                                        {
                                                          name: "value",
                                                          plasmicStateName:
                                                            "input5.value"
                                                        }
                                                      ],
                                                      [],
                                                      AntdInput_Helpers ?? {},
                                                      child$Props
                                                    );

                                                    return (
                                                      <AntdInput
                                                        data-plasmic-name={
                                                          "input5"
                                                        }
                                                        data-plasmic-override={
                                                          overrides.input5
                                                        }
                                                        {...child$Props}
                                                      />
                                                    );
                                                  })()}
                                                </FormItemWrapper>
                                                <FormItemWrapper
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.formField__gwJq
                                                  )}
                                                  initialValue={"0"}
                                                  label={"Rotate"}
                                                  name={"rotate"}
                                                  rules={[
                                                    { ruleType: "required" }
                                                  ]}
                                                >
                                                  {(() => {
                                                    const child$Props = {
                                                      className: classNames(
                                                        "__wab_instance",
                                                        sty.input10
                                                      ),
                                                      onChange:
                                                        generateStateOnChangePropForCodeComponents(
                                                          $state,
                                                          "value",
                                                          ["input10", "value"],
                                                          AntdInput_Helpers
                                                        ),
                                                      value:
                                                        generateStateValueProp(
                                                          $state,
                                                          ["input10", "value"]
                                                        )
                                                    };
                                                    initializeCodeComponentStates(
                                                      $state,
                                                      [
                                                        {
                                                          name: "value",
                                                          plasmicStateName:
                                                            "input10.value"
                                                        }
                                                      ],
                                                      [],
                                                      AntdInput_Helpers ?? {},
                                                      child$Props
                                                    );

                                                    return (
                                                      <AntdInput
                                                        data-plasmic-name={
                                                          "input10"
                                                        }
                                                        data-plasmic-override={
                                                          overrides.input10
                                                        }
                                                        {...child$Props}
                                                      />
                                                    );
                                                  })()}
                                                </FormItemWrapper>
                                              </Stack__>
                                              <FormItemWrapper
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.formField__aA6Mz
                                                )}
                                                initialValue={undefined}
                                                label={"position"}
                                                name={"position"}
                                                rules={[
                                                  { ruleType: "required" }
                                                ]}
                                              >
                                                <AntdSelect
                                                  data-plasmic-name={"select3"}
                                                  data-plasmic-override={
                                                    overrides.select3
                                                  }
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.select3
                                                  )}
                                                  defaultStylesClassName={classNames(
                                                    projectcss.root_reset,
                                                    projectcss.plasmic_default_styles,
                                                    projectcss.plasmic_mixins,
                                                    projectcss.plasmic_tokens,
                                                    plasmic_antd_5_hostless_css.plasmic_tokens,
                                                    plasmic_plasmic_rich_components_css.plasmic_tokens
                                                  )}
                                                  onChange={generateStateOnChangeProp(
                                                    $state,
                                                    ["select3", "value"]
                                                  )}
                                                  options={(() => {
                                                    try {
                                                      return $queries.queryGetPrinfulBlueprint.data.response.result.product.files
                                                        .filter(
                                                          i =>
                                                            i.id !== "mockup" &&
                                                            i.id !== "preview"
                                                        )
                                                        .map(i => ({
                                                          value: i.id,
                                                          label:
                                                            i.id.toLocaleUpperCase()
                                                        }));
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  placeholder={"Select..."}
                                                  popupScopeClassName={
                                                    sty["select3__popup"]
                                                  }
                                                  value={generateStateValueProp(
                                                    $state,
                                                    ["select3", "value"]
                                                  )}
                                                />
                                              </FormItemWrapper>
                                              {(_par =>
                                                !_par
                                                  ? []
                                                  : Array.isArray(_par)
                                                  ? _par
                                                  : [_par])(
                                                (() => {
                                                  try {
                                                    return $queries.queryGetPrintfulBlueprint.data.response.result.product.options.filter(
                                                      option =>
                                                        !option.id.includes(
                                                          "notes"
                                                        )
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return [];
                                                    }
                                                    throw e;
                                                  }
                                                })()
                                              ).map(
                                                (
                                                  __plasmic_item_0,
                                                  __plasmic_idx_0
                                                ) => {
                                                  const currentItem =
                                                    __plasmic_item_0;
                                                  const currentIndex =
                                                    __plasmic_idx_0;
                                                  return (
                                                    <FormItemWrapper
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.formField___4LnR6
                                                      )}
                                                      key={currentIndex}
                                                      label={
                                                        <div
                                                          className={classNames(
                                                            projectcss.all,
                                                            projectcss.__wab_text,
                                                            sty.text__cc44
                                                          )}
                                                        >
                                                          <React.Fragment>
                                                            {(() => {
                                                              try {
                                                                return currentItem.title;
                                                              } catch (e) {
                                                                if (
                                                                  e instanceof
                                                                    TypeError ||
                                                                  e?.plasmicType ===
                                                                    "PlasmicUndefinedDataError"
                                                                ) {
                                                                  return "Label";
                                                                }
                                                                throw e;
                                                              }
                                                            })()}
                                                          </React.Fragment>
                                                        </div>
                                                      }
                                                      name={(() => {
                                                        try {
                                                          return currentItem.id;
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return undefined;
                                                          }
                                                          throw e;
                                                        }
                                                      })()}
                                                    >
                                                      {(() => {
                                                        const child$Props = {
                                                          className: classNames(
                                                            "__wab_instance",
                                                            sty.select2
                                                          ),
                                                          defaultStylesClassName:
                                                            classNames(
                                                              projectcss.root_reset,
                                                              projectcss.plasmic_default_styles,
                                                              projectcss.plasmic_mixins,
                                                              projectcss.plasmic_tokens,
                                                              plasmic_antd_5_hostless_css.plasmic_tokens,
                                                              plasmic_plasmic_rich_components_css.plasmic_tokens
                                                            ),
                                                          onChange:
                                                            generateStateOnChangeProp(
                                                              $state,
                                                              [
                                                                "select2",
                                                                __plasmic_idx_0,
                                                                "value"
                                                              ]
                                                            ),
                                                          options: [
                                                            {
                                                              value: "option1",
                                                              label: "Option 1",
                                                              type: "option"
                                                            },
                                                            {
                                                              value: "option2",
                                                              label: "Option 2",
                                                              type: "option"
                                                            }
                                                          ],
                                                          placeholder:
                                                            "Select...",
                                                          popupScopeClassName:
                                                            sty[
                                                              "select2__popup"
                                                            ],
                                                          value:
                                                            generateStateValueProp(
                                                              $state,
                                                              [
                                                                "select2",
                                                                __plasmic_idx_0,
                                                                "value"
                                                              ]
                                                            )
                                                        };
                                                        initializeCodeComponentStates(
                                                          $state,
                                                          [
                                                            {
                                                              name: "value",
                                                              plasmicStateName:
                                                                "select2[].value"
                                                            }
                                                          ],
                                                          [__plasmic_idx_0],
                                                          undefined ?? {},
                                                          child$Props
                                                        );
                                                        initializePlasmicStates(
                                                          $state,
                                                          [
                                                            {
                                                              name: "select2[].value",
                                                              initFunc: ({
                                                                $props,
                                                                $state,
                                                                $queries
                                                              }) => undefined
                                                            }
                                                          ],
                                                          [__plasmic_idx_0]
                                                        );
                                                        return (
                                                          <AntdSelect
                                                            data-plasmic-name={
                                                              "select2"
                                                            }
                                                            data-plasmic-override={
                                                              overrides.select2
                                                            }
                                                            {...child$Props}
                                                          />
                                                        );
                                                      })()}
                                                    </FormItemWrapper>
                                                  );
                                                }
                                              )}
                                              <FormItemWrapper
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.formField__fvCeo
                                                )}
                                                initialValue={undefined}
                                                label={"image_id"}
                                                name={"image_id"}
                                                rules={[
                                                  { ruleType: "required" }
                                                ]}
                                              >
                                                <AntdSelect
                                                  data-plasmic-name={"select8"}
                                                  data-plasmic-override={
                                                    overrides.select8
                                                  }
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.select8
                                                  )}
                                                  defaultStylesClassName={classNames(
                                                    projectcss.root_reset,
                                                    projectcss.plasmic_default_styles,
                                                    projectcss.plasmic_mixins,
                                                    projectcss.plasmic_tokens,
                                                    plasmic_antd_5_hostless_css.plasmic_tokens,
                                                    plasmic_plasmic_rich_components_css.plasmic_tokens
                                                  )}
                                                  onChange={generateStateOnChangeProp(
                                                    $state,
                                                    ["select8", "value"]
                                                  )}
                                                  options={(() => {
                                                    const __composite = [
                                                      {
                                                        value: null,
                                                        label: null,
                                                        type: "option"
                                                      },
                                                      {
                                                        value: null,
                                                        label: null,
                                                        type: "option"
                                                      }
                                                    ];
                                                    __composite["0"]["value"] =
                                                      "Design";
                                                    __composite["0"]["label"] =
                                                      "Design";
                                                    __composite["1"]["value"] =
                                                      "Logo";
                                                    __composite["1"]["label"] =
                                                      "Logo";
                                                    return __composite;
                                                  })()}
                                                  placeholder={"Select..."}
                                                  popupScopeClassName={
                                                    sty["select8__popup"]
                                                  }
                                                  value={generateStateValueProp(
                                                    $state,
                                                    ["select8", "value"]
                                                  )}
                                                />
                                              </FormItemWrapper>
                                              <FormItemWrapper
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.formField__apSHa
                                                )}
                                                initialValue={(() => {
                                                  try {
                                                    return parseInt(
                                                      $state.selectedProduct.id
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return undefined;
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                                label={"Rotate"}
                                                name={"printful_product_id"}
                                                rules={[]}
                                              >
                                                {(() => {
                                                  const child$Props = {
                                                    className: classNames(
                                                      "__wab_instance",
                                                      sty.input11
                                                    ),
                                                    onChange:
                                                      generateStateOnChangePropForCodeComponents(
                                                        $state,
                                                        "value",
                                                        ["input11", "value"],
                                                        AntdInput_Helpers
                                                      ),
                                                    type: "text",
                                                    value:
                                                      generateStateValueProp(
                                                        $state,
                                                        ["input11", "value"]
                                                      )
                                                  };
                                                  initializeCodeComponentStates(
                                                    $state,
                                                    [
                                                      {
                                                        name: "value",
                                                        plasmicStateName:
                                                          "input11.value"
                                                      }
                                                    ],
                                                    [],
                                                    AntdInput_Helpers ?? {},
                                                    child$Props
                                                  );

                                                  return (
                                                    <AntdInput
                                                      data-plasmic-name={
                                                        "input11"
                                                      }
                                                      data-plasmic-override={
                                                        overrides.input11
                                                      }
                                                      {...child$Props}
                                                    />
                                                  );
                                                })()}
                                              </FormItemWrapper>
                                              <AntdButton
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button__bV2
                                                )}
                                                submitsForm={true}
                                                type={"primary"}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__kzWmd
                                                  )}
                                                >
                                                  {"Submit"}
                                                </div>
                                              </AntdButton>
                                            </FormWrapper>
                                          );
                                        })()}
                                      </AntdModal>
                                      {(() => {
                                        const child$Props = {
                                          className: classNames(
                                            "__wab_instance",
                                            sty.printfulPlaceholdersTable
                                          ),
                                          data: (() => {
                                            try {
                                              return $queries.querySupPrintfulPlaceholders;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })(),
                                          fields: (() => {
                                            const __composite = [
                                              { key: "id", fieldId: "id" },
                                              {
                                                key: "position",
                                                fieldId: "position"
                                              },
                                              {
                                                key: "image_id",
                                                fieldId: "image_id"
                                              },
                                              {
                                                key: "created_at",
                                                fieldId: "created_at"
                                              },
                                              {
                                                key: "rotate",
                                                fieldId: "rotate"
                                              },
                                              { key: "x", fieldId: "x" },
                                              { key: "y", fieldId: "y" },
                                              {
                                                key: "printful_product_id",
                                                fieldId: "printful_product_id",
                                                isHidden: null
                                              },
                                              {
                                                key: "scale",
                                                fieldId: "scale"
                                              },
                                              {
                                                key: "options_json",
                                                fieldId: "options_json",
                                                isHidden: null
                                              }
                                            ];
                                            __composite["7"]["isHidden"] = true;
                                            __composite["9"]["isHidden"] = true;
                                            return __composite;
                                          })(),

                                          hideColumnPicker: true,
                                          hideExports: true,
                                          hideSearch: true,
                                          onRowSelectionChanged: async (
                                            ...eventArgs: any
                                          ) => {
                                            generateStateOnChangePropForCodeComponents(
                                              $state,
                                              "selectedRowKey",
                                              [
                                                "printfulPlaceholdersTable",
                                                "selectedRowKey"
                                              ],
                                              RichTable_Helpers
                                            ).apply(null, eventArgs);
                                            generateStateOnChangePropForCodeComponents(
                                              $state,
                                              "selectedRow",
                                              [
                                                "printfulPlaceholdersTable",
                                                "selectedRow"
                                              ],
                                              RichTable_Helpers
                                            ).apply(null, eventArgs);
                                            generateStateOnChangePropForCodeComponents(
                                              $state,
                                              "selectedRows",
                                              [
                                                "printfulPlaceholdersTable",
                                                "selectedRows"
                                              ],
                                              RichTable_Helpers
                                            ).apply(null, eventArgs);
                                            generateStateOnChangePropForCodeComponents(
                                              $state,
                                              "selectedRowKeys",
                                              [
                                                "printfulPlaceholdersTable",
                                                "selectedRowKeys"
                                              ],
                                              RichTable_Helpers
                                            ).apply(null, eventArgs);
                                          },
                                          pagination: false,
                                          rowActions: (() => {
                                            const __composite = [
                                              {
                                                type: "item",
                                                label: null,
                                                onClick: null
                                              },
                                              { type: "item", label: null }
                                            ];
                                            __composite["0"]["label"] =
                                              "Delete";
                                            __composite["0"]["onClick"] =
                                              async (rowKey, row) => {
                                                const $steps = {};

                                                $steps["postgresDeleteMany"] =
                                                  true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          dataOp: {
                                                            sourceId:
                                                              "83X9ZdYzYUYJtgqe5fwXeX",
                                                            opId: "e4e9bd4d-5c7c-46e5-9ab6-a90c7e8d09bb",
                                                            userArgs: {
                                                              conditions: [
                                                                row.id
                                                              ]
                                                            },
                                                            cacheKey: null,
                                                            invalidatedKeys: [
                                                              "plasmic_refresh_all"
                                                            ],
                                                            roleId: null
                                                          }
                                                        };
                                                        return (async ({
                                                          dataOp,
                                                          continueOnError
                                                        }) => {
                                                          try {
                                                            const response =
                                                              await executePlasmicDataOp(
                                                                dataOp,
                                                                {
                                                                  userAuthToken:
                                                                    dataSourcesCtx?.userAuthToken,
                                                                  user: dataSourcesCtx?.user
                                                                }
                                                              );
                                                            await plasmicInvalidate(
                                                              dataOp.invalidatedKeys
                                                            );
                                                            return response;
                                                          } catch (e) {
                                                            if (
                                                              !continueOnError
                                                            ) {
                                                              throw e;
                                                            }
                                                            return e;
                                                          }
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                if (
                                                  $steps[
                                                    "postgresDeleteMany"
                                                  ] != null &&
                                                  typeof $steps[
                                                    "postgresDeleteMany"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "postgresDeleteMany"
                                                  ].then === "function"
                                                ) {
                                                  $steps["postgresDeleteMany"] =
                                                    await $steps[
                                                      "postgresDeleteMany"
                                                    ];
                                                }
                                              };
                                            __composite["1"]["label"] = "Edit";
                                            return __composite;
                                          })(),

                                          scopeClassName:
                                            sty[
                                              "printfulPlaceholdersTable__instance"
                                            ],
                                          selectedRowKey:
                                            generateStateValueProp($state, [
                                              "printfulPlaceholdersTable",
                                              "selectedRowKey"
                                            ]),
                                          selectedRowKeys:
                                            generateStateValueProp($state, [
                                              "printfulPlaceholdersTable",
                                              "selectedRowKeys"
                                            ]),
                                          themeResetClassName: classNames(
                                            projectcss.root_reset,
                                            projectcss.root_reset_tags,
                                            projectcss.plasmic_default_styles,
                                            projectcss.plasmic_mixins,
                                            projectcss.plasmic_tokens,
                                            plasmic_antd_5_hostless_css.plasmic_tokens,
                                            plasmic_plasmic_rich_components_css.plasmic_tokens
                                          )
                                        };
                                        initializeCodeComponentStates(
                                          $state,
                                          [
                                            {
                                              name: "selectedRowKey",
                                              plasmicStateName:
                                                "printfulPlaceholdersTable.selectedRowKey"
                                            },
                                            {
                                              name: "selectedRow",
                                              plasmicStateName:
                                                "printfulPlaceholdersTable.selectedRow"
                                            },
                                            {
                                              name: "selectedRows",
                                              plasmicStateName:
                                                "printfulPlaceholdersTable.selectedRows"
                                            },
                                            {
                                              name: "selectedRowKeys",
                                              plasmicStateName:
                                                "printfulPlaceholdersTable.selectedRowKeys"
                                            }
                                          ],
                                          [],
                                          RichTable_Helpers ?? {},
                                          child$Props
                                        );

                                        return (
                                          <RichTable
                                            data-plasmic-name={
                                              "printfulPlaceholdersTable"
                                            }
                                            data-plasmic-override={
                                              overrides.printfulPlaceholdersTable
                                            }
                                            {...child$Props}
                                          />
                                        );
                                      })()}
                                    </AntdTabItem>
                                  </React.Fragment>
                                }
                                onChange={generateStateOnChangeProp($state, [
                                  "tabsEditPrintfulProduct",
                                  "activeKey"
                                ])}
                                sticky={false}
                                tabBarBackground={"#FFF"}
                                tabsDropdownScopeClassName={
                                  sty["tabsEditPrintfulProduct__tabsDropdown"]
                                }
                                tabsScopeClassName={
                                  sty["tabsEditPrintfulProduct__tabs"]
                                }
                              />
                            </AntdModal>
                          </Stack__>
                          {(() => {
                            try {
                              return (
                                $queries.getSupPrintfulProducts.data.length !==
                                0
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__oXyF
                              )}
                            >
                              <div
                                data-plasmic-name={"search3"}
                                data-plasmic-override={overrides.search3}
                                className={classNames(
                                  projectcss.all,
                                  sty.search3
                                )}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.form3
                                    ),
                                    extendedOnValuesChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["form3", "value"],
                                        FormWrapper_Helpers
                                      ),
                                    formItems: [
                                      {
                                        label: "Name",
                                        name: "name",
                                        inputType: "Text"
                                      },
                                      {
                                        label: "Message",
                                        name: "message",
                                        inputType: "Text Area"
                                      }
                                    ],
                                    labelCol: { span: 8, horizontalOnly: true },
                                    layout: "vertical",
                                    mode: "advanced",
                                    onFinish: async values => {
                                      const $steps = {};

                                      $steps["updateVariable5"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["search4"]
                                              },
                                              operation: 0,
                                              value:
                                                $state.form3.value.search
                                                  .charAt(0)
                                                  .toUpperCase() +
                                                $state.form3.value.search.slice(
                                                  1
                                                )
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateVariable5"] != null &&
                                        typeof $steps["updateVariable5"] ===
                                          "object" &&
                                        typeof $steps["updateVariable5"]
                                          .then === "function"
                                      ) {
                                        $steps["updateVariable5"] =
                                          await $steps["updateVariable5"];
                                      }
                                    },
                                    onIsSubmittingChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "isSubmitting",
                                        ["form3", "isSubmitting"],
                                        FormWrapper_Helpers
                                      ),
                                    ref: ref => {
                                      $refs["form3"] = ref;
                                    },
                                    submitSlot: null,
                                    wrapperCol: {
                                      span: 16,
                                      horizontalOnly: true
                                    }
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "form3.value"
                                      },
                                      {
                                        name: "isSubmitting",
                                        plasmicStateName: "form3.isSubmitting"
                                      }
                                    ],
                                    [],
                                    FormWrapper_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <FormWrapper
                                      data-plasmic-name={"form3"}
                                      data-plasmic-override={overrides.form3}
                                      {...child$Props}
                                    >
                                      <FormItemWrapper
                                        className={classNames(
                                          "__wab_instance",
                                          sty.formField___0Urpx
                                        )}
                                        initialValue={``}
                                        label={null}
                                        name={"search"}
                                      >
                                        {(() => {
                                          const child$Props = {
                                            className: classNames(
                                              "__wab_instance",
                                              sty.input13
                                            ),
                                            onChange:
                                              generateStateOnChangePropForCodeComponents(
                                                $state,
                                                "value",
                                                ["input13", "value"],
                                                AntdInput_Helpers
                                              ),
                                            value: generateStateValueProp(
                                              $state,
                                              ["input13", "value"]
                                            )
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "value",
                                                plasmicStateName:
                                                  "input13.value"
                                              }
                                            ],
                                            [],
                                            AntdInput_Helpers ?? {},
                                            child$Props
                                          );

                                          return (
                                            <AntdInput
                                              data-plasmic-name={"input13"}
                                              data-plasmic-override={
                                                overrides.input13
                                              }
                                              {...child$Props}
                                            />
                                          );
                                        })()}
                                      </FormItemWrapper>
                                      <FormItemWrapper
                                        className={classNames(
                                          "__wab_instance",
                                          sty.formField___7S5Bj
                                        )}
                                        label={"Message"}
                                        name={"message"}
                                      >
                                        {(() => {
                                          const child$Props = {
                                            className: classNames(
                                              "__wab_instance",
                                              sty.textArea2
                                            ),
                                            onChange:
                                              generateStateOnChangePropForCodeComponents(
                                                $state,
                                                "value",
                                                ["textArea2", "value"],
                                                AntdTextArea_Helpers
                                              ),
                                            value: generateStateValueProp(
                                              $state,
                                              ["textArea2", "value"]
                                            )
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "value",
                                                plasmicStateName:
                                                  "textArea2.value"
                                              }
                                            ],
                                            [],
                                            AntdTextArea_Helpers ?? {},
                                            child$Props
                                          );

                                          return (
                                            <AntdTextArea
                                              data-plasmic-name={"textArea2"}
                                              data-plasmic-override={
                                                overrides.textArea2
                                              }
                                              {...child$Props}
                                            />
                                          );
                                        })()}
                                      </FormItemWrapper>
                                      <AntdButton
                                        className={classNames(
                                          "__wab_instance",
                                          sty.button__zjHtT
                                        )}
                                        submitsForm={true}
                                        type={"primary"}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__nomQp
                                          )}
                                        >
                                          {"Search"}
                                        </div>
                                      </AntdButton>
                                    </FormWrapper>
                                  );
                                })()}
                              </div>
                              <div
                                data-plasmic-name={"tableHead3"}
                                data-plasmic-override={overrides.tableHead3}
                                className={classNames(
                                  projectcss.all,
                                  sty.tableHead3
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__vgWnj
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__vebSe
                                    )}
                                  >
                                    {"validations"}
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__djW41
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__nn75
                                    )}
                                  >
                                    {"id"}
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__xqm9C
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___519Zr
                                    )}
                                  >
                                    {"title"}
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___4SZvk
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__yuAsk
                                    )}
                                  >
                                    {"options_json"}
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___9NbEe
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__hpVxi
                                    )}
                                  >
                                    {"tags"}
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__inrS
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__sciP
                                    )}
                                  >
                                    {"blueprints_id"}
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__ftTBw
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__oRbWv
                                    )}
                                  >
                                    {"actions"}
                                  </div>
                                </div>
                              </div>
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $queries.getSupPrintfulProducts.data;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                const currentItem = __plasmic_item_0;
                                const currentIndex = __plasmic_idx_0;
                                return (
                                  <Stack__
                                    as={"div"}
                                    data-plasmic-name={"tableBody2"}
                                    data-plasmic-override={overrides.tableBody2}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.tableBody2
                                    )}
                                    key={currentIndex}
                                  >
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__k97N
                                      )}
                                    >
                                      {(() => {
                                        try {
                                          return $queries.totalPrintfulVariant.data.filter(
                                            row => row.price === currentItem.id
                                          ).length > 0
                                            ? true
                                            : undefined;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__sBzMb
                                          )}
                                        >
                                          {(() => {
                                            try {
                                              return $queries.totalPrintfulVariant.data
                                                .filter(
                                                  row =>
                                                    row.printful_product_id ===
                                                    currentItem.id
                                                )
                                                .every(row => row.price !== 0)
                                                ? true
                                                : undefined;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return true;
                                              }
                                              throw e;
                                            }
                                          })() ? (
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox___6XTuV
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__mrcI4
                                                )}
                                              >
                                                {
                                                  "Prices must be greater than 0"
                                                }
                                              </div>
                                            </div>
                                          ) : null}
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return $queries.totalPrintfulPlaceholder.data.filter(
                                            row =>
                                              row["printful_product_id"] ===
                                              currentItem.id
                                          ).length === 0
                                            ? true
                                            : undefined;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__sqzv6
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__bmfUu
                                            )}
                                          >
                                            {"no printful placeholder"}
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return $queries.totalPrintfulVariant.data.filter(
                                            row =>
                                              row["printful_product_id"] ===
                                              currentItem.id
                                          ).length === 0
                                            ? true
                                            : undefined;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__wW6P
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__lbXol
                                            )}
                                          >
                                            {"no printful variant"}
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return currentItem.printing_technique ===
                                            null
                                            ? true
                                            : undefined;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox___8IyGi
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__iKdIo
                                            )}
                                          >
                                            {"no printing technique"}
                                          </div>
                                        </div>
                                      ) : null}
                                    </Stack__>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__bh8F8
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__gPb0O
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__ay1EZ
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.id;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "id";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__ygs9M
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__paOxU
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.title;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "title";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__sx1ZU
                                        )}
                                      >
                                        {(_par =>
                                          !_par
                                            ? []
                                            : Array.isArray(_par)
                                            ? _par
                                            : [_par])(
                                          (() => {
                                            try {
                                              return currentItem.options_json;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()
                                        ).map(
                                          (
                                            __plasmic_item_1,
                                            __plasmic_idx_1
                                          ) => {
                                            const currentItem =
                                              __plasmic_item_1;
                                            const currentIndex =
                                              __plasmic_idx_1;
                                            return (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__sq9Dl
                                                )}
                                                key={currentIndex}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__p1UCu
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return JSON.stringify(
                                                          currentItem,
                                                          null,
                                                          2
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return " ";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                              </div>
                                            );
                                          }
                                        )}
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__jAhXv
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__vPd8I
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.tags;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "tags";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__ywWyA
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__kYkw9
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.blueprint_id;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "blueprints_id";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                      <Stack__
                                        as={"div"}
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__wnxG
                                        )}
                                      >
                                        <AntdButton
                                          className={classNames(
                                            "__wab_instance",
                                            sty.button__hxuzO
                                          )}
                                          onClick={async () => {
                                            const $steps = {};

                                            $steps["updateSelectedProduct"] =
                                              true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "selectedProduct"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: currentItem
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                            if (
                                              $steps["updateSelectedProduct"] !=
                                                null &&
                                              typeof $steps[
                                                "updateSelectedProduct"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateSelectedProduct"
                                              ].then === "function"
                                            ) {
                                              $steps["updateSelectedProduct"] =
                                                await $steps[
                                                  "updateSelectedProduct"
                                                ];
                                            }

                                            $steps[
                                              "runActionOnFormEditPrintfulProduct"
                                            ] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    tplRef:
                                                      "formEditPrintfulProduct"
                                                  };
                                                  return (({
                                                    tplRef,
                                                    action,
                                                    args
                                                  }) => {
                                                    return $refs?.[tplRef]?.[
                                                      action
                                                    ]?.(...(args ?? []));
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps[
                                                "runActionOnFormEditPrintfulProduct"
                                              ] != null &&
                                              typeof $steps[
                                                "runActionOnFormEditPrintfulProduct"
                                              ] === "object" &&
                                              typeof $steps[
                                                "runActionOnFormEditPrintfulProduct"
                                              ].then === "function"
                                            ) {
                                              $steps[
                                                "runActionOnFormEditPrintfulProduct"
                                              ] = await $steps[
                                                "runActionOnFormEditPrintfulProduct"
                                              ];
                                            }

                                            $steps["updateTabs2ActiveKey"] =
                                              true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "tabs2",
                                                          "activeKey"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: "1"
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                            if (
                                              $steps["updateTabs2ActiveKey"] !=
                                                null &&
                                              typeof $steps[
                                                "updateTabs2ActiveKey"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateTabs2ActiveKey"
                                              ].then === "function"
                                            ) {
                                              $steps["updateTabs2ActiveKey"] =
                                                await $steps[
                                                  "updateTabs2ActiveKey"
                                                ];
                                            }

                                            $steps[
                                              "updateModalEditPrintfulProductOpen"
                                            ] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "modalEditPrintfulProduct",
                                                        "open"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: true
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps[
                                                "updateModalEditPrintfulProductOpen"
                                              ] != null &&
                                              typeof $steps[
                                                "updateModalEditPrintfulProductOpen"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateModalEditPrintfulProductOpen"
                                              ].then === "function"
                                            ) {
                                              $steps[
                                                "updateModalEditPrintfulProductOpen"
                                              ] = await $steps[
                                                "updateModalEditPrintfulProductOpen"
                                              ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__zFAp
                                            )}
                                          >
                                            {"Edit"}
                                          </div>
                                        </AntdButton>
                                        <AntdButton
                                          className={classNames(
                                            "__wab_instance",
                                            sty.button__brfnw
                                          )}
                                          onClick={async () => {
                                            const $steps = {};

                                            $steps["postgresDeleteMany"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    dataOp: {
                                                      sourceId:
                                                        "83X9ZdYzYUYJtgqe5fwXeX",
                                                      opId: "f0fd4781-3725-495e-a64b-b28accae4e0d",
                                                      userArgs: {
                                                        conditions: [
                                                          currentItem.id
                                                        ]
                                                      },
                                                      cacheKey: null,
                                                      invalidatedKeys: [
                                                        "plasmic_refresh_all"
                                                      ],
                                                      roleId: null
                                                    }
                                                  };
                                                  return (async ({
                                                    dataOp,
                                                    continueOnError
                                                  }) => {
                                                    try {
                                                      const response =
                                                        await executePlasmicDataOp(
                                                          dataOp,
                                                          {
                                                            userAuthToken:
                                                              dataSourcesCtx?.userAuthToken,
                                                            user: dataSourcesCtx?.user
                                                          }
                                                        );
                                                      await plasmicInvalidate(
                                                        dataOp.invalidatedKeys
                                                      );
                                                      return response;
                                                    } catch (e) {
                                                      if (!continueOnError) {
                                                        throw e;
                                                      }
                                                      return e;
                                                    }
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["postgresDeleteMany"] !=
                                                null &&
                                              typeof $steps[
                                                "postgresDeleteMany"
                                              ] === "object" &&
                                              typeof $steps[
                                                "postgresDeleteMany"
                                              ].then === "function"
                                            ) {
                                              $steps["postgresDeleteMany"] =
                                                await $steps[
                                                  "postgresDeleteMany"
                                                ];
                                            }

                                            $steps["invokeGlobalAction"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    args: [
                                                      "warning",
                                                      "Printful product deleted"
                                                    ]
                                                  };
                                                  return $globalActions[
                                                    "plasmic-antd5-config-provider.showNotification"
                                                  ]?.apply(null, [
                                                    ...actionArgs.args
                                                  ]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["invokeGlobalAction"] !=
                                                null &&
                                              typeof $steps[
                                                "invokeGlobalAction"
                                              ] === "object" &&
                                              typeof $steps[
                                                "invokeGlobalAction"
                                              ].then === "function"
                                            ) {
                                              $steps["invokeGlobalAction"] =
                                                await $steps[
                                                  "invokeGlobalAction"
                                                ];
                                            }

                                            $steps["refreshData"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    queryInvalidation: [
                                                      "plasmic_refresh_all"
                                                    ]
                                                  };
                                                  return (async ({
                                                    queryInvalidation
                                                  }) => {
                                                    if (!queryInvalidation) {
                                                      return;
                                                    }
                                                    await plasmicInvalidate(
                                                      queryInvalidation
                                                    );
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["refreshData"] != null &&
                                              typeof $steps["refreshData"] ===
                                                "object" &&
                                              typeof $steps["refreshData"]
                                                .then === "function"
                                            ) {
                                              $steps["refreshData"] =
                                                await $steps["refreshData"];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__t8ZI
                                            )}
                                          >
                                            {"delete"}
                                          </div>
                                        </AntdButton>
                                      </Stack__>
                                    </div>
                                  </Stack__>
                                );
                              })}
                            </Stack__>
                          ) : null}
                        </AntdTabItem>
                      </React.Fragment>
                    }
                    onChange={generateStateOnChangeProp($state, [
                      "tabs",
                      "activeKey"
                    ])}
                    sticky={false}
                    tabBarBackground={"#FFF"}
                    tabsDropdownScopeClassName={sty["tabs__tabsDropdown"]}
                    tabsScopeClassName={sty["tabs__tabs"]}
                  />
                </React.Fragment>
              )}
            </DataCtxReader__>
          </PageLayout>
          <div className={classNames(projectcss.all, sty.freeBox___9Dtaw)}>
            <UpArrowSvgrepoComSvgIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              onClick={async event => {
                const $steps = {};

                $steps["goToTop"] = true
                  ? (() => {
                      const actionArgs = { destination: "#top" };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToTop"] != null &&
                  typeof $steps["goToTop"] === "object" &&
                  typeof $steps["goToTop"].then === "function"
                ) {
                  $steps["goToTop"] = await $steps["goToTop"];
                }
              }}
              role={"img"}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "h1",
    "tabs",
    "populatePrintifyProducts",
    "tablePrintifyProducts",
    "modalEditPrintifyProduct",
    "tabs2",
    "formEditPrintifyProduct",
    "select",
    "title",
    "titleTag",
    "description",
    "descriptionTag",
    "input3",
    "link",
    "_switch",
    "toggleIsEnabled",
    "inputPriceVariants",
    "syncPrice",
    "tablePrintifyVariants",
    "modalEditVariant",
    "formEditSinglePrintifyVariant",
    "modalNewPrintifyPlaceholder",
    "formNewPrintifyPlaceholder",
    "numberInput7",
    "numberInput8",
    "numberInput10",
    "numberInput11",
    "numberInput12",
    "numberInput9",
    "input4",
    "select4",
    "select5",
    "modalEditPlaceholder",
    "formEditPrintifyPlaceholder",
    "numberInput19",
    "numberInput20",
    "numberInput22",
    "numberInput23",
    "numberInput24",
    "numberInput21",
    "input9",
    "select6",
    "select7",
    "tablePrintifyPlaceholders",
    "search",
    "form2",
    "input12",
    "textArea",
    "tableHead2",
    "tableBody",
    "tablePrintfulProducts",
    "modalEditPrintfulProduct",
    "tabsEditPrintfulProduct",
    "formEditPrintfulProduct",
    "numberInput13",
    "titleTagz",
    "numberInput14",
    "textTagZ",
    "input6",
    "numberInput15",
    "numberInput16",
    "input7",
    "select10",
    "numberInput17",
    "numberInput18",
    "input8",
    "select9",
    "populatePrintfulVariants",
    "switch2",
    "inputPriceVariants2",
    "printfulVariantsTable",
    "modal",
    "form",
    "input",
    "input2",
    "input5",
    "input10",
    "select3",
    "select2",
    "select8",
    "input11",
    "printfulPlaceholdersTable",
    "search3",
    "form3",
    "input13",
    "textArea2",
    "tableHead3",
    "tableBody2",
    "svg"
  ],
  pageLayout: [
    "pageLayout",
    "h1",
    "tabs",
    "populatePrintifyProducts",
    "tablePrintifyProducts",
    "modalEditPrintifyProduct",
    "tabs2",
    "formEditPrintifyProduct",
    "select",
    "title",
    "titleTag",
    "description",
    "descriptionTag",
    "input3",
    "link",
    "_switch",
    "toggleIsEnabled",
    "inputPriceVariants",
    "syncPrice",
    "tablePrintifyVariants",
    "modalEditVariant",
    "formEditSinglePrintifyVariant",
    "modalNewPrintifyPlaceholder",
    "formNewPrintifyPlaceholder",
    "numberInput7",
    "numberInput8",
    "numberInput10",
    "numberInput11",
    "numberInput12",
    "numberInput9",
    "input4",
    "select4",
    "select5",
    "modalEditPlaceholder",
    "formEditPrintifyPlaceholder",
    "numberInput19",
    "numberInput20",
    "numberInput22",
    "numberInput23",
    "numberInput24",
    "numberInput21",
    "input9",
    "select6",
    "select7",
    "tablePrintifyPlaceholders",
    "search",
    "form2",
    "input12",
    "textArea",
    "tableHead2",
    "tableBody",
    "tablePrintfulProducts",
    "modalEditPrintfulProduct",
    "tabsEditPrintfulProduct",
    "formEditPrintfulProduct",
    "numberInput13",
    "titleTagz",
    "numberInput14",
    "textTagZ",
    "input6",
    "numberInput15",
    "numberInput16",
    "input7",
    "select10",
    "numberInput17",
    "numberInput18",
    "input8",
    "select9",
    "populatePrintfulVariants",
    "switch2",
    "inputPriceVariants2",
    "printfulVariantsTable",
    "modal",
    "form",
    "input",
    "input2",
    "input5",
    "input10",
    "select3",
    "select2",
    "select8",
    "input11",
    "printfulPlaceholdersTable",
    "search3",
    "form3",
    "input13",
    "textArea2",
    "tableHead3",
    "tableBody2"
  ],
  h1: ["h1"],
  tabs: [
    "tabs",
    "populatePrintifyProducts",
    "tablePrintifyProducts",
    "modalEditPrintifyProduct",
    "tabs2",
    "formEditPrintifyProduct",
    "select",
    "title",
    "titleTag",
    "description",
    "descriptionTag",
    "input3",
    "link",
    "_switch",
    "toggleIsEnabled",
    "inputPriceVariants",
    "syncPrice",
    "tablePrintifyVariants",
    "modalEditVariant",
    "formEditSinglePrintifyVariant",
    "modalNewPrintifyPlaceholder",
    "formNewPrintifyPlaceholder",
    "numberInput7",
    "numberInput8",
    "numberInput10",
    "numberInput11",
    "numberInput12",
    "numberInput9",
    "input4",
    "select4",
    "select5",
    "modalEditPlaceholder",
    "formEditPrintifyPlaceholder",
    "numberInput19",
    "numberInput20",
    "numberInput22",
    "numberInput23",
    "numberInput24",
    "numberInput21",
    "input9",
    "select6",
    "select7",
    "tablePrintifyPlaceholders",
    "search",
    "form2",
    "input12",
    "textArea",
    "tableHead2",
    "tableBody",
    "tablePrintfulProducts",
    "modalEditPrintfulProduct",
    "tabsEditPrintfulProduct",
    "formEditPrintfulProduct",
    "numberInput13",
    "titleTagz",
    "numberInput14",
    "textTagZ",
    "input6",
    "numberInput15",
    "numberInput16",
    "input7",
    "select10",
    "numberInput17",
    "numberInput18",
    "input8",
    "select9",
    "populatePrintfulVariants",
    "switch2",
    "inputPriceVariants2",
    "printfulVariantsTable",
    "modal",
    "form",
    "input",
    "input2",
    "input5",
    "input10",
    "select3",
    "select2",
    "select8",
    "input11",
    "printfulPlaceholdersTable",
    "search3",
    "form3",
    "input13",
    "textArea2",
    "tableHead3",
    "tableBody2"
  ],
  populatePrintifyProducts: ["populatePrintifyProducts"],
  tablePrintifyProducts: ["tablePrintifyProducts"],
  modalEditPrintifyProduct: [
    "modalEditPrintifyProduct",
    "tabs2",
    "formEditPrintifyProduct",
    "select",
    "title",
    "titleTag",
    "description",
    "descriptionTag",
    "input3",
    "link",
    "_switch",
    "toggleIsEnabled",
    "inputPriceVariants",
    "syncPrice",
    "tablePrintifyVariants",
    "modalEditVariant",
    "formEditSinglePrintifyVariant",
    "modalNewPrintifyPlaceholder",
    "formNewPrintifyPlaceholder",
    "numberInput7",
    "numberInput8",
    "numberInput10",
    "numberInput11",
    "numberInput12",
    "numberInput9",
    "input4",
    "select4",
    "select5",
    "modalEditPlaceholder",
    "formEditPrintifyPlaceholder",
    "numberInput19",
    "numberInput20",
    "numberInput22",
    "numberInput23",
    "numberInput24",
    "numberInput21",
    "input9",
    "select6",
    "select7",
    "tablePrintifyPlaceholders"
  ],
  tabs2: [
    "tabs2",
    "formEditPrintifyProduct",
    "select",
    "title",
    "titleTag",
    "description",
    "descriptionTag",
    "input3",
    "link",
    "_switch",
    "toggleIsEnabled",
    "inputPriceVariants",
    "syncPrice",
    "tablePrintifyVariants",
    "modalEditVariant",
    "formEditSinglePrintifyVariant",
    "modalNewPrintifyPlaceholder",
    "formNewPrintifyPlaceholder",
    "numberInput7",
    "numberInput8",
    "numberInput10",
    "numberInput11",
    "numberInput12",
    "numberInput9",
    "input4",
    "select4",
    "select5",
    "modalEditPlaceholder",
    "formEditPrintifyPlaceholder",
    "numberInput19",
    "numberInput20",
    "numberInput22",
    "numberInput23",
    "numberInput24",
    "numberInput21",
    "input9",
    "select6",
    "select7",
    "tablePrintifyPlaceholders"
  ],
  formEditPrintifyProduct: [
    "formEditPrintifyProduct",
    "select",
    "title",
    "titleTag",
    "description",
    "descriptionTag",
    "input3"
  ],
  select: ["select"],
  title: ["title", "titleTag"],
  titleTag: ["titleTag"],
  description: ["description", "descriptionTag"],
  descriptionTag: ["descriptionTag"],
  input3: ["input3"],
  link: ["link"],
  _switch: ["_switch"],
  toggleIsEnabled: ["toggleIsEnabled"],
  inputPriceVariants: ["inputPriceVariants"],
  syncPrice: ["syncPrice"],
  tablePrintifyVariants: ["tablePrintifyVariants"],
  modalEditVariant: ["modalEditVariant", "formEditSinglePrintifyVariant"],
  formEditSinglePrintifyVariant: ["formEditSinglePrintifyVariant"],
  modalNewPrintifyPlaceholder: [
    "modalNewPrintifyPlaceholder",
    "formNewPrintifyPlaceholder",
    "numberInput7",
    "numberInput8",
    "numberInput10",
    "numberInput11",
    "numberInput12",
    "numberInput9",
    "input4",
    "select4",
    "select5"
  ],
  formNewPrintifyPlaceholder: [
    "formNewPrintifyPlaceholder",
    "numberInput7",
    "numberInput8",
    "numberInput10",
    "numberInput11",
    "numberInput12",
    "numberInput9",
    "input4",
    "select4",
    "select5"
  ],
  numberInput7: ["numberInput7"],
  numberInput8: ["numberInput8"],
  numberInput10: ["numberInput10"],
  numberInput11: ["numberInput11"],
  numberInput12: ["numberInput12"],
  numberInput9: ["numberInput9"],
  input4: ["input4"],
  select4: ["select4"],
  select5: ["select5"],
  modalEditPlaceholder: [
    "modalEditPlaceholder",
    "formEditPrintifyPlaceholder",
    "numberInput19",
    "numberInput20",
    "numberInput22",
    "numberInput23",
    "numberInput24",
    "numberInput21",
    "input9",
    "select6",
    "select7"
  ],
  formEditPrintifyPlaceholder: [
    "formEditPrintifyPlaceholder",
    "numberInput19",
    "numberInput20",
    "numberInput22",
    "numberInput23",
    "numberInput24",
    "numberInput21",
    "input9",
    "select6",
    "select7"
  ],
  numberInput19: ["numberInput19"],
  numberInput20: ["numberInput20"],
  numberInput22: ["numberInput22"],
  numberInput23: ["numberInput23"],
  numberInput24: ["numberInput24"],
  numberInput21: ["numberInput21"],
  input9: ["input9"],
  select6: ["select6"],
  select7: ["select7"],
  tablePrintifyPlaceholders: ["tablePrintifyPlaceholders"],
  search: ["search", "form2", "input12", "textArea"],
  form2: ["form2", "input12", "textArea"],
  input12: ["input12"],
  textArea: ["textArea"],
  tableHead2: ["tableHead2"],
  tableBody: ["tableBody"],
  tablePrintfulProducts: ["tablePrintfulProducts"],
  modalEditPrintfulProduct: [
    "modalEditPrintfulProduct",
    "tabsEditPrintfulProduct",
    "formEditPrintfulProduct",
    "numberInput13",
    "titleTagz",
    "numberInput14",
    "textTagZ",
    "input6",
    "numberInput15",
    "numberInput16",
    "input7",
    "select10",
    "numberInput17",
    "numberInput18",
    "input8",
    "select9",
    "populatePrintfulVariants",
    "switch2",
    "inputPriceVariants2",
    "printfulVariantsTable",
    "modal",
    "form",
    "input",
    "input2",
    "input5",
    "input10",
    "select3",
    "select2",
    "select8",
    "input11",
    "printfulPlaceholdersTable"
  ],
  tabsEditPrintfulProduct: [
    "tabsEditPrintfulProduct",
    "formEditPrintfulProduct",
    "numberInput13",
    "titleTagz",
    "numberInput14",
    "textTagZ",
    "input6",
    "numberInput15",
    "numberInput16",
    "input7",
    "select10",
    "numberInput17",
    "numberInput18",
    "input8",
    "select9",
    "populatePrintfulVariants",
    "switch2",
    "inputPriceVariants2",
    "printfulVariantsTable",
    "modal",
    "form",
    "input",
    "input2",
    "input5",
    "input10",
    "select3",
    "select2",
    "select8",
    "input11",
    "printfulPlaceholdersTable"
  ],
  formEditPrintfulProduct: [
    "formEditPrintfulProduct",
    "numberInput13",
    "titleTagz",
    "numberInput14",
    "textTagZ",
    "input6",
    "numberInput15",
    "numberInput16",
    "input7",
    "select10",
    "numberInput17",
    "numberInput18",
    "input8",
    "select9"
  ],
  numberInput13: ["numberInput13"],
  titleTagz: ["titleTagz"],
  numberInput14: ["numberInput14"],
  textTagZ: ["textTagZ"],
  input6: ["input6"],
  numberInput15: ["numberInput15"],
  numberInput16: ["numberInput16"],
  input7: ["input7"],
  select10: ["select10"],
  numberInput17: ["numberInput17"],
  numberInput18: ["numberInput18"],
  input8: ["input8"],
  select9: ["select9"],
  populatePrintfulVariants: ["populatePrintfulVariants"],
  switch2: ["switch2"],
  inputPriceVariants2: ["inputPriceVariants2"],
  printfulVariantsTable: ["printfulVariantsTable"],
  modal: [
    "modal",
    "form",
    "input",
    "input2",
    "input5",
    "input10",
    "select3",
    "select2",
    "select8",
    "input11"
  ],
  form: [
    "form",
    "input",
    "input2",
    "input5",
    "input10",
    "select3",
    "select2",
    "select8",
    "input11"
  ],
  input: ["input"],
  input2: ["input2"],
  input5: ["input5"],
  input10: ["input10"],
  select3: ["select3"],
  select2: ["select2"],
  select8: ["select8"],
  input11: ["input11"],
  printfulPlaceholdersTable: ["printfulPlaceholdersTable"],
  search3: ["search3", "form3", "input13", "textArea2"],
  form3: ["form3", "input13", "textArea2"],
  input13: ["input13"],
  textArea2: ["textArea2"],
  tableHead3: ["tableHead3"],
  tableBody2: ["tableBody2"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  h1: "h1";
  tabs: typeof AntdTabs;
  populatePrintifyProducts: typeof AntdButton;
  tablePrintifyProducts: typeof RichTable;
  modalEditPrintifyProduct: typeof AntdModal;
  tabs2: typeof AntdTabs;
  formEditPrintifyProduct: typeof FormWrapper;
  select: typeof AntdSelect;
  title: "div";
  titleTag: typeof AntdInput;
  description: "div";
  descriptionTag: typeof AntdTextArea;
  input3: typeof AntdInput;
  link: "a";
  _switch: typeof AntdSwitch;
  toggleIsEnabled: typeof AntdButton;
  inputPriceVariants: typeof AntdInput;
  syncPrice: typeof AntdButton;
  tablePrintifyVariants: typeof RichTable;
  modalEditVariant: typeof AntdModal;
  formEditSinglePrintifyVariant: typeof FormWrapper;
  modalNewPrintifyPlaceholder: typeof AntdModal;
  formNewPrintifyPlaceholder: typeof FormWrapper;
  numberInput7: typeof AntdInputNumber;
  numberInput8: typeof AntdInputNumber;
  numberInput10: typeof AntdInputNumber;
  numberInput11: typeof AntdInputNumber;
  numberInput12: typeof AntdInputNumber;
  numberInput9: typeof AntdInputNumber;
  input4: typeof AntdInput;
  select4: typeof AntdSelect;
  select5: typeof AntdSelect;
  modalEditPlaceholder: typeof AntdModal;
  formEditPrintifyPlaceholder: typeof FormWrapper;
  numberInput19: typeof AntdInputNumber;
  numberInput20: typeof AntdInputNumber;
  numberInput22: typeof AntdInputNumber;
  numberInput23: typeof AntdInputNumber;
  numberInput24: typeof AntdInputNumber;
  numberInput21: typeof AntdInputNumber;
  input9: typeof AntdInput;
  select6: typeof AntdSelect;
  select7: typeof AntdSelect;
  tablePrintifyPlaceholders: typeof RichTable;
  search: "div";
  form2: typeof FormWrapper;
  input12: typeof AntdInput;
  textArea: typeof AntdTextArea;
  tableHead2: "div";
  tableBody: "div";
  tablePrintfulProducts: typeof RichTable;
  modalEditPrintfulProduct: typeof AntdModal;
  tabsEditPrintfulProduct: typeof AntdTabs;
  formEditPrintfulProduct: typeof FormWrapper;
  numberInput13: typeof AntdInputNumber;
  titleTagz: typeof AntdInput;
  numberInput14: typeof AntdInputNumber;
  textTagZ: typeof AntdTextArea;
  input6: typeof AntdInput;
  numberInput15: typeof AntdInputNumber;
  numberInput16: typeof AntdInputNumber;
  input7: typeof AntdInput;
  select10: typeof AntdSelect;
  numberInput17: typeof AntdInputNumber;
  numberInput18: typeof AntdInputNumber;
  input8: typeof AntdInput;
  select9: typeof AntdSelect;
  populatePrintfulVariants: typeof AntdButton;
  switch2: typeof AntdSwitch;
  inputPriceVariants2: typeof AntdInput;
  printfulVariantsTable: typeof RichTable;
  modal: typeof AntdModal;
  form: typeof FormWrapper;
  input: typeof AntdInput;
  input2: typeof AntdInput;
  input5: typeof AntdInput;
  input10: typeof AntdInput;
  select3: typeof AntdSelect;
  select2: typeof AntdSelect;
  select8: typeof AntdSelect;
  input11: typeof AntdInput;
  printfulPlaceholdersTable: typeof RichTable;
  search3: "div";
  form3: typeof FormWrapper;
  input13: typeof AntdInput;
  textArea2: typeof AntdTextArea;
  tableHead3: "div";
  tableBody2: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTesteditrecipe2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTesteditrecipe2__VariantsArgs;
    args?: PlasmicTesteditrecipe2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTesteditrecipe2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTesteditrecipe2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTesteditrecipe2__ArgProps,
          internalVariantPropNames: PlasmicTesteditrecipe2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTesteditrecipe2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTesteditrecipe2";
  } else {
    func.displayName = `PlasmicTesteditrecipe2.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={"d035f350-edf5-4268-af03-4480b52522b0"}
      appId={"2Up8DUmBB1Tx5dhznkvCW5"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "2Up8DUmBB1Tx5dhznkvCW5"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicTesteditrecipe2 = Object.assign(
  // Top-level PlasmicTesteditrecipe2 renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    h1: makeNodeComponent("h1"),
    tabs: makeNodeComponent("tabs"),
    populatePrintifyProducts: makeNodeComponent("populatePrintifyProducts"),
    tablePrintifyProducts: makeNodeComponent("tablePrintifyProducts"),
    modalEditPrintifyProduct: makeNodeComponent("modalEditPrintifyProduct"),
    tabs2: makeNodeComponent("tabs2"),
    formEditPrintifyProduct: makeNodeComponent("formEditPrintifyProduct"),
    select: makeNodeComponent("select"),
    title: makeNodeComponent("title"),
    titleTag: makeNodeComponent("titleTag"),
    description: makeNodeComponent("description"),
    descriptionTag: makeNodeComponent("descriptionTag"),
    input3: makeNodeComponent("input3"),
    link: makeNodeComponent("link"),
    _switch: makeNodeComponent("_switch"),
    toggleIsEnabled: makeNodeComponent("toggleIsEnabled"),
    inputPriceVariants: makeNodeComponent("inputPriceVariants"),
    syncPrice: makeNodeComponent("syncPrice"),
    tablePrintifyVariants: makeNodeComponent("tablePrintifyVariants"),
    modalEditVariant: makeNodeComponent("modalEditVariant"),
    formEditSinglePrintifyVariant: makeNodeComponent(
      "formEditSinglePrintifyVariant"
    ),
    modalNewPrintifyPlaceholder: makeNodeComponent(
      "modalNewPrintifyPlaceholder"
    ),
    formNewPrintifyPlaceholder: makeNodeComponent("formNewPrintifyPlaceholder"),
    numberInput7: makeNodeComponent("numberInput7"),
    numberInput8: makeNodeComponent("numberInput8"),
    numberInput10: makeNodeComponent("numberInput10"),
    numberInput11: makeNodeComponent("numberInput11"),
    numberInput12: makeNodeComponent("numberInput12"),
    numberInput9: makeNodeComponent("numberInput9"),
    input4: makeNodeComponent("input4"),
    select4: makeNodeComponent("select4"),
    select5: makeNodeComponent("select5"),
    modalEditPlaceholder: makeNodeComponent("modalEditPlaceholder"),
    formEditPrintifyPlaceholder: makeNodeComponent(
      "formEditPrintifyPlaceholder"
    ),
    numberInput19: makeNodeComponent("numberInput19"),
    numberInput20: makeNodeComponent("numberInput20"),
    numberInput22: makeNodeComponent("numberInput22"),
    numberInput23: makeNodeComponent("numberInput23"),
    numberInput24: makeNodeComponent("numberInput24"),
    numberInput21: makeNodeComponent("numberInput21"),
    input9: makeNodeComponent("input9"),
    select6: makeNodeComponent("select6"),
    select7: makeNodeComponent("select7"),
    tablePrintifyPlaceholders: makeNodeComponent("tablePrintifyPlaceholders"),
    search: makeNodeComponent("search"),
    form2: makeNodeComponent("form2"),
    input12: makeNodeComponent("input12"),
    textArea: makeNodeComponent("textArea"),
    tableHead2: makeNodeComponent("tableHead2"),
    tableBody: makeNodeComponent("tableBody"),
    tablePrintfulProducts: makeNodeComponent("tablePrintfulProducts"),
    modalEditPrintfulProduct: makeNodeComponent("modalEditPrintfulProduct"),
    tabsEditPrintfulProduct: makeNodeComponent("tabsEditPrintfulProduct"),
    formEditPrintfulProduct: makeNodeComponent("formEditPrintfulProduct"),
    numberInput13: makeNodeComponent("numberInput13"),
    titleTagz: makeNodeComponent("titleTagz"),
    numberInput14: makeNodeComponent("numberInput14"),
    textTagZ: makeNodeComponent("textTagZ"),
    input6: makeNodeComponent("input6"),
    numberInput15: makeNodeComponent("numberInput15"),
    numberInput16: makeNodeComponent("numberInput16"),
    input7: makeNodeComponent("input7"),
    select10: makeNodeComponent("select10"),
    numberInput17: makeNodeComponent("numberInput17"),
    numberInput18: makeNodeComponent("numberInput18"),
    input8: makeNodeComponent("input8"),
    select9: makeNodeComponent("select9"),
    populatePrintfulVariants: makeNodeComponent("populatePrintfulVariants"),
    switch2: makeNodeComponent("switch2"),
    inputPriceVariants2: makeNodeComponent("inputPriceVariants2"),
    printfulVariantsTable: makeNodeComponent("printfulVariantsTable"),
    modal: makeNodeComponent("modal"),
    form: makeNodeComponent("form"),
    input: makeNodeComponent("input"),
    input2: makeNodeComponent("input2"),
    input5: makeNodeComponent("input5"),
    input10: makeNodeComponent("input10"),
    select3: makeNodeComponent("select3"),
    select2: makeNodeComponent("select2"),
    select8: makeNodeComponent("select8"),
    input11: makeNodeComponent("input11"),
    printfulPlaceholdersTable: makeNodeComponent("printfulPlaceholdersTable"),
    search3: makeNodeComponent("search3"),
    form3: makeNodeComponent("form3"),
    input13: makeNodeComponent("input13"),
    textArea2: makeNodeComponent("textArea2"),
    tableHead3: makeNodeComponent("tableHead3"),
    tableBody2: makeNodeComponent("tableBody2"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicTesteditrecipe2
    internalVariantProps: PlasmicTesteditrecipe2__VariantProps,
    internalArgProps: PlasmicTesteditrecipe2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicTesteditrecipe2;
/* prettier-ignore-end */
