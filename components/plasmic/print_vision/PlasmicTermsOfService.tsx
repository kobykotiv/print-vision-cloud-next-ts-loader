// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2Up8DUmBB1Tx5dhznkvCW5
// Component: YEj_G5VEI0qw

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import PageLayout from "../../PageLayout"; // plasmic-import: nHDfdLqBbJ3Q/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 2Up8DUmBB1Tx5dhznkvCW5/projectcss
import sty from "./PlasmicTermsOfService.module.css"; // plasmic-import: YEj_G5VEI0qw/css

createPlasmicElementProxy;

export type PlasmicTermsOfService__VariantMembers = {};
export type PlasmicTermsOfService__VariantsArgs = {};
type VariantPropType = keyof PlasmicTermsOfService__VariantsArgs;
export const PlasmicTermsOfService__VariantProps = new Array<VariantPropType>();

export type PlasmicTermsOfService__ArgsType = {};
type ArgPropType = keyof PlasmicTermsOfService__ArgsType;
export const PlasmicTermsOfService__ArgProps = new Array<ArgPropType>();

export type PlasmicTermsOfService__OverridesType = {
  root?: Flex__<"div">;
  pageLayout?: Flex__<typeof PageLayout>;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultTermsOfServiceProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTermsOfService__RenderFunc(props: {
  variants: PlasmicTermsOfService__VariantsArgs;
  args: PlasmicTermsOfService__ArgsType;
  overrides: PlasmicTermsOfService__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <PageLayout
        data-plasmic-name={"pageLayout"}
        data-plasmic-override={overrides.pageLayout}
      >
        <DataCtxReader__>
          {$ctx => (
            <Embed
              data-plasmic-name={"embedHtml"}
              data-plasmic-override={overrides.embedHtml}
              className={classNames("__wab_instance", sty.embedHtml)}
              code={
                '<!DOCTYPE html>\r\n<html lang="en">\r\n<head>\r\n    <meta charset="UTF-8">\r\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\r\n    <title>Terms of Service</title>\r\n    <style>\r\n        body {\r\n            font-family: Arial, sans-serif;\r\n            line-height: 1.6;\r\n            margin: 20px;\r\n        }\r\n        h1, h2, h3 {\r\n            color: #333;\r\n        }\r\n        p {\r\n            margin-bottom: 10px;\r\n        }\r\n        ul {\r\n            margin-bottom: 10px;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <h1>Terms of Service</h1>\r\n    <p><strong>Last Updated:</strong> [Date]</p>\r\n\r\n    <p><strong>Welcome to PrintVision.Cloud</strong></p>\r\n\r\n    <p>These Terms of Service ("Terms") govern your access to and use of the PrintVision.Cloud platform ("Service"), operated by [Your Company Name] ("Company," "we," "our," or "us"). By accessing or using the Service, you agree to be bound by these Terms. If you do not agree with these Terms, please do not use the Service.</p>\r\n\r\n    <h2>1. Acceptance of Terms</h2>\r\n    <p>By using PrintVision.Cloud, you agree to comply with and be bound by these Terms. We reserve the right to modify these Terms at any time, and your continued use of the Service constitutes acceptance of any changes. It is your responsibility to review these Terms periodically.</p>\r\n\r\n    <h2>2. Service Description</h2>\r\n    <p>PrintVision.Cloud provides tools and features for managing and expanding print-on-demand designs across various products. The Service includes functionalities related to design creation, product templates, API integration, and more.</p>\r\n\r\n    <h2>3. User Accounts</h2>\r\n    <p>To use certain features of the Service, you may be required to create an account. You are responsible for maintaining the confidentiality of your account credentials and for all activities that occur under your account. You agree to notify us immediately of any unauthorized use of your account or any other breach of security.</p>\r\n\r\n    <h2>4. User Content</h2>\r\n    <p>You retain ownership of any content you create and upload using PrintVision.Cloud ("User Content"). However, by submitting User Content to the Service, you grant us a non-exclusive, royalty-free, worldwide, and perpetual license to use, display, and distribute your User Content solely for the purpose of providing and improving the Service.</p>\r\n\r\n    <h2>5. Prohibition on AI Training Data Use</h2>\r\n    <p>We explicitly affirm that PrintVision.Cloud does not use User Content as training data for any artificial intelligence (AI) models or algorithms. Your content is not used to train, develop, or enhance any AI systems operated by us or our affiliates.</p>\r\n\r\n    <h2>6. Acceptable Use</h2>\r\n    <p>You agree to use the Service only for lawful purposes and in accordance with these Terms. You may not use the Service in any manner that:</p>\r\n    <ul>\r\n        <li>Violates any applicable laws or regulations.</li>\r\n        <li>Infringes on the rights of others, including intellectual property rights.</li>\r\n        <li>Disrupts or interferes with the operation of the Service or other users\u2019 use of the Service.</li>\r\n        <li>Involves the transmission of harmful or malicious content.</li>\r\n    </ul>\r\n\r\n    <h2>7. Termination</h2>\r\n    <p>We may suspend or terminate your access to the Service at our sole discretion, with or without cause, and with or without notice, if you breach these Terms or if we believe that your use of the Service poses a risk to the Service or other users.</p>\r\n\r\n    <h2>8. Disclaimers</h2>\r\n    <p>The Service is provided on an "as-is" and "as-available" basis. We make no representations or warranties of any kind, express or implied, regarding the Service or its operation. We disclaim all warranties, including but not limited to implied warranties of merchantability and fitness for a particular purpose.</p>\r\n\r\n    <h2>9. Limitation of Liability</h2>\r\n    <p>To the fullest extent permitted by law, [Your Company Name] and its affiliates shall not be liable for any indirect, incidental, special, consequential, or punitive damages, or any loss of profits or data, arising out of or related to your use of the Service.</p>\r\n\r\n    <h2>10. Indemnification</h2>\r\n    <p>You agree to indemnify and hold harmless [Your Company Name], its affiliates, officers, directors, employees, and agents from any claims, liabilities, damages, losses, or expenses, including reasonable attorneys\u2019 fees, arising out of or related to your use of the Service or your violation of these Terms.</p>\r\n\r\n    <h2>11. Governing Law</h2>\r\n    <p>These Terms are governed by and construed in accordance with the laws of [Your State/Country], without regard to its conflict of laws principles. Any disputes arising out of or related to these Terms or the Service shall be resolved in the courts located in [Your State/Country].</p>\r\n\r\n    <h2>12. Contact Information</h2>\r\n    <p>If you have any questions about these Terms or the Service, please contact us at:</p>\r\n    <p><strong>[Your Company Name]</strong><br>\r\n    [Your Address]<br>\r\n    [Your Email Address]<br>\r\n    [Your Phone Number]</p>\r\n\r\n    <h2>13. Entire Agreement</h2>\r\n    <p>These Terms constitute the entire agreement between you and [Your Company Name] regarding the use of the Service and supersede all prior agreements and understandings, whether written or oral, relating to the Service.</p>\r\n\r\n    <p>By using PrintVision.Cloud, you acknowledge that you have read, understood, and agree to be bound by these Terms.</p>\r\n</body>\r\n</html>\r\n'
              }
            />
          )}
        </DataCtxReader__>
      </PageLayout>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "pageLayout", "embedHtml"],
  pageLayout: ["pageLayout", "embedHtml"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTermsOfService__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTermsOfService__VariantsArgs;
    args?: PlasmicTermsOfService__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTermsOfService__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTermsOfService__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTermsOfService__ArgProps,
          internalVariantPropNames: PlasmicTermsOfService__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTermsOfService__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTermsOfService";
  } else {
    func.displayName = `PlasmicTermsOfService.${nodeName}`;
  }
  return func;
}

export const PlasmicTermsOfService = Object.assign(
  // Top-level PlasmicTermsOfService renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicTermsOfService
    internalVariantProps: PlasmicTermsOfService__VariantProps,
    internalArgProps: PlasmicTermsOfService__ArgProps
  }
);

export default PlasmicTermsOfService;
/* prettier-ignore-end */
