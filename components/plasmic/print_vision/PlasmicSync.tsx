// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2Up8DUmBB1Tx5dhznkvCW5
// Component: mSsMjiy4tgBp

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import PageLayout from "../../PageLayout"; // plasmic-import: nHDfdLqBbJ3Q/component
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { AntdTabs } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdTabItem } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { ConditionGuard } from "@plasmicpkgs/plasmic-basic-components";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 2Up8DUmBB1Tx5dhznkvCW5/projectcss
import sty from "./PlasmicSync.module.css"; // plasmic-import: mSsMjiy4tgBp/css

createPlasmicElementProxy;

export type PlasmicSync__VariantMembers = {};
export type PlasmicSync__VariantsArgs = {};
type VariantPropType = keyof PlasmicSync__VariantsArgs;
export const PlasmicSync__VariantProps = new Array<VariantPropType>();

export type PlasmicSync__ArgsType = {};
type ArgPropType = keyof PlasmicSync__ArgsType;
export const PlasmicSync__ArgProps = new Array<ArgPropType>();

export type PlasmicSync__OverridesType = {
  root?: Flex__<"div">;
  pageLayout?: Flex__<typeof PageLayout>;
  table2?: Flex__<typeof RichTable>;
  tabs?: Flex__<typeof AntdTabs>;
  confirmSyncIndividual?: Flex__<typeof AntdModal>;
  table?: Flex__<typeof RichTable>;
  table3?: Flex__<"div">;
  tableHead?: Flex__<"div">;
  tableBody?: Flex__<"div">;
  validate?: Flex__<"div">;
  updateVariable?: Flex__<typeof ConditionGuard>;
  updateVariable2?: Flex__<typeof ConditionGuard>;
  timer?: Flex__<typeof Timer>;
  former?: Flex__<typeof FormWrapper>;
  input?: Flex__<typeof AntdInput>;
  input2?: Flex__<typeof AntdInput>;
  input3?: Flex__<typeof AntdInput>;
};

export interface DefaultSyncProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSync__RenderFunc(props: {
  variants: PlasmicSync__VariantsArgs;
  args: PlasmicSync__ArgsType;
  overrides: PlasmicSync__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "tabs.activeKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "table2.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table2.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table2.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table2.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "confirmSyncIndividual.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "syncState",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "payload",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "counter",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "invalidSyncDesign",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "former.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "former",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "former.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "former",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "syncAllIds",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    queryRecipe: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "1eff6c0a-8798-488d-be54-4fbe525286d1",
        userArgs: {
          keys: [$ctx.params.recipe]
        },
        cacheKey: `plasmic.$.1eff6c0a-8798-488d-be54-4fbe525286d1.$.`,
        invalidatedKeys: null,
        roleId: "d035f350-edf5-4268-af03-4480b52522b0"
      };
    }),
    queryDesign: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "05e7441d-d32d-4b99-9750-f2bc65e0dae0",
        userArgs: {
          keys: [$ctx.params.design]
        },
        cacheKey: `plasmic.$.05e7441d-d32d-4b99-9750-f2bc65e0dae0.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    queryPrintifyCatalog: usePlasmicDataOp(() => {
      return {
        sourceId: "fumskhn7h2QULzwkXAtFMC",
        opId: "aebd4bc5-f7e1-4b9a-9328-33ce65899b30",
        userArgs: {},
        cacheKey: `plasmic.$.aebd4bc5-f7e1-4b9a-9328-33ce65899b30.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    queryGetProductsFromRecipe: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "aeeaa2cd-af31-413c-8808-a60d5356ee2a",
        userArgs: {
          query: [$ctx.params.recipe]
        },
        cacheKey: `plasmic.$.aeeaa2cd-af31-413c-8808-a60d5356ee2a.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    queryGetPrintifyVariants: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "c0fb0a20-2df6-4466-93de-5d8716cb0b0f",
        userArgs: {
          filters: [$state.variable.id]
        },
        cacheKey: `plasmic.$.c0fb0a20-2df6-4466-93de-5d8716cb0b0f.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    queryGetPrintifyPlaceholders: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "e183df9e-abbe-4e5f-a20d-dc0eda82bb31",
        userArgs: {
          filters: [$state.variable.id]
        },
        cacheKey: `plasmic.$.e183df9e-abbe-4e5f-a20d-dc0eda82bb31.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    syncDesignProduct: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "618b7129-54e1-4cfc-a1f9-96eb9d026d90",
        userArgs: {},
        cacheKey: `plasmic.$.618b7129-54e1-4cfc-a1f9-96eb9d026d90.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    placeholder: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "e183df9e-abbe-4e5f-a20d-dc0eda82bb31",
        userArgs: {
          filters: [$state.variable.id]
        },
        cacheKey: `plasmic.$.e183df9e-abbe-4e5f-a20d-dc0eda82bb31.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__w3ViD
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.counter;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.table2),
                      data: (() => {
                        try {
                          return $queries.queryDesign.data[0];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      fields: (() => {
                        const __composite = [
                          { key: "id", fieldId: "id" },
                          { key: "title", fieldId: "title" },
                          {
                            key: "description",
                            fieldId: "description",
                            isHidden: null
                          },
                          { key: "brand", fieldId: "brand" },
                          { key: "model", fieldId: "model" },
                          { key: "images", fieldId: "images" },
                          {
                            key: "created_at",
                            fieldId: "created_at",
                            isHidden: null
                          },
                          {
                            key: "image_id",
                            fieldId: "image_id",
                            isHidden: null
                          },
                          {
                            key: "printify_id",
                            fieldId: "printify_id",
                            isHidden: null
                          },
                          {
                            key: "printful_id",
                            fieldId: "printful_id",
                            disableSorting: null,
                            isHidden: null
                          },
                          { key: "email", fieldId: "email", isHidden: null },
                          { key: "tags", fieldId: "tags" },
                          {
                            key: "recipe_id",
                            fieldId: "recipe_id",
                            isHidden: null
                          },
                          { key: "recipe_ids", fieldId: "recipe_ids" },
                          {
                            key: "prodigi_id",
                            fieldId: "prodigi_id",
                            isHidden: null
                          }
                        ];
                        __composite["2"]["isHidden"] = false;
                        __composite["6"]["isHidden"] = true;
                        __composite["7"]["isHidden"] = true;
                        __composite["8"]["isHidden"] = true;
                        __composite["9"]["disableSorting"] = false;
                        __composite["9"]["isHidden"] = true;
                        __composite["10"]["isHidden"] = true;
                        __composite["12"]["isHidden"] = true;
                        __composite["14"]["isHidden"] = true;
                        return __composite;
                      })(),

                      hideColumnPicker: true,
                      hideDensity: true,
                      hideExports: true,
                      hideSearch: true,
                      onRowSelectionChanged: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRowKey",
                          ["table2", "selectedRowKey"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRow",
                          ["table2", "selectedRow"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRows",
                          ["table2", "selectedRows"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRowKeys",
                          ["table2", "selectedRowKeys"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                      },
                      pagination: false,
                      scopeClassName: sty["table2__instance"],
                      selectedRowKey: generateStateValueProp($state, [
                        "table2",
                        "selectedRowKey"
                      ]),
                      selectedRowKeys: generateStateValueProp($state, [
                        "table2",
                        "selectedRowKeys"
                      ]),
                      themeResetClassName: classNames(
                        projectcss.root_reset,
                        projectcss.root_reset_tags,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "selectedRowKey",
                          plasmicStateName: "table2.selectedRowKey"
                        },
                        {
                          name: "selectedRow",
                          plasmicStateName: "table2.selectedRow"
                        },
                        {
                          name: "selectedRows",
                          plasmicStateName: "table2.selectedRows"
                        },
                        {
                          name: "selectedRowKeys",
                          plasmicStateName: "table2.selectedRowKeys"
                        }
                      ],
                      [],
                      RichTable_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <RichTable
                        data-plasmic-name={"table2"}
                        data-plasmic-override={overrides.table2}
                        {...child$Props}
                      />
                    );
                  })()}
                  <AntdTabs
                    data-plasmic-name={"tabs"}
                    data-plasmic-override={overrides.tabs}
                    activeKey={generateStateValueProp($state, [
                      "tabs",
                      "activeKey"
                    ])}
                    animateTabBar={true}
                    animateTabContent={false}
                    animated={true}
                    className={classNames("__wab_instance", sty.tabs)}
                    items={
                      <React.Fragment>
                        <AntdTabItem
                          className={classNames(
                            "__wab_instance",
                            sty.tabItem__s0Gem
                          )}
                          key={"1"}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__rZh6E
                              )}
                            >
                              {"Printify"}
                            </div>
                          }
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__sd5Yo
                            )}
                          >
                            <AntdButton
                              className={classNames(
                                "__wab_instance",
                                sty.button__m8Hvw
                              )}
                              onClick={async () => {
                                const $steps = {};

                                $steps["syncAllIds"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["syncAllIds"]
                                        },
                                        operation: 0,
                                        value:
                                          $queries.queryGetProductsFromRecipe.data.map(
                                            item => ({ id: item.id })
                                          )
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["syncAllIds"] != null &&
                                  typeof $steps["syncAllIds"] === "object" &&
                                  typeof $steps["syncAllIds"].then ===
                                    "function"
                                ) {
                                  $steps["syncAllIds"] = await $steps[
                                    "syncAllIds"
                                  ];
                                }

                                $steps["updateVariable"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["variable"]
                                        },
                                        operation: 0
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateVariable"] != null &&
                                  typeof $steps["updateVariable"] ===
                                    "object" &&
                                  typeof $steps["updateVariable"].then ===
                                    "function"
                                ) {
                                  $steps["updateVariable"] = await $steps[
                                    "updateVariable"
                                  ];
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qmBQy
                                )}
                              >
                                {"Sync All"}
                              </div>
                            </AntdButton>
                          </div>
                          <AntdModal
                            data-plasmic-name={"confirmSyncIndividual"}
                            data-plasmic-override={
                              overrides.confirmSyncIndividual
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.confirmSyncIndividual
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            )}
                            modalScopeClassName={
                              sty["confirmSyncIndividual__modal"]
                            }
                            onCancel={async () => {
                              const $steps = {};
                            }}
                            onOk={async () => {
                              const $steps = {};

                              $steps["postgresGetMatching"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
                                        opId: "cca8c77a-b316-497c-9bc7-5a2e6e17a1bc",
                                        userArgs: {
                                          filters: [
                                            $state.variable.id,
                                            $ctx.params.design
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: null,
                                        roleId:
                                          "d035f350-edf5-4268-af03-4480b52522b0"
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["postgresGetMatching"] != null &&
                                typeof $steps["postgresGetMatching"] ===
                                  "object" &&
                                typeof $steps["postgresGetMatching"].then ===
                                  "function"
                              ) {
                                $steps["postgresGetMatching"] = await $steps[
                                  "postgresGetMatching"
                                ];
                              }

                              $steps["updatePayload"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["payload"]
                                      },
                                      operation: 0,
                                      value: $steps.postgresGetMatching
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updatePayload"] != null &&
                                typeof $steps["updatePayload"] === "object" &&
                                typeof $steps["updatePayload"].then ===
                                  "function"
                              ) {
                                $steps["updatePayload"] = await $steps[
                                  "updatePayload"
                                ];
                              }

                              $steps["httpPost"] =
                                $state.payload.data.length === 0
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "fumskhn7h2QULzwkXAtFMC",
                                          opId: "33639399-7459-487f-8250-64965974643f",
                                          userArgs: {
                                            body: [
                                              (() => {
                                                const title =
                                                  $queries.queryDesign.data[0]
                                                    .title +
                                                  " - " +
                                                  $state.variable.title;
                                                const description =
                                                  $queries.queryDesign.data[0]
                                                    .description +
                                                  " - " +
                                                  $state.variable.description;
                                                const blueprint_id = parseInt(
                                                  $state.variable.blueprint_id
                                                );
                                                const print_provider_id =
                                                  parseInt(
                                                    $state.variable
                                                      .print_provider
                                                  );
                                                const variants =
                                                  $queries.queryGetPrintifyVariants.data.map(
                                                    variant => ({
                                                      id: parseInt(
                                                        variant.variant_id
                                                      ),
                                                      price: parseInt(
                                                        variant.price
                                                      ),
                                                      is_enabled: true
                                                    })
                                                  );
                                                const design = 1;
                                                const placeholders =
                                                  $queries
                                                    .queryGetPrintifyPlaceholders
                                                    .data;
                                                const variants_flat =
                                                  $queries.queryGetPrintifyVariants.data.map(
                                                    v => parseInt(v.variant_id)
                                                  );
                                                const mappedPlaceholders =
                                                  placeholders.map(
                                                    placeholder => ({
                                                      position:
                                                        placeholder.position,
                                                      images: [
                                                        {
                                                          id: design,
                                                          x: placeholder.x,
                                                          y: placeholder.y,
                                                          scale:
                                                            placeholder.scale,
                                                          angle:
                                                            placeholder.rotate
                                                        }
                                                      ]
                                                    })
                                                  );
                                                return {
                                                  title: title,
                                                  description: description,
                                                  blueprint_id: blueprint_id,
                                                  print_provider_id:
                                                    print_provider_id,
                                                  variants: variants,
                                                  print_areas: [
                                                    {
                                                      variant_ids:
                                                        variants_flat,
                                                      placeholders:
                                                        mappedPlaceholders
                                                    }
                                                  ]
                                                };
                                              })()
                                            ]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [],
                                          roleId:
                                            "d035f350-edf5-4268-af03-4480b52522b0"
                                        },
                                        continueOnError: false
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["httpPost"] != null &&
                                typeof $steps["httpPost"] === "object" &&
                                typeof $steps["httpPost"].then === "function"
                              ) {
                                $steps["httpPost"] = await $steps["httpPost"];
                              }

                              $steps["updateSyncState"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["syncState"]
                                      },
                                      operation: 0,
                                      value: $steps.httpPost
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateSyncState"] != null &&
                                typeof $steps["updateSyncState"] === "object" &&
                                typeof $steps["updateSyncState"].then ===
                                  "function"
                              ) {
                                $steps["updateSyncState"] = await $steps[
                                  "updateSyncState"
                                ];
                              }

                              $steps["postgresCreateNew"] =
                                $state.payload.data[0].sync_id === null
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
                                          opId: "fb343923-4598-49cc-b442-b650b1c757a8",
                                          userArgs: {
                                            variables: [
                                              $ctx.params.design,
                                              $state.payload.data[
                                                $state.payload.data.length - 1
                                              ].sync_id,
                                              $state.variable.id
                                            ]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [
                                            "plasmic_refresh_all"
                                          ],
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["postgresCreateNew"] != null &&
                                typeof $steps["postgresCreateNew"] ===
                                  "object" &&
                                typeof $steps["postgresCreateNew"].then ===
                                  "function"
                              ) {
                                $steps["postgresCreateNew"] = await $steps[
                                  "postgresCreateNew"
                                ];
                              }

                              $steps["invokeGlobalAction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: ["success", "Synced successfully"]
                                    };
                                    return $globalActions[
                                      "plasmic-antd5-config-provider.showNotification"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["invokeGlobalAction"] != null &&
                                typeof $steps["invokeGlobalAction"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction"] = await $steps[
                                  "invokeGlobalAction"
                                ];
                              }

                              $steps["updateVariable"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["variable"]
                                      },
                                      operation: 0
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateVariable"] != null &&
                                typeof $steps["updateVariable"] === "object" &&
                                typeof $steps["updateVariable"].then ===
                                  "function"
                              ) {
                                $steps["updateVariable"] = await $steps[
                                  "updateVariable"
                                ];
                              }
                            }}
                            onOpenChange={generateStateOnChangeProp($state, [
                              "confirmSyncIndividual",
                              "open"
                            ])}
                            open={generateStateValueProp($state, [
                              "confirmSyncIndividual",
                              "open"
                            ])}
                            title={"Confirm Details"}
                            trigger={null}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__wj6Lu
                              )}
                            >
                              <h4
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h4,
                                  projectcss.__wab_text,
                                  sty.h4__eyjkW
                                )}
                              >
                                {"Title"}
                              </h4>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ws20L
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        $queries.queryDesign.data[0].title +
                                        " - " +
                                        $state.variable.title
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <h4
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h4,
                                  projectcss.__wab_text,
                                  sty.h4__esbyh
                                )}
                              >
                                {"Description"}
                              </h4>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__gd41L
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        $queries.queryDesign.data[0]
                                          .description +
                                        " <br> " +
                                        $state.variable.description
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <h4
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h4,
                                  projectcss.__wab_text,
                                  sty.h4__scB2B
                                )}
                              >
                                {"Tags"}
                              </h4>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___3XTZv
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        $queries.queryDesign.data[0].tags +
                                        "," +
                                        $state.variable.tags
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          </AntdModal>
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.table
                              ),
                              data: (() => {
                                try {
                                  return $queries.queryGetProductsFromRecipe;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              fields: (() => {
                                const __composite = [
                                  { key: "id", fieldId: "id" },
                                  { key: "title", fieldId: "title" },
                                  {
                                    key: "print_provider",
                                    fieldId: "print_provider"
                                  },
                                  {
                                    key: "owner",
                                    fieldId: "owner",
                                    isHidden: null
                                  },
                                  {
                                    key: "variant_ids",
                                    fieldId: "variant_ids",
                                    isHidden: null
                                  },
                                  {
                                    key: "description",
                                    fieldId: "description",
                                    isHidden: null
                                  },
                                  {
                                    key: "placeholder_ids",
                                    fieldId: "placeholder_ids",
                                    isHidden: null
                                  },
                                  {
                                    key: "recipe_id",
                                    fieldId: "recipe_id",
                                    isHidden: null
                                  },
                                  {
                                    key: "sync_product_id",
                                    fieldId: "sync_product_id",
                                    isHidden: null
                                  },
                                  {
                                    key: "created_at",
                                    fieldId: "created_at",
                                    isHidden: null
                                  },
                                  {
                                    key: "blueprint_id",
                                    fieldId: "blueprint_id",
                                    dataType: null
                                  },
                                  { key: "tags", fieldId: "tags" },
                                  {
                                    key: "email",
                                    fieldId: "email",
                                    isHidden: null
                                  }
                                ];
                                __composite["3"]["isHidden"] = true;
                                __composite["4"]["isHidden"] = true;
                                __composite["5"]["isHidden"] = true;
                                __composite["6"]["isHidden"] = true;
                                __composite["7"]["isHidden"] = true;
                                __composite["8"]["isHidden"] = true;
                                __composite["9"]["isHidden"] = true;
                                __composite["10"]["dataType"] = "string";
                                __composite["12"]["isHidden"] = true;
                                return __composite;
                              })(),

                              hideColumnPicker: true,
                              hideExports: true,
                              hideSearch: true,
                              onRowSelectionChanged: async (
                                ...eventArgs: any
                              ) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRowKey",
                                  ["table", "selectedRowKey"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRow",
                                  ["table", "selectedRow"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRows",
                                  ["table", "selectedRows"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRowKeys",
                                  ["table", "selectedRowKeys"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                              },
                              pagination: false,
                              rowActions: (() => {
                                const __composite = [
                                  { type: "item", label: null, onClick: null }
                                ];
                                __composite["0"]["label"] = "Sync";
                                __composite["0"]["onClick"] = async (
                                  rowKey,
                                  row
                                ) => {
                                  const $steps = {};

                                  $steps["updateVariable"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["variable"]
                                          },
                                          operation: 0,
                                          value: row
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateVariable"] != null &&
                                    typeof $steps["updateVariable"] ===
                                      "object" &&
                                    typeof $steps["updateVariable"].then ===
                                      "function"
                                  ) {
                                    $steps["updateVariable"] = await $steps[
                                      "updateVariable"
                                    ];
                                  }

                                  $steps["updateConfirmSyncIndividualOpen"] =
                                    true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "confirmSyncIndividual",
                                                "open"
                                              ]
                                            },
                                            operation: 4
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            const oldValue = $stateGet(
                                              objRoot,
                                              variablePath
                                            );
                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              !oldValue
                                            );
                                            return !oldValue;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["updateConfirmSyncIndividualOpen"] !=
                                      null &&
                                    typeof $steps[
                                      "updateConfirmSyncIndividualOpen"
                                    ] === "object" &&
                                    typeof $steps[
                                      "updateConfirmSyncIndividualOpen"
                                    ].then === "function"
                                  ) {
                                    $steps["updateConfirmSyncIndividualOpen"] =
                                      await $steps[
                                        "updateConfirmSyncIndividualOpen"
                                      ];
                                  }
                                };
                                return __composite;
                              })(),

                              scopeClassName: sty["table__instance"],
                              selectedRowKey: generateStateValueProp($state, [
                                "table",
                                "selectedRowKey"
                              ]),
                              selectedRowKeys: generateStateValueProp($state, [
                                "table",
                                "selectedRowKeys"
                              ]),
                              themeResetClassName: classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "selectedRowKey",
                                  plasmicStateName: "table.selectedRowKey"
                                },
                                {
                                  name: "selectedRow",
                                  plasmicStateName: "table.selectedRow"
                                },
                                {
                                  name: "selectedRows",
                                  plasmicStateName: "table.selectedRows"
                                },
                                {
                                  name: "selectedRowKeys",
                                  plasmicStateName: "table.selectedRowKeys"
                                }
                              ],
                              [],
                              RichTable_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <RichTable
                                data-plasmic-name={"table"}
                                data-plasmic-override={overrides.table}
                                {...child$Props}
                              />
                            );
                          })()}
                          <div
                            data-plasmic-name={"table3"}
                            data-plasmic-override={overrides.table3}
                            className={classNames(projectcss.all, sty.table3)}
                          >
                            <div
                              data-plasmic-name={"tableHead"}
                              data-plasmic-override={overrides.tableHead}
                              className={classNames(
                                projectcss.all,
                                sty.tableHead
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ekiKy
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___1L1DY
                                  )}
                                >
                                  {"validations"}
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ii4I
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__ifF09
                                  )}
                                >
                                  {"id"}
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___3QaDy
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__c6NUy
                                  )}
                                >
                                  {"Created_at"}
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__qfpPs
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__seq8M
                                  )}
                                >
                                  {"title"}
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__i5YHr
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__i9UZq
                                  )}
                                >
                                  {"print_provider"}
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__acBfp
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___3Sfzb
                                  )}
                                >
                                  {"blueprint_id"}
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__aGChF
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__ve9Km
                                  )}
                                >
                                  {"actions"}
                                </div>
                              </div>
                            </div>
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $queries.queryGetProductsFromRecipe
                                    .data;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <div
                                  data-plasmic-name={"tableBody"}
                                  data-plasmic-override={overrides.tableBody}
                                  className={classNames(
                                    projectcss.all,
                                    sty.tableBody
                                  )}
                                  key={currentIndex}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__jGuQw
                                    )}
                                  >
                                    {(() => {
                                      try {
                                        return $queries.syncDesignProduct.data.find(
                                          row =>
                                            row.printify_product_id ===
                                            currentItem.id
                                        )
                                          ? undefined
                                          : true;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })() ? (
                                      <Stack__
                                        as={"div"}
                                        data-plasmic-name={"validate"}
                                        data-plasmic-override={
                                          overrides.validate
                                        }
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.validate
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__lvKgv
                                          )}
                                        >
                                          {
                                            "Matching sync design product does not exist"
                                          }
                                        </div>
                                        <AntdButton
                                          className={classNames(
                                            "__wab_instance",
                                            sty.button___6BdO
                                          )}
                                          onClick={async () => {
                                            const $steps = {};

                                            $steps["postgresCreate"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    dataOp: {
                                                      sourceId:
                                                        "83X9ZdYzYUYJtgqe5fwXeX",
                                                      opId: "cf240271-327f-43d2-984c-18f31dbf3eb4",
                                                      userArgs: {
                                                        variables: [
                                                          $ctx.params.design,
                                                          currentItem.id
                                                        ]
                                                      },
                                                      cacheKey: null,
                                                      invalidatedKeys: [
                                                        "plasmic_refresh_all"
                                                      ],
                                                      roleId: null
                                                    }
                                                  };
                                                  return (async ({
                                                    dataOp,
                                                    continueOnError
                                                  }) => {
                                                    try {
                                                      const response =
                                                        await executePlasmicDataOp(
                                                          dataOp,
                                                          {
                                                            userAuthToken:
                                                              dataSourcesCtx?.userAuthToken,
                                                            user: dataSourcesCtx?.user
                                                          }
                                                        );
                                                      await plasmicInvalidate(
                                                        dataOp.invalidatedKeys
                                                      );
                                                      return response;
                                                    } catch (e) {
                                                      if (!continueOnError) {
                                                        throw e;
                                                      }
                                                      return e;
                                                    }
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["postgresCreate"] !=
                                                null &&
                                              typeof $steps[
                                                "postgresCreate"
                                              ] === "object" &&
                                              typeof $steps["postgresCreate"]
                                                .then === "function"
                                            ) {
                                              $steps["postgresCreate"] =
                                                await $steps["postgresCreate"];
                                            }

                                            $steps["invokeGlobalAction"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    args: [
                                                      "success",
                                                      "Created successfully."
                                                    ]
                                                  };
                                                  return $globalActions[
                                                    "plasmic-antd5-config-provider.showNotification"
                                                  ]?.apply(null, [
                                                    ...actionArgs.args
                                                  ]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["invokeGlobalAction"] !=
                                                null &&
                                              typeof $steps[
                                                "invokeGlobalAction"
                                              ] === "object" &&
                                              typeof $steps[
                                                "invokeGlobalAction"
                                              ].then === "function"
                                            ) {
                                              $steps["invokeGlobalAction"] =
                                                await $steps[
                                                  "invokeGlobalAction"
                                                ];
                                            }
                                          }}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___3DvPk
                                            )}
                                          >
                                            {"Create new"}
                                          </div>
                                        </AntdButton>
                                      </Stack__>
                                    ) : null}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__i8YSf
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___2OuSz
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.id;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return " ";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__wM42F
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__cxkau
                                      )}
                                    >
                                      {"Created_at"}
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__h8FRm
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__gVbHv
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.title;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "title";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__wsf4C
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__yPv
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.print_provider;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "print_provider";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__uggD
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__uUwd8
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.blueprint_id;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "blueprint_id";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__bmrPd
                                    )}
                                  >
                                    <AntdButton
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__nt7Qb
                                      )}
                                      disabled={(() => {
                                        try {
                                          return $queries.syncDesignProduct.data.find(
                                            row =>
                                              row.printify_product_id ===
                                              currentItem.id
                                          )
                                            ? undefined
                                            : true;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return false;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      onClick={async () => {
                                        const $steps = {};

                                        $steps["updateVariable"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["variable"]
                                                },
                                                operation: 0,
                                                value: currentItem
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateVariable"] != null &&
                                          typeof $steps["updateVariable"] ===
                                            "object" &&
                                          typeof $steps["updateVariable"]
                                            .then === "function"
                                        ) {
                                          $steps["updateVariable"] =
                                            await $steps["updateVariable"];
                                        }

                                        $steps["updateVariable2"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "confirmSyncIndividual",
                                                    "open"
                                                  ]
                                                },
                                                operation: 4
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                const oldValue = $stateGet(
                                                  objRoot,
                                                  variablePath
                                                );
                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  !oldValue
                                                );
                                                return !oldValue;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateVariable2"] != null &&
                                          typeof $steps["updateVariable2"] ===
                                            "object" &&
                                          typeof $steps["updateVariable2"]
                                            .then === "function"
                                        ) {
                                          $steps["updateVariable2"] =
                                            await $steps["updateVariable2"];
                                        }
                                      }}
                                      size={"large"}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__gasXp
                                        )}
                                      >
                                        {"Sync"}
                                      </div>
                                    </AntdButton>
                                  </div>
                                </div>
                              );
                            })}
                            <ConditionGuard
                              data-plasmic-name={"updateVariable"}
                              data-plasmic-override={overrides.updateVariable}
                              className={classNames(
                                "__wab_instance",
                                sty.updateVariable
                              )}
                              condition={(() => {
                                try {
                                  return $state.counter < 25;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()}
                              onNotSatisfied={async () => {
                                const $steps = {};

                                $steps["updateVariable2"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["invalidSyncDesign"]
                                        },
                                        operation: 0,
                                        value:
                                          $queries.queryGetProductsFromRecipe.data
                                            .filter(
                                              product =>
                                                !$queries.syncDesignProduct.data.some(
                                                  row =>
                                                    row.printify_product_id ===
                                                    product.id
                                                )
                                            )
                                            .map(product => product.id)
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateVariable2"] != null &&
                                  typeof $steps["updateVariable2"] ===
                                    "object" &&
                                  typeof $steps["updateVariable2"].then ===
                                    "function"
                                ) {
                                  $steps["updateVariable2"] = await $steps[
                                    "updateVariable2"
                                  ];
                                }
                              }}
                            />

                            <ConditionGuard
                              data-plasmic-name={"updateVariable2"}
                              data-plasmic-override={overrides.updateVariable2}
                              className={classNames(
                                "__wab_instance",
                                sty.updateVariable2
                              )}
                              condition={(() => {
                                try {
                                  return $state.counter < 40;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()}
                              onNotSatisfied={async () => {
                                const $steps = {};

                                $steps["runActionOnFormer"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        tplRef: "former",
                                        action: "setFieldValue",
                                        args: [
                                          [
                                            "$state",
                                            "former",
                                            "value",
                                            "printify_product_id"
                                          ],
                                          $state.invalidSyncDesign.map(id =>
                                            parseInt(id)
                                          )
                                        ]
                                      };
                                      return (({ tplRef, action, args }) => {
                                        return $refs?.[tplRef]?.[action]?.(
                                          ...(args ?? [])
                                        );
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runActionOnFormer"] != null &&
                                  typeof $steps["runActionOnFormer"] ===
                                    "object" &&
                                  typeof $steps["runActionOnFormer"].then ===
                                    "function"
                                ) {
                                  $steps["runActionOnFormer"] = await $steps[
                                    "runActionOnFormer"
                                  ];
                                }

                                $steps["postgresCreateMany"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
                                          opId: "8bbf7403-8cf9-41f1-9c86-301fb29b1c6f",
                                          userArgs: {
                                            variables: [
                                              (() => {
                                                return $state.invalidSyncDesign
                                                  .map(id => parseInt(id))
                                                  .map(id => ({
                                                    printify_product_id: id,
                                                    design_id:
                                                      $state.former.value
                                                        .design_id,
                                                    email:
                                                      $state.former.value.email
                                                  }));
                                              })()
                                            ]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [
                                            "plasmic_refresh_all"
                                          ],
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["postgresCreateMany"] != null &&
                                  typeof $steps["postgresCreateMany"] ===
                                    "object" &&
                                  typeof $steps["postgresCreateMany"].then ===
                                    "function"
                                ) {
                                  $steps["postgresCreateMany"] = await $steps[
                                    "postgresCreateMany"
                                  ];
                                }

                                $steps["refreshData"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        queryInvalidation: [
                                          "plasmic_refresh_all"
                                        ]
                                      };
                                      return (async ({ queryInvalidation }) => {
                                        if (!queryInvalidation) {
                                          return;
                                        }
                                        await plasmicInvalidate(
                                          queryInvalidation
                                        );
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["refreshData"] != null &&
                                  typeof $steps["refreshData"] === "object" &&
                                  typeof $steps["refreshData"].then ===
                                    "function"
                                ) {
                                  $steps["refreshData"] = await $steps[
                                    "refreshData"
                                  ];
                                }
                              }}
                            />

                            <AntdButton
                              className={classNames(
                                "__wab_instance",
                                sty.button___7GwC
                              )}
                              onClick={async () => {
                                const $steps = {};

                                $steps["postgresDeleteMany"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
                                          opId: "9295c64b-ca4f-465f-b429-7a1928080d92",
                                          userArgs: {},
                                          cacheKey: null,
                                          invalidatedKeys: [
                                            "plasmic_refresh_all"
                                          ],
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["postgresDeleteMany"] != null &&
                                  typeof $steps["postgresDeleteMany"] ===
                                    "object" &&
                                  typeof $steps["postgresDeleteMany"].then ===
                                    "function"
                                ) {
                                  $steps["postgresDeleteMany"] = await $steps[
                                    "postgresDeleteMany"
                                  ];
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__huWuC
                                )}
                              >
                                {"Button"}
                              </div>
                            </AntdButton>
                            <Timer
                              data-plasmic-name={"timer"}
                              data-plasmic-override={overrides.timer}
                              className={classNames(
                                "__wab_instance",
                                sty.timer
                              )}
                              intervalSeconds={0.1}
                              isRunning={true}
                              onTick={async () => {
                                const $steps = {};

                                $steps["updateVariable2"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["counter"]
                                        },
                                        operation: 2
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        const oldValue = $stateGet(
                                          objRoot,
                                          variablePath
                                        );
                                        $stateSet(
                                          objRoot,
                                          variablePath,
                                          oldValue + 1
                                        );
                                        return oldValue + 1;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateVariable2"] != null &&
                                  typeof $steps["updateVariable2"] ===
                                    "object" &&
                                  typeof $steps["updateVariable2"].then ===
                                    "function"
                                ) {
                                  $steps["updateVariable2"] = await $steps[
                                    "updateVariable2"
                                  ];
                                }
                              }}
                              runWhileEditing={true}
                            />

                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.former
                                ),
                                extendedOnValuesChange:
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["former", "value"],
                                    FormWrapper_Helpers
                                  ),
                                formItems: [
                                  {
                                    label: "Name",
                                    name: "name",
                                    inputType: "Text"
                                  },
                                  {
                                    label: "Message",
                                    name: "message",
                                    inputType: "Text Area"
                                  }
                                ],
                                labelCol: { span: 8, horizontalOnly: true },
                                layout: "vertical",
                                mode: "advanced",
                                onIsSubmittingChange:
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "isSubmitting",
                                    ["former", "isSubmitting"],
                                    FormWrapper_Helpers
                                  ),
                                ref: ref => {
                                  $refs["former"] = ref;
                                },
                                submitSlot: null,
                                wrapperCol: { span: 16, horizontalOnly: true }
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "former.value"
                                  },
                                  {
                                    name: "isSubmitting",
                                    plasmicStateName: "former.isSubmitting"
                                  }
                                ],
                                [],
                                FormWrapper_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <FormWrapper
                                  data-plasmic-name={"former"}
                                  data-plasmic-override={overrides.former}
                                  {...child$Props}
                                >
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__ftj5M
                                    )}
                                    initialValue={(() => {
                                      try {
                                        return $state.invalidSyncDesign.map(
                                          id => parseInt(id)
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    label={"Name"}
                                    name={"printify_product_id"}
                                  >
                                    {(() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.input
                                        ),
                                        onChange:
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "value",
                                            ["input", "value"],
                                            AntdInput_Helpers
                                          ),
                                        value: generateStateValueProp($state, [
                                          "input",
                                          "value"
                                        ])
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "value",
                                            plasmicStateName: "input.value"
                                          }
                                        ],
                                        [],
                                        AntdInput_Helpers ?? {},
                                        child$Props
                                      );

                                      return (
                                        <AntdInput
                                          data-plasmic-name={"input"}
                                          data-plasmic-override={
                                            overrides.input
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()}
                                  </FormItemWrapper>
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__c7D6V
                                    )}
                                    initialValue={(() => {
                                      try {
                                        return parseInt($ctx.params.design);
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    label={"Name"}
                                    name={"design_id"}
                                  >
                                    {(() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.input2
                                        ),
                                        onChange:
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "value",
                                            ["input2", "value"],
                                            AntdInput_Helpers
                                          ),
                                        value: generateStateValueProp($state, [
                                          "input2",
                                          "value"
                                        ])
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "value",
                                            plasmicStateName: "input2.value"
                                          }
                                        ],
                                        [],
                                        AntdInput_Helpers ?? {},
                                        child$Props
                                      );

                                      return (
                                        <AntdInput
                                          data-plasmic-name={"input2"}
                                          data-plasmic-override={
                                            overrides.input2
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()}
                                  </FormItemWrapper>
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__etNls
                                    )}
                                    initialValue={(() => {
                                      try {
                                        return currentUser.email;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    label={"Name"}
                                    name={"email"}
                                  >
                                    {(() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.input3
                                        ),
                                        onChange:
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "value",
                                            ["input3", "value"],
                                            AntdInput_Helpers
                                          ),
                                        value: generateStateValueProp($state, [
                                          "input3",
                                          "value"
                                        ])
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "value",
                                            plasmicStateName: "input3.value"
                                          }
                                        ],
                                        [],
                                        AntdInput_Helpers ?? {},
                                        child$Props
                                      );

                                      return (
                                        <AntdInput
                                          data-plasmic-name={"input3"}
                                          data-plasmic-override={
                                            overrides.input3
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()}
                                  </FormItemWrapper>
                                  <AntdButton
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__yuWAv
                                    )}
                                    submitsForm={true}
                                    type={"primary"}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__kwrTr
                                      )}
                                    >
                                      {"Submit"}
                                    </div>
                                  </AntdButton>
                                </FormWrapper>
                              );
                            })()}
                          </div>
                        </AntdTabItem>
                        <AntdTabItem
                          className={classNames(
                            "__wab_instance",
                            sty.tabItem__puYpx
                          )}
                          key={"2"}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__t5L8
                              )}
                            >
                              {"Printful"}
                            </div>
                          }
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__k5Bb
                            )}
                          >
                            {"Second Children"}
                          </div>
                        </AntdTabItem>
                      </React.Fragment>
                    }
                    onChange={generateStateOnChangeProp($state, [
                      "tabs",
                      "activeKey"
                    ])}
                    sticky={false}
                    tabBarBackground={"#FFF"}
                    tabsDropdownScopeClassName={sty["tabs__tabsDropdown"]}
                    tabsScopeClassName={sty["tabs__tabs"]}
                  />
                </React.Fragment>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "table2",
    "tabs",
    "confirmSyncIndividual",
    "table",
    "table3",
    "tableHead",
    "tableBody",
    "validate",
    "updateVariable",
    "updateVariable2",
    "timer",
    "former",
    "input",
    "input2",
    "input3"
  ],
  pageLayout: [
    "pageLayout",
    "table2",
    "tabs",
    "confirmSyncIndividual",
    "table",
    "table3",
    "tableHead",
    "tableBody",
    "validate",
    "updateVariable",
    "updateVariable2",
    "timer",
    "former",
    "input",
    "input2",
    "input3"
  ],
  table2: ["table2"],
  tabs: [
    "tabs",
    "confirmSyncIndividual",
    "table",
    "table3",
    "tableHead",
    "tableBody",
    "validate",
    "updateVariable",
    "updateVariable2",
    "timer",
    "former",
    "input",
    "input2",
    "input3"
  ],
  confirmSyncIndividual: ["confirmSyncIndividual"],
  table: ["table"],
  table3: [
    "table3",
    "tableHead",
    "tableBody",
    "validate",
    "updateVariable",
    "updateVariable2",
    "timer",
    "former",
    "input",
    "input2",
    "input3"
  ],
  tableHead: ["tableHead"],
  tableBody: ["tableBody", "validate"],
  validate: ["validate"],
  updateVariable: ["updateVariable"],
  updateVariable2: ["updateVariable2"],
  timer: ["timer"],
  former: ["former", "input", "input2", "input3"],
  input: ["input"],
  input2: ["input2"],
  input3: ["input3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  table2: typeof RichTable;
  tabs: typeof AntdTabs;
  confirmSyncIndividual: typeof AntdModal;
  table: typeof RichTable;
  table3: "div";
  tableHead: "div";
  tableBody: "div";
  validate: "div";
  updateVariable: typeof ConditionGuard;
  updateVariable2: typeof ConditionGuard;
  timer: typeof Timer;
  former: typeof FormWrapper;
  input: typeof AntdInput;
  input2: typeof AntdInput;
  input3: typeof AntdInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSync__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSync__VariantsArgs;
    args?: PlasmicSync__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSync__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSync__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSync__ArgProps,
          internalVariantPropNames: PlasmicSync__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSync__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSync";
  } else {
    func.displayName = `PlasmicSync.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={"d035f350-edf5-4268-af03-4480b52522b0"}
      appId={"2Up8DUmBB1Tx5dhznkvCW5"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "2Up8DUmBB1Tx5dhznkvCW5"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicSync = Object.assign(
  // Top-level PlasmicSync renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    table2: makeNodeComponent("table2"),
    tabs: makeNodeComponent("tabs"),
    confirmSyncIndividual: makeNodeComponent("confirmSyncIndividual"),
    table: makeNodeComponent("table"),
    table3: makeNodeComponent("table3"),
    tableHead: makeNodeComponent("tableHead"),
    tableBody: makeNodeComponent("tableBody"),
    validate: makeNodeComponent("validate"),
    updateVariable: makeNodeComponent("updateVariable"),
    updateVariable2: makeNodeComponent("updateVariable2"),
    timer: makeNodeComponent("timer"),
    former: makeNodeComponent("former"),
    input: makeNodeComponent("input"),
    input2: makeNodeComponent("input2"),
    input3: makeNodeComponent("input3"),

    // Metadata about props expected for PlasmicSync
    internalVariantProps: PlasmicSync__VariantProps,
    internalArgProps: PlasmicSync__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSync;
/* prettier-ignore-end */
