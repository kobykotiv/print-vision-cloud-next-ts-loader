// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2Up8DUmBB1Tx5dhznkvCW5
// Component: mSsMjiy4tgBp

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import PageLayout from "../../PageLayout"; // plasmic-import: nHDfdLqBbJ3Q/component
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { AntdTabs } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdTabItem } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 2Up8DUmBB1Tx5dhznkvCW5/projectcss
import sty from "./PlasmicSync.module.css"; // plasmic-import: mSsMjiy4tgBp/css

createPlasmicElementProxy;

export type PlasmicSync__VariantMembers = {};
export type PlasmicSync__VariantsArgs = {};
type VariantPropType = keyof PlasmicSync__VariantsArgs;
export const PlasmicSync__VariantProps = new Array<VariantPropType>();

export type PlasmicSync__ArgsType = {};
type ArgPropType = keyof PlasmicSync__ArgsType;
export const PlasmicSync__ArgProps = new Array<ArgPropType>();

export type PlasmicSync__OverridesType = {
  root?: Flex__<"div">;
  pageLayout?: Flex__<typeof PageLayout>;
  table2?: Flex__<typeof RichTable>;
  tabs?: Flex__<typeof AntdTabs>;
  button?: Flex__<typeof AntdButton>;
  confirmSyncIndividual?: Flex__<typeof AntdModal>;
  table?: Flex__<typeof RichTable>;
};

export interface DefaultSyncProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSync__RenderFunc(props: {
  variants: PlasmicSync__VariantsArgs;
  args: PlasmicSync__ArgsType;
  overrides: PlasmicSync__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "tabs.activeKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "table2.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table2.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table2.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table2.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "confirmSyncIndividual.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "syncState",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    queryRecipe: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "1eff6c0a-8798-488d-be54-4fbe525286d1",
        userArgs: {
          keys: [$ctx.params.recipe]
        },
        cacheKey: `plasmic.$.1eff6c0a-8798-488d-be54-4fbe525286d1.$.`,
        invalidatedKeys: null,
        roleId: "d035f350-edf5-4268-af03-4480b52522b0"
      };
    }),
    queryDesign: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "05e7441d-d32d-4b99-9750-f2bc65e0dae0",
        userArgs: {
          keys: [$ctx.params.design]
        },
        cacheKey: `plasmic.$.05e7441d-d32d-4b99-9750-f2bc65e0dae0.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    queryPrintifyCatalog: usePlasmicDataOp(() => {
      return {
        sourceId: "fumskhn7h2QULzwkXAtFMC",
        opId: "aebd4bc5-f7e1-4b9a-9328-33ce65899b30",
        userArgs: {},
        cacheKey: `plasmic.$.aebd4bc5-f7e1-4b9a-9328-33ce65899b30.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    queryGetProductsFromRecipe: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "aeeaa2cd-af31-413c-8808-a60d5356ee2a",
        userArgs: {
          query: [$ctx.params.recipe]
        },
        cacheKey: `plasmic.$.aeeaa2cd-af31-413c-8808-a60d5356ee2a.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    queryGetPrintifyVariants: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "c0fb0a20-2df6-4466-93de-5d8716cb0b0f",
        userArgs: {
          filters: [$state.variable.id]
        },
        cacheKey: `plasmic.$.c0fb0a20-2df6-4466-93de-5d8716cb0b0f.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    queryGetPrintifyPlaceholders: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "e183df9e-abbe-4e5f-a20d-dc0eda82bb31",
        userArgs: {
          filters: [$state.variable.id]
        },
        cacheKey: `plasmic.$.e183df9e-abbe-4e5f-a20d-dc0eda82bb31.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.table2),
                      data: (() => {
                        try {
                          return $queries.queryDesign.data[0];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      fields: (() => {
                        const __composite = [
                          { key: "id", fieldId: "id" },
                          { key: "title", fieldId: "title" },
                          {
                            key: "description",
                            fieldId: "description",
                            isHidden: null
                          },
                          { key: "brand", fieldId: "brand" },
                          { key: "model", fieldId: "model" },
                          { key: "images", fieldId: "images" },
                          {
                            key: "created_at",
                            fieldId: "created_at",
                            isHidden: null
                          },
                          {
                            key: "image_id",
                            fieldId: "image_id",
                            isHidden: null
                          },
                          {
                            key: "printify_id",
                            fieldId: "printify_id",
                            isHidden: null
                          },
                          {
                            key: "printful_id",
                            fieldId: "printful_id",
                            disableSorting: null,
                            isHidden: null
                          },
                          { key: "email", fieldId: "email", isHidden: null },
                          { key: "tags", fieldId: "tags" },
                          {
                            key: "recipe_id",
                            fieldId: "recipe_id",
                            isHidden: null
                          }
                        ];
                        __composite["2"]["isHidden"] = false;
                        __composite["6"]["isHidden"] = true;
                        __composite["7"]["isHidden"] = true;
                        __composite["8"]["isHidden"] = true;
                        __composite["9"]["disableSorting"] = false;
                        __composite["9"]["isHidden"] = true;
                        __composite["10"]["isHidden"] = true;
                        __composite["12"]["isHidden"] = true;
                        return __composite;
                      })(),

                      hideColumnPicker: true,
                      hideDensity: true,
                      hideExports: true,
                      hideSearch: true,
                      onRowSelectionChanged: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRowKey",
                          ["table2", "selectedRowKey"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRow",
                          ["table2", "selectedRow"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRows",
                          ["table2", "selectedRows"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRowKeys",
                          ["table2", "selectedRowKeys"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                      },
                      pagination: false,
                      scopeClassName: sty["table2__instance"],
                      selectedRowKey: generateStateValueProp($state, [
                        "table2",
                        "selectedRowKey"
                      ]),
                      selectedRowKeys: generateStateValueProp($state, [
                        "table2",
                        "selectedRowKeys"
                      ]),
                      themeResetClassName: classNames(
                        projectcss.root_reset,
                        projectcss.root_reset_tags,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "selectedRowKey",
                          plasmicStateName: "table2.selectedRowKey"
                        },
                        {
                          name: "selectedRow",
                          plasmicStateName: "table2.selectedRow"
                        },
                        {
                          name: "selectedRows",
                          plasmicStateName: "table2.selectedRows"
                        },
                        {
                          name: "selectedRowKeys",
                          plasmicStateName: "table2.selectedRowKeys"
                        }
                      ],
                      [],
                      RichTable_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <RichTable
                        data-plasmic-name={"table2"}
                        data-plasmic-override={overrides.table2}
                        {...child$Props}
                      />
                    );
                  })()}
                  <AntdTabs
                    data-plasmic-name={"tabs"}
                    data-plasmic-override={overrides.tabs}
                    activeKey={generateStateValueProp($state, [
                      "tabs",
                      "activeKey"
                    ])}
                    animateTabBar={true}
                    animateTabContent={false}
                    animated={true}
                    className={classNames("__wab_instance", sty.tabs)}
                    items={
                      <React.Fragment>
                        <AntdTabItem
                          className={classNames(
                            "__wab_instance",
                            sty.tabItem__s0Gem
                          )}
                          key={"1"}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__rZh6E
                              )}
                            >
                              {"Printify"}
                            </div>
                          }
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__sd5Yo
                            )}
                          >
                            <AntdButton
                              data-plasmic-name={"button"}
                              data-plasmic-override={overrides.button}
                              className={classNames(
                                "__wab_instance",
                                sty.button
                              )}
                              onClick={async () => {
                                const $steps = {};

                                $steps["runCode"] = true
                                  ? (() => {
                                      const actionArgs = {};
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qmBQy
                                )}
                              >
                                {"Sync All"}
                              </div>
                            </AntdButton>
                          </div>
                          <AntdModal
                            data-plasmic-name={"confirmSyncIndividual"}
                            data-plasmic-override={
                              overrides.confirmSyncIndividual
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.confirmSyncIndividual
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            )}
                            modalScopeClassName={
                              sty["confirmSyncIndividual__modal"]
                            }
                            onOk={async () => {
                              const $steps = {};

                              $steps["httpPost"] =
                                $state.variable.sync_product_id === null
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "fumskhn7h2QULzwkXAtFMC",
                                          opId: "04cf9552-4c35-48c6-9116-b48c89dfbec4",
                                          userArgs: {
                                            body: [
                                              (() => {
                                                const title =
                                                  $queries.queryDesign.data[0]
                                                    .title +
                                                  " - " +
                                                  $queries
                                                    .queryGetProductsFromRecipe
                                                    .data[0].title;
                                                const description =
                                                  $queries.queryDesign.data[0]
                                                    .description +
                                                  " - " +
                                                  $queries
                                                    .queryGetProductsFromRecipe
                                                    .data[0].description;
                                                const blueprint_id = parseInt(
                                                  $queries
                                                    .queryGetProductsFromRecipe
                                                    .data[0].blueprint_id
                                                );
                                                const print_provider_id =
                                                  parseInt(
                                                    $queries
                                                      .queryGetProductsFromRecipe
                                                      .data[0].print_provider
                                                  );
                                                const variants =
                                                  $queries.queryGetPrintifyVariants.data.map(
                                                    variant => ({
                                                      id: parseInt(
                                                        variant.variant_id
                                                      ),
                                                      price: parseInt(
                                                        variant.price
                                                      ),
                                                      is_enabled: true
                                                    })
                                                  );
                                                const design =
                                                  $queries.queryDesign.data[0]
                                                    .printify_id;
                                                const placeholders =
                                                  $queries
                                                    .queryGetPrintifyPlaceholders
                                                    .data;
                                                const variants_flat =
                                                  $queries.queryGetPrintifyVariants.data.map(
                                                    v => parseInt(v.variant_id)
                                                  );
                                                const mappedPlaceholders =
                                                  placeholders.map(
                                                    placeholder => ({
                                                      position:
                                                        placeholder.position,
                                                      images: [
                                                        {
                                                          id: design,
                                                          x: placeholder.x,
                                                          y: placeholder.y,
                                                          scale:
                                                            placeholder.scale,
                                                          angle:
                                                            placeholder.rotate
                                                        }
                                                      ]
                                                    })
                                                  );
                                                return {
                                                  title: title,
                                                  description: description,
                                                  blueprint_id: blueprint_id,
                                                  print_provider_id:
                                                    print_provider_id,
                                                  variants: variants,
                                                  print_areas: [
                                                    {
                                                      variant_ids:
                                                        variants_flat,
                                                      placeholders:
                                                        mappedPlaceholders
                                                    }
                                                  ]
                                                };
                                              })()
                                            ]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [],
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["httpPost"] != null &&
                                typeof $steps["httpPost"] === "object" &&
                                typeof $steps["httpPost"].then === "function"
                              ) {
                                $steps["httpPost"] = await $steps["httpPost"];
                              }

                              $steps["postgresUpdateById"] =
                                $state.variable.sync_product_id === null
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["syncState"]
                                        },
                                        operation: 0,
                                        value: $steps.httpPost
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["postgresUpdateById"] != null &&
                                typeof $steps["postgresUpdateById"] ===
                                  "object" &&
                                typeof $steps["postgresUpdateById"].then ===
                                  "function"
                              ) {
                                $steps["postgresUpdateById"] = await $steps[
                                  "postgresUpdateById"
                                ];
                              }

                              $steps["postgresUpdateById2"] =
                                $state.variable.sync_product_id === null
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
                                          opId: "74ba98e2-2f53-4030-9404-a041d9b2a02d",
                                          userArgs: {
                                            keys: [$state.variable.id],
                                            variables: [
                                              $state.syncState.data.response.id
                                            ]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [],
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["postgresUpdateById2"] != null &&
                                typeof $steps["postgresUpdateById2"] ===
                                  "object" &&
                                typeof $steps["postgresUpdateById2"].then ===
                                  "function"
                              ) {
                                $steps["postgresUpdateById2"] = await $steps[
                                  "postgresUpdateById2"
                                ];
                              }

                              $steps["refreshData"] = true
                                ? (() => {
                                    const actionArgs = {
                                      queryInvalidation: ["plasmic_refresh_all"]
                                    };
                                    return (async ({ queryInvalidation }) => {
                                      if (!queryInvalidation) {
                                        return;
                                      }
                                      await plasmicInvalidate(
                                        queryInvalidation
                                      );
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["refreshData"] != null &&
                                typeof $steps["refreshData"] === "object" &&
                                typeof $steps["refreshData"].then === "function"
                              ) {
                                $steps["refreshData"] = await $steps[
                                  "refreshData"
                                ];
                              }
                            }}
                            onOpenChange={generateStateOnChangeProp($state, [
                              "confirmSyncIndividual",
                              "open"
                            ])}
                            open={generateStateValueProp($state, [
                              "confirmSyncIndividual",
                              "open"
                            ])}
                            title={"Confirm Details"}
                            trigger={null}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__wj6Lu
                              )}
                            >
                              <h4
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h4,
                                  projectcss.__wab_text,
                                  sty.h4__eyjkW
                                )}
                              >
                                {"Title"}
                              </h4>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ws20L
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        $queries.queryDesign.data[0].title +
                                        " - " +
                                        $state.variable.title
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <h4
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h4,
                                  projectcss.__wab_text,
                                  sty.h4__esbyh
                                )}
                              >
                                {"Description"}
                              </h4>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__gd41L
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        $queries.queryDesign.data[0]
                                          .description +
                                        " <br> " +
                                        $state.variable.description
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <h4
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h4,
                                  projectcss.__wab_text,
                                  sty.h4__scB2B
                                )}
                              >
                                {"Tags"}
                              </h4>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___3XTZv
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        $queries.queryDesign.data[0].tags +
                                        "," +
                                        $state.variable.tags
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          </AntdModal>
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.table
                              ),
                              data: (() => {
                                try {
                                  return $queries.queryGetProductsFromRecipe;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              fields: (() => {
                                const __composite = [
                                  { key: "id", fieldId: "id" },
                                  {
                                    key: "print_provider",
                                    fieldId: "print_provider"
                                  },
                                  {
                                    key: "owner",
                                    fieldId: "owner",
                                    isHidden: null
                                  },
                                  {
                                    key: "variant_ids",
                                    fieldId: "variant_ids",
                                    isHidden: null
                                  },
                                  {
                                    key: "description",
                                    fieldId: "description",
                                    isHidden: null
                                  },
                                  {
                                    key: "placeholder_ids",
                                    fieldId: "placeholder_ids",
                                    isHidden: null
                                  },
                                  {
                                    key: "recipe_id",
                                    fieldId: "recipe_id",
                                    isHidden: null
                                  },
                                  { key: "tags", fieldId: "tags" },
                                  {
                                    key: "sync_product_id",
                                    fieldId: "sync_product_id"
                                  },
                                  { key: "created_at", fieldId: "created_at" },
                                  {
                                    key: "blueprint_id",
                                    fieldId: "blueprint_id",
                                    dataType: null
                                  },
                                  { key: "title", fieldId: "title" },
                                  {
                                    key: "email",
                                    fieldId: "email",
                                    isHidden: null
                                  }
                                ];
                                __composite["2"]["isHidden"] = true;
                                __composite["3"]["isHidden"] = true;
                                __composite["4"]["isHidden"] = true;
                                __composite["5"]["isHidden"] = true;
                                __composite["6"]["isHidden"] = true;
                                __composite["10"]["dataType"] = "string";
                                __composite["12"]["isHidden"] = true;
                                return __composite;
                              })(),

                              hideColumnPicker: true,
                              hideExports: true,
                              hideSearch: true,
                              onRowSelectionChanged: async (
                                ...eventArgs: any
                              ) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRowKey",
                                  ["table", "selectedRowKey"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRow",
                                  ["table", "selectedRow"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRows",
                                  ["table", "selectedRows"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRowKeys",
                                  ["table", "selectedRowKeys"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                              },
                              rowActions: (() => {
                                const __composite = [
                                  { type: "item", label: null, onClick: null }
                                ];
                                __composite["0"]["label"] = "Sync";
                                __composite["0"]["onClick"] = async (
                                  rowKey,
                                  row
                                ) => {
                                  const $steps = {};

                                  $steps["updateVariable"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["variable"]
                                          },
                                          operation: 0,
                                          value: row
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateVariable"] != null &&
                                    typeof $steps["updateVariable"] ===
                                      "object" &&
                                    typeof $steps["updateVariable"].then ===
                                      "function"
                                  ) {
                                    $steps["updateVariable"] = await $steps[
                                      "updateVariable"
                                    ];
                                  }

                                  $steps["updateConfirmSyncIndividualOpen"] =
                                    true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "confirmSyncIndividual",
                                                "open"
                                              ]
                                            },
                                            operation: 4
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            const oldValue = $stateGet(
                                              objRoot,
                                              variablePath
                                            );
                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              !oldValue
                                            );
                                            return !oldValue;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["updateConfirmSyncIndividualOpen"] !=
                                      null &&
                                    typeof $steps[
                                      "updateConfirmSyncIndividualOpen"
                                    ] === "object" &&
                                    typeof $steps[
                                      "updateConfirmSyncIndividualOpen"
                                    ].then === "function"
                                  ) {
                                    $steps["updateConfirmSyncIndividualOpen"] =
                                      await $steps[
                                        "updateConfirmSyncIndividualOpen"
                                      ];
                                  }
                                };
                                return __composite;
                              })(),

                              scopeClassName: sty["table__instance"],
                              selectedRowKey: generateStateValueProp($state, [
                                "table",
                                "selectedRowKey"
                              ]),
                              selectedRowKeys: generateStateValueProp($state, [
                                "table",
                                "selectedRowKeys"
                              ]),
                              themeResetClassName: classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "selectedRowKey",
                                  plasmicStateName: "table.selectedRowKey"
                                },
                                {
                                  name: "selectedRow",
                                  plasmicStateName: "table.selectedRow"
                                },
                                {
                                  name: "selectedRows",
                                  plasmicStateName: "table.selectedRows"
                                },
                                {
                                  name: "selectedRowKeys",
                                  plasmicStateName: "table.selectedRowKeys"
                                }
                              ],
                              [],
                              RichTable_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <RichTable
                                data-plasmic-name={"table"}
                                data-plasmic-override={overrides.table}
                                {...child$Props}
                              />
                            );
                          })()}
                        </AntdTabItem>
                        <AntdTabItem
                          className={classNames(
                            "__wab_instance",
                            sty.tabItem__puYpx
                          )}
                          key={"2"}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__t5L8
                              )}
                            >
                              {"Printful"}
                            </div>
                          }
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__k5Bb
                            )}
                          >
                            {"Second Children"}
                          </div>
                        </AntdTabItem>
                      </React.Fragment>
                    }
                    onChange={generateStateOnChangeProp($state, [
                      "tabs",
                      "activeKey"
                    ])}
                    sticky={false}
                    tabBarBackground={"#FFF"}
                    tabsDropdownScopeClassName={sty["tabs__tabsDropdown"]}
                    tabsScopeClassName={sty["tabs__tabs"]}
                  />
                </React.Fragment>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "table2",
    "tabs",
    "button",
    "confirmSyncIndividual",
    "table"
  ],
  pageLayout: [
    "pageLayout",
    "table2",
    "tabs",
    "button",
    "confirmSyncIndividual",
    "table"
  ],
  table2: ["table2"],
  tabs: ["tabs", "button", "confirmSyncIndividual", "table"],
  button: ["button"],
  confirmSyncIndividual: ["confirmSyncIndividual"],
  table: ["table"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  table2: typeof RichTable;
  tabs: typeof AntdTabs;
  button: typeof AntdButton;
  confirmSyncIndividual: typeof AntdModal;
  table: typeof RichTable;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSync__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSync__VariantsArgs;
    args?: PlasmicSync__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSync__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSync__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSync__ArgProps,
          internalVariantPropNames: PlasmicSync__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSync__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSync";
  } else {
    func.displayName = `PlasmicSync.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={"d035f350-edf5-4268-af03-4480b52522b0"}
      appId={"2Up8DUmBB1Tx5dhznkvCW5"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "2Up8DUmBB1Tx5dhznkvCW5"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicSync = Object.assign(
  // Top-level PlasmicSync renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    table2: makeNodeComponent("table2"),
    tabs: makeNodeComponent("tabs"),
    button: makeNodeComponent("button"),
    confirmSyncIndividual: makeNodeComponent("confirmSyncIndividual"),
    table: makeNodeComponent("table"),

    // Metadata about props expected for PlasmicSync
    internalVariantProps: PlasmicSync__VariantProps,
    internalArgProps: PlasmicSync__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSync;
/* prettier-ignore-end */
