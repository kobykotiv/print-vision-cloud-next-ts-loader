// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2Up8DUmBB1Tx5dhznkvCW5
// Component: AaOssH5xfyrP

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import PageLayout from "../../PageLayout"; // plasmic-import: nHDfdLqBbJ3Q/component
import { RichDetails } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-details";
import { AntdTabs } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdTabItem } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/SchemaForm";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 2Up8DUmBB1Tx5dhznkvCW5/projectcss
import sty from "./PlasmicEditRecipev2.module.css"; // plasmic-import: AaOssH5xfyrP/css

createPlasmicElementProxy;

export type PlasmicEditRecipev2__VariantMembers = {};
export type PlasmicEditRecipev2__VariantsArgs = {};
type VariantPropType = keyof PlasmicEditRecipev2__VariantsArgs;
export const PlasmicEditRecipev2__VariantProps = new Array<VariantPropType>();

export type PlasmicEditRecipev2__ArgsType = {};
type ArgPropType = keyof PlasmicEditRecipev2__ArgsType;
export const PlasmicEditRecipev2__ArgProps = new Array<ArgPropType>();

export type PlasmicEditRecipev2__OverridesType = {
  root?: Flex__<"div">;
  pageLayout?: Flex__<typeof PageLayout>;
  h1?: Flex__<"h1">;
  dataDetails?: Flex__<typeof RichDetails>;
  tabs?: Flex__<typeof AntdTabs>;
  tablePrintifyProducts?: Flex__<typeof RichTable>;
  modalEditPrintifyProduct?: Flex__<typeof AntdModal>;
  formEditPrintifyProduct?: Flex__<typeof FormWrapper>;
  tabs2?: Flex__<typeof AntdTabs>;
};

export interface DefaultEditRecipev2Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicEditRecipev2__RenderFunc(props: {
  variants: PlasmicEditRecipev2__VariantsArgs;
  args: PlasmicEditRecipev2__ArgsType;
  overrides: PlasmicEditRecipev2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "tabs.activeKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "tablePrintifyProducts.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "tablePrintifyProducts.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "tablePrintifyProducts.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "tablePrintifyProducts.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "modalEditPrintifyProduct.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "formEditPrintifyProduct.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "formEditPrintifyProduct",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formEditPrintifyProduct.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "formEditPrintifyProduct",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "selectedProduct",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "tabs2.activeKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    qinit: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "fe84eb84-d7db-43d3-ad8f-423511061078",
        userArgs: {
          filters: [$ctx.params.id]
        },
        cacheKey: `plasmic.$.${(() => {
          try {
            return "getOne";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.fe84eb84-d7db-43d3-ad8f-423511061078.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    qSupPrintifyProducts: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "a153d009-81ec-4d71-b806-918d26ea9db6",
        userArgs: {
          filters: [parseInt($queries.qinit.data[0].id)]
        },
        cacheKey: `plasmic.$.a153d009-81ec-4d71-b806-918d26ea9db6.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    cGetPrintifyBlueprintPp: usePlasmicDataOp(() => {
      return {
        sourceId: "fumskhn7h2QULzwkXAtFMC",
        opId: "e05b4967-a8b5-454f-b835-13e2206eb853",
        userArgs: {
          path: [parseInt($state.selectedProduct.blueprint_id)]
        },
        cacheKey: `plasmic.$.e05b4967-a8b5-454f-b835-13e2206eb853.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $queries.qinit.data[0].title;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Page title";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h1>
                  <RichDetails
                    data-plasmic-name={"dataDetails"}
                    data-plasmic-override={overrides.dataDetails}
                    bordered={true}
                    className={classNames("__wab_instance", sty.dataDetails)}
                    data={(() => {
                      try {
                        return $queries.qinit.data[0];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return null;
                        }
                        throw e;
                      }
                    })()}
                  />

                  <AntdTabs
                    data-plasmic-name={"tabs"}
                    data-plasmic-override={overrides.tabs}
                    activeKey={generateStateValueProp($state, [
                      "tabs",
                      "activeKey"
                    ])}
                    animateTabBar={true}
                    animateTabContent={false}
                    animated={true}
                    className={classNames("__wab_instance", sty.tabs)}
                    items={
                      <React.Fragment>
                        <AntdTabItem
                          className={classNames(
                            "__wab_instance",
                            sty.tabItem___22B8W
                          )}
                          key={"1"}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__t7Htc
                              )}
                            >
                              {"Printify"}
                            </div>
                          }
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__qLdxe
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__yDhd
                              )}
                            >
                              <AntdButton
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__azam9
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__fveu0
                                  )}
                                >
                                  {"Populate"}
                                </div>
                              </AntdButton>
                            </div>
                            {(() => {
                              const child$Props = {
                                canSelectRows: "none",
                                className: classNames(
                                  "__wab_instance",
                                  sty.tablePrintifyProducts
                                ),
                                data: (() => {
                                  try {
                                    return $queries.qSupPrintifyProducts;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                fields: (() => {
                                  const __composite = [
                                    {
                                      key: "id",
                                      fieldId: "id",
                                      isHidden: null
                                    },
                                    { key: "title", fieldId: "title" },
                                    {
                                      key: "print_provider",
                                      fieldId: "print_provider",
                                      isHidden: null
                                    },
                                    {
                                      key: "email",
                                      fieldId: "email",
                                      isHidden: null
                                    },
                                    {
                                      key: "variant_ids",
                                      fieldId: "variant_ids",
                                      isHidden: null
                                    },
                                    {
                                      key: "description",
                                      fieldId: "description"
                                    },
                                    {
                                      key: "placeholder_ids",
                                      fieldId: "placeholder_ids",
                                      isHidden: null
                                    },
                                    {
                                      key: "recipe_id",
                                      fieldId: "recipe_id",
                                      isHidden: null
                                    },
                                    { key: "tags", fieldId: "tags" },
                                    {
                                      key: "sync_product_id",
                                      fieldId: "sync_product_id",
                                      isHidden: null
                                    },
                                    {
                                      key: "created_at",
                                      fieldId: "created_at",
                                      isHidden: null
                                    },
                                    {
                                      key: "blueprint_id",
                                      fieldId: "blueprint_id"
                                    }
                                  ];
                                  __composite["0"]["isHidden"] = true;
                                  __composite["2"]["isHidden"] = true;
                                  __composite["3"]["isHidden"] = true;
                                  __composite["4"]["isHidden"] = true;
                                  __composite["6"]["isHidden"] = true;
                                  __composite["7"]["isHidden"] = true;
                                  __composite["9"]["isHidden"] = true;
                                  __composite["10"]["isHidden"] = true;
                                  return __composite;
                                })(),

                                hideColumnPicker: true,
                                hideExports: true,
                                hideSearch: false,
                                onRowSelectionChanged: async (
                                  ...eventArgs: any
                                ) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "selectedRowKey",
                                    ["tablePrintifyProducts", "selectedRowKey"],
                                    RichTable_Helpers
                                  ).apply(null, eventArgs);
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "selectedRow",
                                    ["tablePrintifyProducts", "selectedRow"],
                                    RichTable_Helpers
                                  ).apply(null, eventArgs);
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "selectedRows",
                                    ["tablePrintifyProducts", "selectedRows"],
                                    RichTable_Helpers
                                  ).apply(null, eventArgs);
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "selectedRowKeys",
                                    [
                                      "tablePrintifyProducts",
                                      "selectedRowKeys"
                                    ],
                                    RichTable_Helpers
                                  ).apply(null, eventArgs);
                                },
                                pagination: false,
                                rowActions: (() => {
                                  const __composite = [
                                    { type: "item", label: null, onClick: null }
                                  ];
                                  __composite["0"]["label"] = "Edit";
                                  __composite["0"]["onClick"] = async (
                                    rowKey,
                                    row
                                  ) => {
                                    const $steps = {};

                                    $steps["updateSelectedProduct"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["selectedProduct"]
                                            },
                                            operation: 0,
                                            value: row
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateSelectedProduct"] != null &&
                                      typeof $steps["updateSelectedProduct"] ===
                                        "object" &&
                                      typeof $steps["updateSelectedProduct"]
                                        .then === "function"
                                    ) {
                                      $steps["updateSelectedProduct"] =
                                        await $steps["updateSelectedProduct"];
                                    }

                                    $steps[
                                      "updateModalEditPrintifyProductOpen"
                                    ] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "modalEditPrintifyProduct",
                                                "open"
                                              ]
                                            },
                                            operation: 4
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            const oldValue = $stateGet(
                                              objRoot,
                                              variablePath
                                            );
                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              !oldValue
                                            );
                                            return !oldValue;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps[
                                        "updateModalEditPrintifyProductOpen"
                                      ] != null &&
                                      typeof $steps[
                                        "updateModalEditPrintifyProductOpen"
                                      ] === "object" &&
                                      typeof $steps[
                                        "updateModalEditPrintifyProductOpen"
                                      ].then === "function"
                                    ) {
                                      $steps[
                                        "updateModalEditPrintifyProductOpen"
                                      ] = await $steps[
                                        "updateModalEditPrintifyProductOpen"
                                      ];
                                    }
                                  };
                                  return __composite;
                                })(),

                                scopeClassName:
                                  sty["tablePrintifyProducts__instance"],
                                selectedRowKey: generateStateValueProp($state, [
                                  "tablePrintifyProducts",
                                  "selectedRowKey"
                                ]),
                                selectedRowKeys: generateStateValueProp(
                                  $state,
                                  ["tablePrintifyProducts", "selectedRowKeys"]
                                ),
                                themeResetClassName: classNames(
                                  projectcss.root_reset,
                                  projectcss.root_reset_tags,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "selectedRowKey",
                                    plasmicStateName:
                                      "tablePrintifyProducts.selectedRowKey"
                                  },
                                  {
                                    name: "selectedRow",
                                    plasmicStateName:
                                      "tablePrintifyProducts.selectedRow"
                                  },
                                  {
                                    name: "selectedRows",
                                    plasmicStateName:
                                      "tablePrintifyProducts.selectedRows"
                                  },
                                  {
                                    name: "selectedRowKeys",
                                    plasmicStateName:
                                      "tablePrintifyProducts.selectedRowKeys"
                                  }
                                ],
                                [],
                                RichTable_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <RichTable
                                  data-plasmic-name={"tablePrintifyProducts"}
                                  data-plasmic-override={
                                    overrides.tablePrintifyProducts
                                  }
                                  {...child$Props}
                                />
                              );
                            })()}
                            <AntdModal
                              data-plasmic-name={"modalEditPrintifyProduct"}
                              data-plasmic-override={
                                overrides.modalEditPrintifyProduct
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.modalEditPrintifyProduct
                              )}
                              defaultStylesClassName={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                              hideFooter={true}
                              modalScopeClassName={
                                sty["modalEditPrintifyProduct__modal"]
                              }
                              onOpenChange={generateStateOnChangeProp($state, [
                                "modalEditPrintifyProduct",
                                "open"
                              ])}
                              open={generateStateValueProp($state, [
                                "modalEditPrintifyProduct",
                                "open"
                              ])}
                              title={"Modal title"}
                              trigger={null}
                              width={"80%"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__m9ClN
                                )}
                              >
                                {(() => {
                                  const child$Props = {
                                    children: null,
                                    className: classNames(
                                      "__wab_instance",
                                      sty.formEditPrintifyProduct
                                    ),
                                    data: {
                                      sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
                                      opId: "7da9a98c-58d3-43d9-9905-8945281ea694",
                                      userArgs: {
                                        filters: [
                                          parseInt($state.selectedProduct.id)
                                        ]
                                      },
                                      cacheKey: `plasmic.$.${(() => {
                                        try {
                                          return "getOne";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}.$.7da9a98c-58d3-43d9-9905-8945281ea694.$.`,
                                      invalidatedKeys: null,
                                      roleId: null
                                    },
                                    dataFormItems: (() => {
                                      const __composite = [
                                        {
                                          key: "id",
                                          inputType: "Number",
                                          fieldId: "id",
                                          label: "id",
                                          name: "id",
                                          initialValue: "303"
                                        },
                                        {
                                          key: "print_provider",
                                          inputType: null,
                                          fieldId: "print_provider",
                                          label: "print_provider",
                                          name: "print_provider",
                                          initialValue: {},
                                          options: null
                                        },
                                        {
                                          key: "email",
                                          inputType: "Text",
                                          fieldId: "email",
                                          label: "email",
                                          name: "email",
                                          initialValue: "golfx2@gmail.com",
                                          hidden: null
                                        },
                                        {
                                          key: "variant_ids",
                                          inputType: "Number",
                                          fieldId: "variant_ids",
                                          label: "variant_ids",
                                          name: "variant_ids",
                                          initialValue: {},
                                          hidden: null
                                        },
                                        {
                                          key: "description",
                                          inputType: "Text",
                                          fieldId: "description",
                                          label: "description",
                                          name: "description",
                                          initialValue:
                                            'Nothing says "I love summer" like a Hawaiian shirt, and now, you can make this iconic garment even better by adding your own art to it. Made to have a boxy fit and a notch lapel collar that are perfect for any laidback scenario, these shirts come with a handy chest pocket and a 95% polyester and 5% spandex fabric for silky comfort. Choose between black or white buttons & customize it to taste. <div>.:Material: 95% polyester, 5% spandex</div><br /><div>.:Medium fabric (7.23 oz/yd²(245 g/m²))</div><br /><div>.:Boxy fit</div><br /><div>.:Chest pocket</div><br /><div>.:Black or white button options</div><br /><div>.:Sewn-in label</div>'
                                        },
                                        {
                                          key: "placeholder_ids",
                                          inputType: "Number",
                                          fieldId: "placeholder_ids",
                                          label: "placeholder_ids",
                                          name: "placeholder_ids",
                                          initialValue: {},
                                          hidden: null
                                        },
                                        {
                                          key: "recipe_id",
                                          inputType: "Number",
                                          fieldId: "recipe_id",
                                          label: "recipe_id",
                                          name: "recipe_id",
                                          initialValue: "25"
                                        },
                                        {
                                          key: "tags",
                                          inputType: "Text",
                                          fieldId: "tags",
                                          label: "tags",
                                          name: "tags",
                                          initialValue: ""
                                        },
                                        {
                                          key: "sync_product_id",
                                          inputType: "Number",
                                          fieldId: "sync_product_id",
                                          label: "sync_product_id",
                                          name: "sync_product_id",
                                          initialValue: {},
                                          hidden: null
                                        },
                                        {
                                          key: "created_at",
                                          inputType: "Text",
                                          fieldId: "created_at",
                                          label: "created_at",
                                          name: "created_at",
                                          initialValue:
                                            "2024-09-11T19:08:28.269Z",
                                          hidden: null
                                        },
                                        {
                                          key: "blueprint_id",
                                          inputType: "Number",
                                          fieldId: "blueprint_id",
                                          label: "blueprint_id",
                                          name: "blueprint_id",
                                          initialValue: "924"
                                        },
                                        {
                                          key: "title",
                                          inputType: "Text",
                                          fieldId: "title",
                                          label: "title",
                                          name: "title",
                                          initialValue:
                                            "Men's Hawaiian Shirt (AOP)"
                                        }
                                      ];
                                      __composite["1"]["inputType"] = "Select";
                                      __composite["1"]["options"] =
                                        $queries.cGetPrintifyBlueprintPp.data.response.map(
                                          item => ({
                                            label:
                                              item.title + " (" + item.id + ")",
                                            value: item.id
                                          })
                                        );
                                      __composite["2"]["hidden"] = true;
                                      __composite["3"]["hidden"] = true;
                                      __composite["5"]["hidden"] = true;
                                      __composite["8"]["hidden"] = true;
                                      __composite["9"]["hidden"] = true;
                                      return __composite;
                                    })(),

                                    extendedOnValuesChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["formEditPrintifyProduct", "value"],
                                        FormWrapper_Helpers
                                      ),
                                    formItems: [],
                                    labelCol: { span: 8, horizontalOnly: true },
                                    layout: "vertical",
                                    mode: "simplified",
                                    onFinish: async values => {
                                      const $steps = {};

                                      $steps["defaultSubmit"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              dataOp: {
                                                sourceId:
                                                  "83X9ZdYzYUYJtgqe5fwXeX",
                                                opId: "076ca8a5-5c20-4f73-99fd-16a67fce7a88",
                                                userArgs: {
                                                  conditions: [
                                                    parseInt(
                                                      $state.selectedProduct.id
                                                    )
                                                  ],
                                                  variables: [
                                                    $state
                                                      .formEditPrintifyProduct
                                                      .value
                                                  ]
                                                },
                                                cacheKey: null,
                                                invalidatedKeys: [
                                                  "plasmic_refresh_all"
                                                ],
                                                roleId: null
                                              }
                                            };
                                            return (async ({
                                              dataOp,
                                              continueOnError
                                            }) => {
                                              try {
                                                const response =
                                                  await executePlasmicDataOp(
                                                    dataOp,
                                                    {
                                                      userAuthToken:
                                                        dataSourcesCtx?.userAuthToken,
                                                      user: dataSourcesCtx?.user
                                                    }
                                                  );
                                                await plasmicInvalidate(
                                                  dataOp.invalidatedKeys
                                                );
                                                return response;
                                              } catch (e) {
                                                if (!continueOnError) {
                                                  throw e;
                                                }
                                                return e;
                                              }
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["defaultSubmit"] != null &&
                                        typeof $steps["defaultSubmit"] ===
                                          "object" &&
                                        typeof $steps["defaultSubmit"].then ===
                                          "function"
                                      ) {
                                        $steps["defaultSubmit"] = await $steps[
                                          "defaultSubmit"
                                        ];
                                      }
                                    },
                                    onIsSubmittingChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "isSubmitting",
                                        [
                                          "formEditPrintifyProduct",
                                          "isSubmitting"
                                        ],
                                        FormWrapper_Helpers
                                      ),
                                    ref: ref => {
                                      $refs["formEditPrintifyProduct"] = ref;
                                    },
                                    submitSlot: (
                                      <AntdButton
                                        className={classNames(
                                          "__wab_instance",
                                          sty.button__x9FZe
                                        )}
                                        submitsForm={true}
                                        type={"primary"}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__jwlc
                                          )}
                                        >
                                          {"Submit"}
                                        </div>
                                      </AntdButton>
                                    ),
                                    wrapperCol: {
                                      span: 16,
                                      horizontalOnly: true
                                    }
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName:
                                          "formEditPrintifyProduct.value"
                                      },
                                      {
                                        name: "isSubmitting",
                                        plasmicStateName:
                                          "formEditPrintifyProduct.isSubmitting"
                                      }
                                    ],
                                    [],
                                    FormWrapper_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <FormWrapper
                                      data-plasmic-name={
                                        "formEditPrintifyProduct"
                                      }
                                      data-plasmic-override={
                                        overrides.formEditPrintifyProduct
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()}
                                <AntdTabs
                                  data-plasmic-name={"tabs2"}
                                  data-plasmic-override={overrides.tabs2}
                                  activeKey={generateStateValueProp($state, [
                                    "tabs2",
                                    "activeKey"
                                  ])}
                                  animateTabBar={true}
                                  animateTabContent={false}
                                  animated={true}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.tabs2
                                  )}
                                  items={
                                    <React.Fragment>
                                      <AntdTabItem
                                        className={classNames(
                                          "__wab_instance",
                                          sty.tabItem__k4Cu1
                                        )}
                                        key={"1"}
                                        label={
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__qqFj2
                                            )}
                                          >
                                            {"Variants"}
                                          </div>
                                        }
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__cdgy1
                                          )}
                                        >
                                          {"First Children"}
                                        </div>
                                      </AntdTabItem>
                                      <AntdTabItem
                                        className={classNames(
                                          "__wab_instance",
                                          sty.tabItem__eiJin
                                        )}
                                        key={"2"}
                                        label={
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__hnWzR
                                            )}
                                          >
                                            {"Placeholders"}
                                          </div>
                                        }
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__rklOl
                                          )}
                                        >
                                          {"Second Children"}
                                        </div>
                                      </AntdTabItem>
                                    </React.Fragment>
                                  }
                                  onChange={generateStateOnChangeProp($state, [
                                    "tabs2",
                                    "activeKey"
                                  ])}
                                  sticky={false}
                                  tabBarBackground={"#FFF"}
                                  tabsDropdownScopeClassName={
                                    sty["tabs2__tabsDropdown"]
                                  }
                                  tabsScopeClassName={sty["tabs2__tabs"]}
                                />
                              </div>
                            </AntdModal>
                          </div>
                        </AntdTabItem>
                        <AntdTabItem
                          className={classNames(
                            "__wab_instance",
                            sty.tabItem__cbdMq
                          )}
                          key={"2"}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__eKHrq
                              )}
                            >
                              {"Printful"}
                            </div>
                          }
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yohUm
                            )}
                          >
                            {"Second Children"}
                          </div>
                        </AntdTabItem>
                      </React.Fragment>
                    }
                    onChange={generateStateOnChangeProp($state, [
                      "tabs",
                      "activeKey"
                    ])}
                    sticky={false}
                    tabBarBackground={"#FFF"}
                    tabsDropdownScopeClassName={sty["tabs__tabsDropdown"]}
                    tabsScopeClassName={sty["tabs__tabs"]}
                  />
                </React.Fragment>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "h1",
    "dataDetails",
    "tabs",
    "tablePrintifyProducts",
    "modalEditPrintifyProduct",
    "formEditPrintifyProduct",
    "tabs2"
  ],
  pageLayout: [
    "pageLayout",
    "h1",
    "dataDetails",
    "tabs",
    "tablePrintifyProducts",
    "modalEditPrintifyProduct",
    "formEditPrintifyProduct",
    "tabs2"
  ],
  h1: ["h1"],
  dataDetails: ["dataDetails"],
  tabs: [
    "tabs",
    "tablePrintifyProducts",
    "modalEditPrintifyProduct",
    "formEditPrintifyProduct",
    "tabs2"
  ],
  tablePrintifyProducts: ["tablePrintifyProducts"],
  modalEditPrintifyProduct: [
    "modalEditPrintifyProduct",
    "formEditPrintifyProduct",
    "tabs2"
  ],
  formEditPrintifyProduct: ["formEditPrintifyProduct"],
  tabs2: ["tabs2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  h1: "h1";
  dataDetails: typeof RichDetails;
  tabs: typeof AntdTabs;
  tablePrintifyProducts: typeof RichTable;
  modalEditPrintifyProduct: typeof AntdModal;
  formEditPrintifyProduct: typeof FormWrapper;
  tabs2: typeof AntdTabs;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEditRecipev2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEditRecipev2__VariantsArgs;
    args?: PlasmicEditRecipev2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEditRecipev2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicEditRecipev2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEditRecipev2__ArgProps,
          internalVariantPropNames: PlasmicEditRecipev2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEditRecipev2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEditRecipev2";
  } else {
    func.displayName = `PlasmicEditRecipev2.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "2Up8DUmBB1Tx5dhznkvCW5"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicEditRecipev2 = Object.assign(
  // Top-level PlasmicEditRecipev2 renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    h1: makeNodeComponent("h1"),
    dataDetails: makeNodeComponent("dataDetails"),
    tabs: makeNodeComponent("tabs"),
    tablePrintifyProducts: makeNodeComponent("tablePrintifyProducts"),
    modalEditPrintifyProduct: makeNodeComponent("modalEditPrintifyProduct"),
    formEditPrintifyProduct: makeNodeComponent("formEditPrintifyProduct"),
    tabs2: makeNodeComponent("tabs2"),

    // Metadata about props expected for PlasmicEditRecipev2
    internalVariantProps: PlasmicEditRecipev2__VariantProps,
    internalArgProps: PlasmicEditRecipev2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicEditRecipev2;
/* prettier-ignore-end */
