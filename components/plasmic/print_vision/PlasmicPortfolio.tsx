// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2Up8DUmBB1Tx5dhznkvCW5
// Component: Vb0VOLzBZNER

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import PageLayout from "../../PageLayout"; // plasmic-import: nHDfdLqBbJ3Q/component
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 2Up8DUmBB1Tx5dhznkvCW5/projectcss
import sty from "./PlasmicPortfolio.module.css"; // plasmic-import: Vb0VOLzBZNER/css

createPlasmicElementProxy;

export type PlasmicPortfolio__VariantMembers = {};
export type PlasmicPortfolio__VariantsArgs = {};
type VariantPropType = keyof PlasmicPortfolio__VariantsArgs;
export const PlasmicPortfolio__VariantProps = new Array<VariantPropType>();

export type PlasmicPortfolio__ArgsType = {};
type ArgPropType = keyof PlasmicPortfolio__ArgsType;
export const PlasmicPortfolio__ArgProps = new Array<ArgPropType>();

export type PlasmicPortfolio__OverridesType = {
  root?: Flex__<"div">;
  pageLayout?: Flex__<typeof PageLayout>;
  table?: Flex__<typeof RichTable>;
  modalPreviewDesign?: Flex__<typeof AntdModal>;
  img?: Flex__<typeof PlasmicImg__>;
  modalEditDeisgn?: Flex__<typeof AntdModal>;
  table2?: Flex__<typeof RichTable>;
  form?: Flex__<typeof FormWrapper>;
  numberInput?: Flex__<typeof AntdInputNumber>;
  input?: Flex__<typeof AntdInput>;
  input2?: Flex__<typeof AntdInput>;
  textArea?: Flex__<typeof AntdTextArea>;
  input3?: Flex__<typeof AntdInput>;
  input4?: Flex__<typeof AntdInput>;
  input5?: Flex__<typeof AntdInput>;
  textArea2?: Flex__<typeof AntdTextArea>;
  input6?: Flex__<typeof AntdInput>;
  input7?: Flex__<typeof AntdInput>;
  button?: Flex__<typeof AntdButton>;
  modalDeleteDesign?: Flex__<typeof AntdModal>;
};

export interface DefaultPortfolioProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPortfolio__RenderFunc(props: {
  variants: PlasmicPortfolio__VariantsArgs;
  args: PlasmicPortfolio__ArgsType;
  overrides: PlasmicPortfolio__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "modalPreviewDesign.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "previewUrl",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "selectedImageId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "selectedRow",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "modalEditDeisgn.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "modalDeleteDesign.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "numberInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "textArea2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "table2.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table2.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table2.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table2.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    queryGetDesignsByUser: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "fde53daa-2bdc-47f7-b55e-a708003881c2",
        userArgs: {},
        cacheKey: `plasmic.$.fde53daa-2bdc-47f7-b55e-a708003881c2.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    componentDataGetRecipes: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "e207f29b-e1b1-48fa-ac78-f45405da2270",
        userArgs: {},
        cacheKey: `plasmic.$.e207f29b-e1b1-48fa-ac78-f45405da2270.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
          >
            <DataCtxReader__>
              {$ctx =>
                (() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.table),
                    data: (() => {
                      try {
                        return $queries.queryGetDesignsByUser;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    fields: (() => {
                      const __composite = [
                        { key: "id", fieldId: "id" },
                        { key: "created_at", fieldId: "created_at" },
                        { key: "title", fieldId: "title" },
                        { key: "description", fieldId: "description" },
                        { key: "email", fieldId: "email", isHidden: null },
                        {
                          key: "printful_id",
                          fieldId: "printful_id",
                          dataType: null,
                          isHidden: null
                        },
                        { key: "image_id", fieldId: "image_id" },
                        {
                          key: "printify_id",
                          fieldId: "printify_id",
                          isHidden: null
                        },
                        { key: "recipe_ids", fieldId: "recipe_ids" },
                        { key: "tags", fieldId: "tags" },
                        {
                          key: "prodigi_id",
                          fieldId: "prodigi_id",
                          isHidden: null
                        }
                      ];
                      __composite["4"]["isHidden"] = true;
                      __composite["5"]["dataType"] = "string";
                      __composite["5"]["isHidden"] = true;
                      __composite["7"]["isHidden"] = true;
                      __composite["10"]["isHidden"] = true;
                      return __composite;
                    })(),

                    hideColumnPicker: true,
                    hideExports: true,
                    onRowSelectionChanged: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "selectedRowKey",
                        ["table", "selectedRowKey"],
                        RichTable_Helpers
                      ).apply(null, eventArgs);
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "selectedRow",
                        ["table", "selectedRow"],
                        RichTable_Helpers
                      ).apply(null, eventArgs);
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "selectedRows",
                        ["table", "selectedRows"],
                        RichTable_Helpers
                      ).apply(null, eventArgs);
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "selectedRowKeys",
                        ["table", "selectedRowKeys"],
                        RichTable_Helpers
                      ).apply(null, eventArgs);
                    },
                    rowActions: (() => {
                      const __composite = [
                        { type: "item", onClick: null, label: null },
                        { type: "item", label: null, onClick: null },
                        { type: "item", label: null, onClick: null }
                      ];
                      __composite["0"]["onClick"] = async (rowKey, row) => {
                        const $steps = {};

                        $steps["goToSync"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: `/sync-design/[design]/[recipe]`
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToSync"] != null &&
                          typeof $steps["goToSync"] === "object" &&
                          typeof $steps["goToSync"].then === "function"
                        ) {
                          $steps["goToSync"] = await $steps["goToSync"];
                        }
                      };
                      __composite["0"]["label"] = "Sync";
                      __composite["1"]["label"] = "Edit";
                      __composite["1"]["onClick"] = async (rowKey, row) => {
                        const $steps = {};

                        $steps["updateSelectedRow"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["selectedRow"]
                                },
                                operation: 0,
                                value: row
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateSelectedRow"] != null &&
                          typeof $steps["updateSelectedRow"] === "object" &&
                          typeof $steps["updateSelectedRow"].then === "function"
                        ) {
                          $steps["updateSelectedRow"] = await $steps[
                            "updateSelectedRow"
                          ];
                        }

                        $steps["updateModalEditDeisgnOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["modalEditDeisgn", "open"]
                                },
                                operation: 4
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateModalEditDeisgnOpen"] != null &&
                          typeof $steps["updateModalEditDeisgnOpen"] ===
                            "object" &&
                          typeof $steps["updateModalEditDeisgnOpen"].then ===
                            "function"
                        ) {
                          $steps["updateModalEditDeisgnOpen"] = await $steps[
                            "updateModalEditDeisgnOpen"
                          ];
                        }
                      };
                      __composite["2"]["label"] = "Delete";
                      __composite["2"]["onClick"] = async (rowKey, row) => {
                        const $steps = {};

                        $steps["updateModalDeleteDesignOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["modalDeleteDesign", "open"]
                                },
                                operation: 4
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateModalDeleteDesignOpen"] != null &&
                          typeof $steps["updateModalDeleteDesignOpen"] ===
                            "object" &&
                          typeof $steps["updateModalDeleteDesignOpen"].then ===
                            "function"
                        ) {
                          $steps["updateModalDeleteDesignOpen"] = await $steps[
                            "updateModalDeleteDesignOpen"
                          ];
                        }
                      };
                      return __composite;
                    })(),

                    scopeClassName: sty["table__instance"],
                    selectedRowKey: generateStateValueProp($state, [
                      "table",
                      "selectedRowKey"
                    ]),
                    selectedRowKeys: generateStateValueProp($state, [
                      "table",
                      "selectedRowKeys"
                    ]),
                    themeResetClassName: classNames(
                      projectcss.root_reset,
                      projectcss.root_reset_tags,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "selectedRowKey",
                        plasmicStateName: "table.selectedRowKey"
                      },
                      {
                        name: "selectedRow",
                        plasmicStateName: "table.selectedRow"
                      },
                      {
                        name: "selectedRows",
                        plasmicStateName: "table.selectedRows"
                      },
                      {
                        name: "selectedRowKeys",
                        plasmicStateName: "table.selectedRowKeys"
                      }
                    ],
                    [],
                    RichTable_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <RichTable
                      data-plasmic-name={"table"}
                      data-plasmic-override={overrides.table}
                      {...child$Props}
                    />
                  );
                })()
              }
            </DataCtxReader__>
          </PageLayout>
          <AntdModal
            data-plasmic-name={"modalPreviewDesign"}
            data-plasmic-override={overrides.modalPreviewDesign}
            className={classNames("__wab_instance", sty.modalPreviewDesign)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            hideFooter={true}
            modalScopeClassName={sty["modalPreviewDesign__modal"]}
            onOpenChange={generateStateOnChangeProp($state, [
              "modalPreviewDesign",
              "open"
            ])}
            open={generateStateValueProp($state, [
              "modalPreviewDesign",
              "open"
            ])}
            title={"Preview"}
            trigger={null}
          >
            <div className={classNames(projectcss.all, sty.freeBox__lf61)}>
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={(() => {
                  try {
                    return $state.previewUrl.signedUrl;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
          </AntdModal>
          <AntdModal
            data-plasmic-name={"modalEditDeisgn"}
            data-plasmic-override={overrides.modalEditDeisgn}
            className={classNames("__wab_instance", sty.modalEditDeisgn)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            hideFooter={true}
            modalScopeClassName={sty["modalEditDeisgn__modal"]}
            onOpenChange={generateStateOnChangeProp($state, [
              "modalEditDeisgn",
              "open"
            ])}
            open={generateStateValueProp($state, ["modalEditDeisgn", "open"])}
            title={"Edit Design"}
            trigger={null}
            width={"80%"}
          >
            <div className={classNames(projectcss.all, sty.freeBox__fPv30)}>
              <div className={classNames(projectcss.all, sty.freeBox__bniBb)}>
                {(() => {
                  const child$Props = {
                    canSelectRows: "multiple",
                    className: classNames("__wab_instance", sty.table2),
                    data: (() => {
                      try {
                        return $queries.componentDataGetRecipes;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    fields: (() => {
                      const __composite = [
                        { key: "id", fieldId: "id" },
                        {
                          key: "created_at",
                          fieldId: "created_at",
                          isHidden: null
                        },
                        { key: "title", fieldId: "title" },
                        { key: "owner", fieldId: "owner", isHidden: null },
                        {
                          key: "Printfy Product ID",
                          fieldId: "Printfy Product ID",
                          isHidden: null
                        },
                        {
                          key: "printify_blueprints",
                          fieldId: "printify_blueprints",
                          isHidden: null
                        },
                        {
                          key: "fk_printify_product_id",
                          fieldId: "fk_printify_product_id",
                          isHidden: null
                        },
                        {
                          key: "printful_blueprints",
                          fieldId: "printful_blueprints",
                          isHidden: null
                        }
                      ];
                      __composite["1"]["isHidden"] = true;
                      __composite["3"]["isHidden"] = true;
                      __composite["4"]["isHidden"] = true;
                      __composite["5"]["isHidden"] = true;
                      __composite["6"]["isHidden"] = true;
                      __composite["7"]["isHidden"] = true;
                      return __composite;
                    })(),

                    hideColumnPicker: true,
                    hideExports: true,
                    onRowSelectionChanged: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "selectedRowKey",
                        ["table2", "selectedRowKey"],
                        RichTable_Helpers
                      ).apply(null, eventArgs);
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "selectedRow",
                        ["table2", "selectedRow"],
                        RichTable_Helpers
                      ).apply(null, eventArgs);
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "selectedRows",
                        ["table2", "selectedRows"],
                        RichTable_Helpers
                      ).apply(null, eventArgs);
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "selectedRowKeys",
                        ["table2", "selectedRowKeys"],
                        RichTable_Helpers
                      ).apply(null, eventArgs);
                      (async (rowKeys, rows) => {
                        const $steps = {};

                        $steps["runActionOnForm"] = true
                          ? (() => {
                              const actionArgs = {
                                tplRef: "form",
                                action: "setFieldValue",
                                args: [
                                  ["recipe_ids"],
                                  $state.table2.selectedRows.map(i =>
                                    parseInt(i.id)
                                  )
                                ]
                              };
                              return (({ tplRef, action, args }) => {
                                return $refs?.[tplRef]?.[action]?.(
                                  ...(args ?? [])
                                );
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runActionOnForm"] != null &&
                          typeof $steps["runActionOnForm"] === "object" &&
                          typeof $steps["runActionOnForm"].then === "function"
                        ) {
                          $steps["runActionOnForm"] = await $steps[
                            "runActionOnForm"
                          ];
                        }
                      }).apply(null, eventArgs);
                    },
                    scopeClassName: sty["table2__instance"],
                    selectedRowKey: generateStateValueProp($state, [
                      "table2",
                      "selectedRowKey"
                    ]),
                    selectedRowKeys: generateStateValueProp($state, [
                      "table2",
                      "selectedRowKeys"
                    ]),
                    themeResetClassName: classNames(
                      projectcss.root_reset,
                      projectcss.root_reset_tags,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "selectedRowKey",
                        plasmicStateName: "table2.selectedRowKey"
                      },
                      {
                        name: "selectedRow",
                        plasmicStateName: "table2.selectedRow"
                      },
                      {
                        name: "selectedRows",
                        plasmicStateName: "table2.selectedRows"
                      },
                      {
                        name: "selectedRowKeys",
                        plasmicStateName: "table2.selectedRowKeys"
                      }
                    ],
                    [],
                    RichTable_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <RichTable
                      data-plasmic-name={"table2"}
                      data-plasmic-override={overrides.table2}
                      {...child$Props}
                    />
                  );
                })()}
              </div>
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.form),
                  extendedOnValuesChange:
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["form", "value"],
                      FormWrapper_Helpers
                    ),
                  formItems: [
                    { label: "Name", name: "name", inputType: "Text" },
                    {
                      label: "Message",
                      name: "message",
                      inputType: "Text Area"
                    }
                  ],
                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: "advanced",
                  onFinish: async values => {
                    const $steps = {};

                    $steps["defaultSubmit"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
                              opId: "0420ddd7-9936-45fb-a243-f5ff7802eaf1",
                              userArgs: {
                                keys: [parseInt($state.selectedRow.id)],
                                variables: [$state.form.value]
                              },
                              cacheKey: null,
                              invalidatedKeys: ["plasmic_refresh_all"],
                              roleId: "d035f350-edf5-4268-af03-4480b52522b0"
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["defaultSubmit"] != null &&
                      typeof $steps["defaultSubmit"] === "object" &&
                      typeof $steps["defaultSubmit"].then === "function"
                    ) {
                      $steps["defaultSubmit"] = await $steps["defaultSubmit"];
                    }

                    $steps["updateModalEditDeisgnOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modalEditDeisgn", "open"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModalEditDeisgnOpen"] != null &&
                      typeof $steps["updateModalEditDeisgnOpen"] === "object" &&
                      typeof $steps["updateModalEditDeisgnOpen"].then ===
                        "function"
                    ) {
                      $steps["updateModalEditDeisgnOpen"] = await $steps[
                        "updateModalEditDeisgnOpen"
                      ];
                    }
                  },
                  onIsSubmittingChange:
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "isSubmitting",
                      ["form", "isSubmitting"],
                      FormWrapper_Helpers
                    ),
                  ref: ref => {
                    $refs["form"] = ref;
                  },
                  submitSlot: null,
                  wrapperCol: { span: 16, horizontalOnly: true }
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "form.value"
                    },
                    {
                      name: "isSubmitting",
                      plasmicStateName: "form.isSubmitting"
                    }
                  ],
                  [],
                  FormWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <FormWrapper
                    data-plasmic-name={"form"}
                    data-plasmic-override={overrides.form}
                    {...child$Props}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__zhw8V
                      )}
                      hidden={true}
                      initialValue={3}
                      label={"id"}
                      name={"id"}
                    >
                      <AntdInputNumber
                        data-plasmic-name={"numberInput"}
                        data-plasmic-override={overrides.numberInput}
                        className={classNames(
                          "__wab_instance",
                          sty.numberInput
                        )}
                        onChange={generateStateOnChangeProp($state, [
                          "numberInput",
                          "value"
                        ])}
                        type={"number"}
                        value={generateStateValueProp($state, [
                          "numberInput",
                          "value"
                        ])}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__dLgN4
                      )}
                      initialValue={"Sad Girl"}
                      label={"title"}
                      name={"title"}
                      preserve={false}
                      rules={[{ ruleType: "required" }]}
                      shouldUpdate={true}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input", "value"],
                            AntdInput_Helpers
                          ),
                          value: generateStateValueProp($state, [
                            "input",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input"}
                            data-plasmic-override={overrides.input}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__k9QQd
                      )}
                      hidden={true}
                      initialValue={"2024-07-18T16:16:59.808Z"}
                      label={"created_at"}
                      name={"created_at"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input2),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input2", "value"],
                            AntdInput_Helpers
                          ),
                          value: generateStateValueProp($state, [
                            "input2",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input2.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input2"}
                            data-plasmic-override={overrides.input2}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__gfvcY
                      )}
                      initialValue={"Description"}
                      label={"description"}
                      name={"description"}
                      preserve={false}
                      rules={[{ ruleType: "required" }]}
                      shouldUpdate={true}
                    >
                      {(() => {
                        const child$Props = {
                          autoSize: true,
                          className: classNames("__wab_instance", sty.textArea),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["textArea", "value"],
                            AntdTextArea_Helpers
                          ),
                          value: generateStateValueProp($state, [
                            "textArea",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "textArea.value"
                            }
                          ],
                          [],
                          AntdTextArea_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdTextArea
                            data-plasmic-name={"textArea"}
                            data-plasmic-override={overrides.textArea}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__jwSli
                      )}
                      hidden={true}
                      initialValue={"golfx2@gmail.com"}
                      label={"email"}
                      name={"email"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input3),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input3", "value"],
                            AntdInput_Helpers
                          ),
                          value: generateStateValueProp($state, [
                            "input3",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input3.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input3"}
                            data-plasmic-override={overrides.input3}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__uKsJq
                      )}
                      hidden={true}
                      initialValue={"721696914"}
                      label={"printful_id"}
                      name={"printful_id"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input4),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input4", "value"],
                            AntdInput_Helpers
                          ),
                          value: generateStateValueProp($state, [
                            "input4",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input4.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input4"}
                            data-plasmic-override={overrides.input4}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField___9L1Di
                      )}
                      hidden={true}
                      initialValue={"rc-upload-1721319287663-2"}
                      label={"image_id"}
                      name={"image_id"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input5),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input5", "value"],
                            AntdInput_Helpers
                          ),
                          value: generateStateValueProp($state, [
                            "input5",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input5.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input5"}
                            data-plasmic-override={overrides.input5}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__cFxBz
                      )}
                      initialValue={"hello,goodbye"}
                      label={"tags"}
                      name={"tags"}
                      preserve={false}
                      shouldUpdate={true}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.textArea2
                          ),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["textArea2", "value"],
                            AntdTextArea_Helpers
                          ),
                          value: generateStateValueProp($state, [
                            "textArea2",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "textArea2.value"
                            }
                          ],
                          [],
                          AntdTextArea_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdTextArea
                            data-plasmic-name={"textArea2"}
                            data-plasmic-override={overrides.textArea2}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__q04Co
                      )}
                      hidden={true}
                      initialValue={"66993ff1746b8bcfe5ceac30"}
                      label={"printify_id"}
                      name={"printify_id"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input6),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input6", "value"],
                            AntdInput_Helpers
                          ),
                          value: generateStateValueProp($state, [
                            "input6",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input6.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input6"}
                            data-plasmic-override={overrides.input6}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__j4Fic
                      )}
                      initialValue={(() => {
                        try {
                          return $state.table2.selectedRows.map(i =>
                            parseInt(i.id)
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return ``;
                          }
                          throw e;
                        }
                      })()}
                      label={"recipe_ids"}
                      name={"recipe_ids"}
                      preserve={false}
                      rules={[{ ruleType: "required" }]}
                      shouldUpdate={true}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input7),
                          disabled: true,
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input7", "value"],
                            AntdInput_Helpers
                          ),
                          readOnly: true,
                          value: generateStateValueProp($state, [
                            "input7",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input7.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input7"}
                            data-plasmic-override={overrides.input7}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <AntdButton
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames("__wab_instance", sty.button)}
                      submitsForm={true}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___0YbRw
                        )}
                      >
                        {"Submit"}
                      </div>
                    </AntdButton>
                  </FormWrapper>
                );
              })()}
            </div>
          </AntdModal>
          <AntdModal
            data-plasmic-name={"modalDeleteDesign"}
            data-plasmic-override={overrides.modalDeleteDesign}
            className={classNames("__wab_instance", sty.modalDeleteDesign)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            hideFooter={false}
            modalScopeClassName={sty["modalDeleteDesign__modal"]}
            onCancel={async () => {
              const $steps = {};

              $steps["updateModalDeleteDeisgnOpen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["modalDeleteDesign", "open"]
                      },
                      operation: 0
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateModalDeleteDeisgnOpen"] != null &&
                typeof $steps["updateModalDeleteDeisgnOpen"] === "object" &&
                typeof $steps["updateModalDeleteDeisgnOpen"].then === "function"
              ) {
                $steps["updateModalDeleteDeisgnOpen"] = await $steps[
                  "updateModalDeleteDeisgnOpen"
                ];
              }
            }}
            onOk={async () => {
              const $steps = {};

              $steps["postgresDeleteMany"] = true
                ? (() => {
                    const actionArgs = {
                      dataOp: {
                        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
                        opId: "d7702c76-29e3-43bd-b45c-a7000d981772",
                        userArgs: {
                          conditions: [$state.selectedRow.id]
                        },
                        cacheKey: null,
                        invalidatedKeys: ["plasmic_refresh_all"],
                        roleId: null
                      }
                    };
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["postgresDeleteMany"] != null &&
                typeof $steps["postgresDeleteMany"] === "object" &&
                typeof $steps["postgresDeleteMany"].then === "function"
              ) {
                $steps["postgresDeleteMany"] = await $steps[
                  "postgresDeleteMany"
                ];
              }
            }}
            onOpenChange={generateStateOnChangeProp($state, [
              "modalDeleteDesign",
              "open"
            ])}
            open={generateStateValueProp($state, ["modalDeleteDesign", "open"])}
            title={
              <React.Fragment>
                {(() => {
                  try {
                    return (() => {
                      return (
                        'Are you sure you want to Delete "' +
                        $state.selectedRow.title +
                        '" ?'
                      );
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Are you Sure You Want to Delete?";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            }
            trigger={null}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qRzGl
              )}
            >
              {
                "There's no going back. This action Deletes this recipe and its contents."
              }
            </div>
          </AntdModal>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "table",
    "modalPreviewDesign",
    "img",
    "modalEditDeisgn",
    "table2",
    "form",
    "numberInput",
    "input",
    "input2",
    "textArea",
    "input3",
    "input4",
    "input5",
    "textArea2",
    "input6",
    "input7",
    "button",
    "modalDeleteDesign"
  ],
  pageLayout: ["pageLayout", "table"],
  table: ["table"],
  modalPreviewDesign: ["modalPreviewDesign", "img"],
  img: ["img"],
  modalEditDeisgn: [
    "modalEditDeisgn",
    "table2",
    "form",
    "numberInput",
    "input",
    "input2",
    "textArea",
    "input3",
    "input4",
    "input5",
    "textArea2",
    "input6",
    "input7",
    "button"
  ],
  table2: ["table2"],
  form: [
    "form",
    "numberInput",
    "input",
    "input2",
    "textArea",
    "input3",
    "input4",
    "input5",
    "textArea2",
    "input6",
    "input7",
    "button"
  ],
  numberInput: ["numberInput"],
  input: ["input"],
  input2: ["input2"],
  textArea: ["textArea"],
  input3: ["input3"],
  input4: ["input4"],
  input5: ["input5"],
  textArea2: ["textArea2"],
  input6: ["input6"],
  input7: ["input7"],
  button: ["button"],
  modalDeleteDesign: ["modalDeleteDesign"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  table: typeof RichTable;
  modalPreviewDesign: typeof AntdModal;
  img: typeof PlasmicImg__;
  modalEditDeisgn: typeof AntdModal;
  table2: typeof RichTable;
  form: typeof FormWrapper;
  numberInput: typeof AntdInputNumber;
  input: typeof AntdInput;
  input2: typeof AntdInput;
  textArea: typeof AntdTextArea;
  input3: typeof AntdInput;
  input4: typeof AntdInput;
  input5: typeof AntdInput;
  textArea2: typeof AntdTextArea;
  input6: typeof AntdInput;
  input7: typeof AntdInput;
  button: typeof AntdButton;
  modalDeleteDesign: typeof AntdModal;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPortfolio__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPortfolio__VariantsArgs;
    args?: PlasmicPortfolio__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPortfolio__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPortfolio__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPortfolio__ArgProps,
          internalVariantPropNames: PlasmicPortfolio__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPortfolio__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPortfolio";
  } else {
    func.displayName = `PlasmicPortfolio.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={"d035f350-edf5-4268-af03-4480b52522b0"}
      appId={"2Up8DUmBB1Tx5dhznkvCW5"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "2Up8DUmBB1Tx5dhznkvCW5"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicPortfolio = Object.assign(
  // Top-level PlasmicPortfolio renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    table: makeNodeComponent("table"),
    modalPreviewDesign: makeNodeComponent("modalPreviewDesign"),
    img: makeNodeComponent("img"),
    modalEditDeisgn: makeNodeComponent("modalEditDeisgn"),
    table2: makeNodeComponent("table2"),
    form: makeNodeComponent("form"),
    numberInput: makeNodeComponent("numberInput"),
    input: makeNodeComponent("input"),
    input2: makeNodeComponent("input2"),
    textArea: makeNodeComponent("textArea"),
    input3: makeNodeComponent("input3"),
    input4: makeNodeComponent("input4"),
    input5: makeNodeComponent("input5"),
    textArea2: makeNodeComponent("textArea2"),
    input6: makeNodeComponent("input6"),
    input7: makeNodeComponent("input7"),
    button: makeNodeComponent("button"),
    modalDeleteDesign: makeNodeComponent("modalDeleteDesign"),

    // Metadata about props expected for PlasmicPortfolio
    internalVariantProps: PlasmicPortfolio__VariantProps,
    internalArgProps: PlasmicPortfolio__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPortfolio;
/* prettier-ignore-end */
