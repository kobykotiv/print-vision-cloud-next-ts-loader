// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2Up8DUmBB1Tx5dhznkvCW5
// Component: x_9KNQmw4n3T

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import PageLayout from "../../PageLayout"; // plasmic-import: nHDfdLqBbJ3Q/component
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import Modal from "../../Modal"; // plasmic-import: QsGKyhsi7rjB/component
import Button2 from "../../Button2"; // plasmic-import: 5htpOgxRwHbE/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/SchemaForm";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 2Up8DUmBB1Tx5dhznkvCW5/projectcss
import sty from "./PlasmicSettings.module.css"; // plasmic-import: x_9KNQmw4n3T/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: -lOMU8AnMmP_/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: TF0F3UORt2hA/icon

createPlasmicElementProxy;

export type PlasmicSettings__VariantMembers = {};
export type PlasmicSettings__VariantsArgs = {};
type VariantPropType = keyof PlasmicSettings__VariantsArgs;
export const PlasmicSettings__VariantProps = new Array<VariantPropType>();

export type PlasmicSettings__ArgsType = {};
type ArgPropType = keyof PlasmicSettings__ArgsType;
export const PlasmicSettings__ArgProps = new Array<ArgPropType>();

export type PlasmicSettings__OverridesType = {
  root?: Flex__<"div">;
  pageLayout?: Flex__<typeof PageLayout>;
  table?: Flex__<typeof RichTable>;
  modal2?: Flex__<typeof Modal>;
  h3?: Flex__<"h3">;
  form2?: Flex__<typeof FormWrapper>;
  modal?: Flex__<typeof AntdModal>;
  form?: Flex__<typeof FormWrapper>;
  numberInput?: Flex__<typeof AntdInputNumber>;
  input3?: Flex__<typeof AntdInput>;
  input?: Flex__<typeof AntdInput>;
  select?: Flex__<typeof AntdSelect>;
  select2?: Flex__<typeof AntdSelect>;
  input2?: Flex__<typeof AntdInput>;
  input4?: Flex__<typeof AntdInput>;
  h5?: Flex__<"h5">;
  upload?: Flex__<typeof UploadWrapper>;
  input7?: Flex__<typeof AntdInput>;
  input5?: Flex__<typeof AntdInput>;
};

export interface DefaultSettingsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSettings__RenderFunc(props: {
  variants: PlasmicSettings__VariantsArgs;
  args: PlasmicSettings__ArgsType;
  overrides: PlasmicSettings__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "selectedKeys",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "numberInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "upload.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "file",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "signedUploadUrl",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "printifyId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "printfulId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modal2.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "form2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "81791845-f7a9-4d78-93d6-7770af2f46b4",
        userArgs: {},
        cacheKey: `plasmic.$.81791845-f7a9-4d78-93d6-7770af2f46b4.$.`,
        invalidatedKeys: null,
        roleId: "d035f350-edf5-4268-af03-4480b52522b0"
      };
    }),
    printifyGetShops: usePlasmicDataOp(() => {
      return {
        sourceId: "fumskhn7h2QULzwkXAtFMC",
        opId: "8698f2f3-8bdf-4d19-99d2-c942b42bb32b",
        userArgs: {
          headers: [$queries.query.data[0].printify_key]
        },
        cacheKey: `plasmic.$.8698f2f3-8bdf-4d19-99d2-c942b42bb32b.$.`,
        invalidatedKeys: null,
        roleId: "d035f350-edf5-4268-af03-4480b52522b0"
      };
    }),
    printfulGetShops: usePlasmicDataOp(() => {
      return {
        sourceId: "w9bT7zJHQBMsxuYyCMQHKC",
        opId: "487251d6-10c5-4397-b5e2-78b0a0f8d9e6",
        userArgs: {},
        cacheKey: `plasmic.$.487251d6-10c5-4397-b5e2-78b0a0f8d9e6.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.query.data.length > 0;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                    ? (() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.table),
                          data: (() => {
                            try {
                              return $queries.query;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          fields: (() => {
                            const __composite = [
                              { key: "id", fieldId: "id" },
                              {
                                key: "printful_key",
                                fieldId: "printful_key",
                                isHidden: null
                              },
                              {
                                key: "printify_shop_id",
                                fieldId: "printify_shop_id",
                                isHidden: null
                              },
                              { key: "owner", fieldId: "owner" },
                              {
                                key: "printify_key",
                                fieldId: "printify_key",
                                isHidden: null
                              },
                              {
                                key: "prodigi_key",
                                fieldId: "prodigi_key",
                                isHidden: null
                              },
                              {
                                key: "printful_shop_id",
                                fieldId: "printful_shop_id",
                                isHidden: null
                              },
                              {
                                key: "printful_logo_id",
                                fieldId: "printful_logo_id",
                                isHidden: null
                              },
                              {
                                key: "printify_logo_id",
                                fieldId: "printify_logo_id",
                                isHidden: null
                              },
                              {
                                key: "changing_payment_intent",
                                fieldId: "changing_payment_intent",
                                isHidden: null
                              },
                              {
                                key: "major_plan",
                                fieldId: "major_plan",
                                isHidden: null
                              },
                              {
                                key: "payment_status",
                                fieldId: "payment_status",
                                isHidden: null
                              },
                              {
                                key: "stripe_customer_id",
                                fieldId: "stripe_customer_id",
                                isHidden: null
                              },
                              {
                                key: "major_payment_intent",
                                fieldId: "major_payment_intent",
                                disableSorting: null,
                                isHidden: null
                              },
                              { key: "owner_name", fieldId: "owner_name" },
                              {
                                key: "changing_plan",
                                fieldId: "changing_plan",
                                isHidden: null
                              }
                            ];
                            __composite["1"]["isHidden"] = true;
                            __composite["2"]["isHidden"] = true;
                            __composite["4"]["isHidden"] = true;
                            __composite["5"]["isHidden"] = true;
                            __composite["6"]["isHidden"] = true;
                            __composite["7"]["isHidden"] = true;
                            __composite["8"]["isHidden"] = true;
                            __composite["9"]["isHidden"] = true;
                            __composite["10"]["isHidden"] = true;
                            __composite["11"]["isHidden"] = true;
                            __composite["12"]["isHidden"] = true;
                            __composite["13"]["disableSorting"] = false;
                            __composite["13"]["isHidden"] = true;
                            __composite["15"]["isHidden"] = true;
                            return __composite;
                          })(),

                          hideColumnPicker: true,
                          hideExports: true,
                          hideSearch: true,
                          onRowSelectionChanged: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRowKey",
                              ["table", "selectedRowKey"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRow",
                              ["table", "selectedRow"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRows",
                              ["table", "selectedRows"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRowKeys",
                              ["table", "selectedRowKeys"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                          },
                          pagination: false,
                          rowActions: (() => {
                            const __composite = [
                              { type: "item", label: null, onClick: null }
                            ];
                            __composite["0"]["label"] = "edit";
                            __composite["0"]["onClick"] = async (
                              rowKey,
                              row
                            ) => {
                              const $steps = {};

                              $steps["updateSelectedKeys"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["selectedKeys"]
                                      },
                                      operation: 0,
                                      value: row
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateSelectedKeys"] != null &&
                                typeof $steps["updateSelectedKeys"] ===
                                  "object" &&
                                typeof $steps["updateSelectedKeys"].then ===
                                  "function"
                              ) {
                                $steps["updateSelectedKeys"] = await $steps[
                                  "updateSelectedKeys"
                                ];
                              }

                              $steps["updateModalOpen"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["modal", "open"]
                                      },
                                      operation: 4
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        !oldValue
                                      );
                                      return !oldValue;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateModalOpen"] != null &&
                                typeof $steps["updateModalOpen"] === "object" &&
                                typeof $steps["updateModalOpen"].then ===
                                  "function"
                              ) {
                                $steps["updateModalOpen"] = await $steps[
                                  "updateModalOpen"
                                ];
                              }
                            };
                            return __composite;
                          })(),

                          scopeClassName: sty["table__instance"],
                          selectedRowKey: generateStateValueProp($state, [
                            "table",
                            "selectedRowKey"
                          ]),
                          selectedRowKeys: generateStateValueProp($state, [
                            "table",
                            "selectedRowKeys"
                          ]),
                          themeResetClassName: classNames(
                            projectcss.root_reset,
                            projectcss.root_reset_tags,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "selectedRowKey",
                              plasmicStateName: "table.selectedRowKey"
                            },
                            {
                              name: "selectedRow",
                              plasmicStateName: "table.selectedRow"
                            },
                            {
                              name: "selectedRows",
                              plasmicStateName: "table.selectedRows"
                            },
                            {
                              name: "selectedRowKeys",
                              plasmicStateName: "table.selectedRowKeys"
                            }
                          ],
                          [],
                          RichTable_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <RichTable
                            data-plasmic-name={"table"}
                            data-plasmic-override={overrides.table}
                            {...child$Props}
                          />
                        );
                      })()
                    : null}
                  <Modal
                    data-plasmic-name={"modal2"}
                    data-plasmic-override={overrides.modal2}
                    className={classNames("__wab_instance", sty.modal2)}
                    content={
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gYAjW
                        )}
                      >
                        {(() => {
                          const child$Props = {
                            children: null,
                            className: classNames("__wab_instance", sty.form2),
                            data: {
                              sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
                              opId: "48a2fc8a-5eb5-45fa-861b-a30f118d95b3",
                              userArgs: {},
                              cacheKey: `plasmic.$.${(() => {
                                try {
                                  return "getSchema";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}.$.48a2fc8a-5eb5-45fa-861b-a30f118d95b3.$.`,
                              invalidatedKeys: null,
                              roleId: null
                            },
                            dataFormItems: (() => {
                              const __composite = [
                                {
                                  key: "id",
                                  inputType: "Number",
                                  fieldId: "id",
                                  label: "id",
                                  name: "id",
                                  hidden: null
                                },
                                {
                                  key: "owner_name",
                                  inputType: "Text",
                                  fieldId: "owner_name",
                                  label: null,
                                  name: "owner_name"
                                },
                                {
                                  key: "owner",
                                  inputType: "Text",
                                  fieldId: "owner",
                                  label: "owner",
                                  name: "owner",
                                  initialValue: null,
                                  hidden: null
                                },
                                {
                                  key: "changing_payment_intent",
                                  inputType: "Text",
                                  fieldId: "changing_payment_intent",
                                  label: "changing_payment_intent",
                                  name: "changing_payment_intent",
                                  hidden: null
                                },
                                {
                                  key: "printify_key",
                                  inputType: "Text",
                                  fieldId: "printify_key",
                                  label: "printify_key",
                                  name: "printify_key",
                                  hidden: null
                                },
                                {
                                  key: "major_plan",
                                  inputType: "Number",
                                  fieldId: "major_plan",
                                  label: "major_plan",
                                  name: "major_plan",
                                  initialValue: null,
                                  hidden: null
                                },
                                {
                                  key: "payment_status",
                                  inputType: "Checkbox",
                                  fieldId: "payment_status",
                                  label: "payment_status",
                                  name: "payment_status",
                                  hidden: null
                                },
                                {
                                  key: "printful_key",
                                  inputType: "Text",
                                  fieldId: "printful_key",
                                  label: "printful_key",
                                  name: "printful_key",
                                  hidden: null
                                },
                                {
                                  key: "stripe_customer_id",
                                  inputType: "Text",
                                  fieldId: "stripe_customer_id",
                                  label: "stripe_customer_id",
                                  name: "stripe_customer_id",
                                  hidden: null
                                },
                                {
                                  key: "printify_logo_id",
                                  inputType: "Text",
                                  fieldId: "printify_logo_id",
                                  label: "printify_logo_id",
                                  name: "printify_logo_id",
                                  hidden: null
                                },
                                {
                                  key: "prodigi_key",
                                  inputType: "Text",
                                  fieldId: "prodigi_key",
                                  label: "prodigi_key",
                                  name: "prodigi_key",
                                  hidden: null
                                },
                                {
                                  key: "major_payment_intent",
                                  inputType: "Text",
                                  fieldId: "major_payment_intent",
                                  label: "major_payment_intent",
                                  name: "major_payment_intent",
                                  hidden: null
                                },
                                {
                                  key: "printify_shop_id",
                                  inputType: "Text",
                                  fieldId: "printify_shop_id",
                                  label: "printify_shop_id",
                                  name: "printify_shop_id",
                                  hidden: null
                                },
                                {
                                  key: "printful_logo_id",
                                  inputType: "Text",
                                  fieldId: "printful_logo_id",
                                  label: "printful_logo_id",
                                  name: "printful_logo_id",
                                  hidden: null
                                },
                                {
                                  key: "changing_plan",
                                  inputType: "Number",
                                  fieldId: "changing_plan",
                                  label: "changing_plan",
                                  name: "changing_plan",
                                  hidden: null
                                },
                                {
                                  key: "printful_shop_id",
                                  inputType: "Text",
                                  fieldId: "printful_shop_id",
                                  label: "printful_shop_id",
                                  name: "printful_shop_id",
                                  hidden: null
                                }
                              ];
                              __composite["0"]["hidden"] = true;
                              __composite["1"]["label"] = "Your Full Name";
                              __composite["2"]["initialValue"] =
                                currentUser.email;
                              __composite["2"]["hidden"] = true;
                              __composite["3"]["hidden"] = true;
                              __composite["4"]["hidden"] = true;
                              __composite["5"]["initialValue"] = 0;
                              __composite["5"]["hidden"] = true;
                              __composite["6"]["hidden"] = true;
                              __composite["7"]["hidden"] = true;
                              __composite["8"]["hidden"] = true;
                              __composite["9"]["hidden"] = true;
                              __composite["10"]["hidden"] = true;
                              __composite["11"]["hidden"] = true;
                              __composite["12"]["hidden"] = true;
                              __composite["13"]["hidden"] = true;
                              __composite["14"]["hidden"] = true;
                              __composite["15"]["hidden"] = true;
                              return __composite;
                            })(),

                            extendedOnValuesChange: async (
                              ...eventArgs: any
                            ) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["form2", "value"],
                                FormWrapper_Helpers
                              ).apply(null, eventArgs);
                            },
                            formItems: [],
                            labelCol: { span: 8, horizontalOnly: true },
                            layout: "vertical",
                            mode: "simplified",
                            onFinish: async values => {
                              const $steps = {};

                              $steps["defaultSubmit"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
                                        opId: "2814e0d1-a4b5-4d1e-9bf8-bf0d0d313a0f",
                                        userArgs: {
                                          variables: [$state.form2.value]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "plasmic_refresh_all"
                                        ],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["defaultSubmit"] != null &&
                                typeof $steps["defaultSubmit"] === "object" &&
                                typeof $steps["defaultSubmit"].then ===
                                  "function"
                              ) {
                                $steps["defaultSubmit"] = await $steps[
                                  "defaultSubmit"
                                ];
                              }
                            },
                            onIsSubmittingChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "isSubmitting",
                                ["form2", "isSubmitting"],
                                FormWrapper_Helpers
                              ).apply(null, eventArgs);
                            },
                            ref: ref => {
                              $refs["form2"] = ref;
                            },
                            submitSlot: (
                              <AntdButton
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__g1Qw5
                                )}
                                submitsForm={true}
                                type={"primary"}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__v2A2F
                                  )}
                                >
                                  {"Submit"}
                                </div>
                              </AntdButton>
                            ),
                            wrapperCol: { span: 16, horizontalOnly: true }
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "form2.value"
                              },
                              {
                                name: "isSubmitting",
                                plasmicStateName: "form2.isSubmitting"
                              }
                            ],
                            [],
                            FormWrapper_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <FormWrapper
                              data-plasmic-name={"form2"}
                              data-plasmic-override={overrides.form2}
                              {...child$Props}
                            />
                          );
                        })()}
                      </Stack__>
                    }
                    footer={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dAEgc
                        )}
                      >
                        <Button2
                          color={"muted"}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xc7L3
                              )}
                            >
                              {"Close"}
                            </div>
                          }
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateAriaDialogTriggerIsOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: [
                                        "ariaDialogTrigger",
                                        "isOpen"
                                      ]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateAriaDialogTriggerIsOpen"] != null &&
                              typeof $steps["updateAriaDialogTriggerIsOpen"] ===
                                "object" &&
                              typeof $steps["updateAriaDialogTriggerIsOpen"]
                                .then === "function"
                            ) {
                              $steps["updateAriaDialogTriggerIsOpen"] =
                                await $steps["updateAriaDialogTriggerIsOpen"];
                            }
                          }}
                          type={"soft"}
                        />
                      </div>
                    }
                    heading={
                      <h3
                        data-plasmic-name={"h3"}
                        data-plasmic-override={overrides.h3}
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3
                        )}
                      >
                        {"Just Confirming..."}
                      </h3>
                    }
                    isOpen={generateStateValueProp($state, [
                      "modal2",
                      "isOpen"
                    ])}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "modal2",
                        "isOpen"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    trigger={
                      (() => {
                        try {
                          return $queries.query.data.length == 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Button2
                          className={classNames(
                            "__wab_instance",
                            sty.button2___6N4Fa
                          )}
                          label={"Complete Registration"}
                        />
                      ) : null
                    }
                  />

                  <AntdModal
                    data-plasmic-name={"modal"}
                    data-plasmic-override={overrides.modal}
                    className={classNames("__wab_instance", sty.modal)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    hideFooter={true}
                    modalScopeClassName={sty["modal__modal"]}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "modal",
                        "open"
                      ]).apply(null, eventArgs);
                    }}
                    open={generateStateValueProp($state, ["modal", "open"])}
                    title={"Settings"}
                    trigger={null}
                    width={"60%"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.form),
                        extendedOnValuesChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["form", "value"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        formItems: [
                          { label: "Name", name: "name", inputType: "Text" },
                          {
                            label: "Message",
                            name: "message",
                            inputType: "Text Area"
                          }
                        ],
                        labelCol: { span: 8, horizontalOnly: true },
                        layout: "vertical",
                        mode: "advanced",
                        onFinish: async values => {
                          const $steps = {};

                          $steps["defaultSubmit"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
                                    opId: "c6db0a57-4315-4722-b601-e6a131a84ae6",
                                    userArgs: {
                                      keys: [$queries.query.data[0].id],
                                      variables: [values]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: ["plasmic_refresh_all"],
                                    roleId:
                                      "d035f350-edf5-4268-af03-4480b52522b0"
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["defaultSubmit"] != null &&
                            typeof $steps["defaultSubmit"] === "object" &&
                            typeof $steps["defaultSubmit"].then === "function"
                          ) {
                            $steps["defaultSubmit"] = await $steps[
                              "defaultSubmit"
                            ];
                          }
                        },
                        onIsSubmittingChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "isSubmitting",
                            ["form", "isSubmitting"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        ref: ref => {
                          $refs["form"] = ref;
                        },
                        submitSlot: null,
                        wrapperCol: { span: 16, horizontalOnly: true }
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "form.value"
                          },
                          {
                            name: "isSubmitting",
                            plasmicStateName: "form.isSubmitting"
                          }
                        ],
                        [],
                        FormWrapper_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <FormWrapper
                          data-plasmic-name={"form"}
                          data-plasmic-override={overrides.form}
                          {...child$Props}
                        >
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__wEuAl
                            )}
                            hidden={true}
                            initialValue={1}
                            label={"id"}
                            name={"id"}
                          >
                            <AntdInputNumber
                              data-plasmic-name={"numberInput"}
                              data-plasmic-override={overrides.numberInput}
                              className={classNames(
                                "__wab_instance",
                                sty.numberInput
                              )}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "numberInput",
                                  "value"
                                ]).apply(null, eventArgs);
                              }}
                              type={"number"}
                              value={generateStateValueProp($state, [
                                "numberInput",
                                "value"
                              ])}
                            />
                          </FormItemWrapper>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___2YW8M
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__no4NW
                              )}
                            >
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__gtQeY
                                )}
                                initialValue={(() => {
                                  try {
                                    return $queries.query.data[0].printify_key;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                label={"printify_key"}
                                name={"printify_key"}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.input3
                                    ),
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["input3", "value"],
                                        AntdInput_Helpers
                                      ).apply(null, eventArgs);
                                    },
                                    value: generateStateValueProp($state, [
                                      "input3",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "input3.value"
                                      }
                                    ],
                                    [],
                                    AntdInput_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <AntdInput
                                      data-plasmic-name={"input3"}
                                      data-plasmic-override={overrides.input3}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__rwnti
                                )}
                                initialValue={(() => {
                                  try {
                                    return $queries.query.data[0].printful_key;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return ``;
                                    }
                                    throw e;
                                  }
                                })()}
                                label={"printful_key"}
                                name={"printful_key"}
                              >
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.input
                                    ),
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["input", "value"],
                                        AntdInput_Helpers
                                      ).apply(null, eventArgs);
                                    },
                                    value: generateStateValueProp($state, [
                                      "input",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "input.value"
                                      }
                                    ],
                                    [],
                                    AntdInput_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <AntdInput
                                      data-plasmic-name={"input"}
                                      data-plasmic-override={overrides.input}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </FormItemWrapper>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__kZ08
                              )}
                            >
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__pewXk
                                )}
                                initialValue={``}
                                label={"printify_shop_id"}
                                name={"printify_shop_id"}
                                shouldUpdate={true}
                              >
                                <AntdSelect
                                  data-plasmic-name={"select"}
                                  data-plasmic-override={overrides.select}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.select
                                  )}
                                  defaultStylesClassName={classNames(
                                    projectcss.root_reset,
                                    projectcss.plasmic_default_styles,
                                    projectcss.plasmic_mixins,
                                    projectcss.plasmic_tokens,
                                    plasmic_antd_5_hostless_css.plasmic_tokens,
                                    plasmic_plasmic_rich_components_css.plasmic_tokens
                                  )}
                                  onChange={async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "select",
                                      "value"
                                    ]).apply(null, eventArgs);
                                  }}
                                  options={(() => {
                                    try {
                                      return $queries.printifyGetShops.data.response.map(
                                        shop => ({
                                          value: shop.id,
                                          label: shop.title
                                        })
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  placeholder={"Select..."}
                                  popupScopeClassName={sty["select__popup"]}
                                  value={generateStateValueProp($state, [
                                    "select",
                                    "value"
                                  ])}
                                />
                              </FormItemWrapper>
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__vweM5
                                )}
                                initialValue={null}
                                label={"printful_shop_id"}
                                name={"printful_shop_id"}
                              >
                                <AntdSelect
                                  data-plasmic-name={"select2"}
                                  data-plasmic-override={overrides.select2}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.select2
                                  )}
                                  defaultStylesClassName={classNames(
                                    projectcss.root_reset,
                                    projectcss.plasmic_default_styles,
                                    projectcss.plasmic_mixins,
                                    projectcss.plasmic_tokens,
                                    plasmic_antd_5_hostless_css.plasmic_tokens,
                                    plasmic_plasmic_rich_components_css.plasmic_tokens
                                  )}
                                  onChange={async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "select2",
                                      "value"
                                    ]).apply(null, eventArgs);
                                  }}
                                  options={(() => {
                                    try {
                                      return $queries.printfulGetShops.data.response.result.map(
                                        item => ({
                                          label: item.name,
                                          value: item.id
                                        })
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [
                                          {
                                            value: "option1",
                                            label: "Option 1",
                                            type: "option"
                                          },
                                          {
                                            value: "option2",
                                            label: "Option 2",
                                            type: "option"
                                          }
                                        ];
                                      }
                                      throw e;
                                    }
                                  })()}
                                  placeholder={"Select..."}
                                  popupScopeClassName={sty["select2__popup"]}
                                  value={generateStateValueProp($state, [
                                    "select2",
                                    "value"
                                  ])}
                                />
                              </FormItemWrapper>
                            </div>
                          </div>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__i8FtC
                            )}
                            hidden={true}
                            initialValue={"golfx2@gmail.com"}
                            label={"owner"}
                            name={"owner"}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.input2
                                ),
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["input2", "value"],
                                    AntdInput_Helpers
                                  ).apply(null, eventArgs);
                                },
                                value: generateStateValueProp($state, [
                                  "input2",
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "input2.value"
                                  }
                                ],
                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <AntdInput
                                  data-plasmic-name={"input2"}
                                  data-plasmic-override={overrides.input2}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__wMbdV
                            )}
                            initialValue={
                              "0b56c12b-e6ff-4823-b02c-5bc9e3057ff3"
                            }
                            label={"prodigi_key"}
                            name={"prodigi_key"}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.input4
                                ),
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["input4", "value"],
                                    AntdInput_Helpers
                                  ).apply(null, eventArgs);
                                },
                                value: generateStateValueProp($state, [
                                  "input4",
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "input4.value"
                                  }
                                ],
                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <AntdInput
                                  data-plasmic-name={"input4"}
                                  data-plasmic-override={overrides.input4}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                          <h5
                            data-plasmic-name={"h5"}
                            data-plasmic-override={overrides.h5}
                            className={classNames(
                              projectcss.all,
                              projectcss.h5,
                              projectcss.__wab_text,
                              sty.h5
                            )}
                          >
                            {"Logo"}
                          </h5>
                          <UploadWrapper
                            data-plasmic-name={"upload"}
                            data-plasmic-override={overrides.upload}
                            accept={"image/*"}
                            className={classNames("__wab_instance", sty.upload)}
                            dragAndDropFiles={true}
                            files={generateStateValueProp($state, [
                              "upload",
                              "files"
                            ])}
                            listType={"picture-card"}
                            maxCount={1}
                            onFilesChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "upload",
                                "files"
                              ]).apply(null, eventArgs);

                              (async files => {
                                const $steps = {};

                                $steps["updateFile"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["file"]
                                        },
                                        operation: 0,
                                        value:
                                          $state.upload.files[
                                            $state.upload.files.length - 1
                                          ].uid
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateFile"] != null &&
                                  typeof $steps["updateFile"] === "object" &&
                                  typeof $steps["updateFile"].then ===
                                    "function"
                                ) {
                                  $steps["updateFile"] = await $steps[
                                    "updateFile"
                                  ];
                                }

                                $steps["supabaseUploadFile"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "fq3u296VTpoRcVc8quSCN3",
                                          opId: "da56b2ca-8360-49f9-80bb-960e27098b5a",
                                          userArgs: {
                                            path: [
                                              $state.upload.files[
                                                $state.upload.files.length - 1
                                              ].uid
                                            ],
                                            content: [
                                              $state.upload.files[
                                                $state.upload.files.length - 1
                                              ].contents
                                            ],
                                            contentType: [
                                              $state.upload.files[
                                                $state.upload.files.length - 1
                                              ].type
                                            ]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [
                                            "plasmic_refresh_all"
                                          ],
                                          roleId:
                                            "d035f350-edf5-4268-af03-4480b52522b0"
                                        },
                                        continueOnError: true
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["supabaseUploadFile"] != null &&
                                  typeof $steps["supabaseUploadFile"] ===
                                    "object" &&
                                  typeof $steps["supabaseUploadFile"].then ===
                                    "function"
                                ) {
                                  $steps["supabaseUploadFile"] = await $steps[
                                    "supabaseUploadFile"
                                  ];
                                }

                                $steps["getFileUrl"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "fq3u296VTpoRcVc8quSCN3",
                                          opId: "070fd442-7e10-4f01-bcf6-3f871be38bec",
                                          userArgs: {
                                            path: [$state.file]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: null,
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["getFileUrl"] != null &&
                                  typeof $steps["getFileUrl"] === "object" &&
                                  typeof $steps["getFileUrl"].then ===
                                    "function"
                                ) {
                                  $steps["getFileUrl"] = await $steps[
                                    "getFileUrl"
                                  ];
                                }

                                $steps["updateSignedUploadUrl"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["signedUploadUrl"]
                                        },
                                        operation: 0,
                                        value: $steps.getFileUrl
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateSignedUploadUrl"] != null &&
                                  typeof $steps["updateSignedUploadUrl"] ===
                                    "object" &&
                                  typeof $steps["updateSignedUploadUrl"]
                                    .then === "function"
                                ) {
                                  $steps["updateSignedUploadUrl"] =
                                    await $steps["updateSignedUploadUrl"];
                                }
                              }).apply(null, eventArgs);
                            }}
                            showUploadList={true}
                          >
                            <AntdButton
                              className={classNames(
                                "__wab_instance",
                                sty.button___2EeLb
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__wnZx2
                                )}
                              >
                                {"Upload"}
                              </div>
                            </AntdButton>
                          </UploadWrapper>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ouBP
                            )}
                          >
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__bvlaI
                              )}
                              initialValue={(() => {
                                try {
                                  return (
                                    $queries.query.data.printify_logo_id ||
                                    $state.printifyId.data.response.id
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              label={
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__ez6Jk
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__pqr5U
                                    )}
                                  >
                                    {"printify_logo_id"}
                                  </div>
                                  {(() => {
                                    try {
                                      return (
                                        $state.upload.files[0].uid.length > 0
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return false;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <PlasmicLink__
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.a,
                                        projectcss.__wab_text,
                                        sty.link___15Mre
                                      )}
                                      component={Link}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["httpPost"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                dataOp: {
                                                  sourceId:
                                                    "fumskhn7h2QULzwkXAtFMC",
                                                  opId: "0a54a9b7-b33b-4e1b-a555-ecf84b56914d",
                                                  userArgs: {
                                                    body: [
                                                      $state.signedUploadUrl
                                                        .signedUrl
                                                    ]
                                                  },
                                                  cacheKey: null,
                                                  invalidatedKeys: [
                                                    "plasmic_refresh_all"
                                                  ],
                                                  roleId:
                                                    "d035f350-edf5-4268-af03-4480b52522b0"
                                                }
                                              };
                                              return (async ({
                                                dataOp,
                                                continueOnError
                                              }) => {
                                                try {
                                                  const response =
                                                    await executePlasmicDataOp(
                                                      dataOp,
                                                      {
                                                        userAuthToken:
                                                          dataSourcesCtx?.userAuthToken,
                                                        user: dataSourcesCtx?.user
                                                      }
                                                    );
                                                  await plasmicInvalidate(
                                                    dataOp.invalidatedKeys
                                                  );
                                                  return response;
                                                } catch (e) {
                                                  if (!continueOnError) {
                                                    throw e;
                                                  }
                                                  return e;
                                                }
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["httpPost"] != null &&
                                          typeof $steps["httpPost"] ===
                                            "object" &&
                                          typeof $steps["httpPost"].then ===
                                            "function"
                                        ) {
                                          $steps["httpPost"] = await $steps[
                                            "httpPost"
                                          ];
                                        }

                                        $steps["updatePrintifyId"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["printifyId"]
                                                },
                                                operation: 0,
                                                value: $steps.httpPost
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updatePrintifyId"] != null &&
                                          typeof $steps["updatePrintifyId"] ===
                                            "object" &&
                                          typeof $steps["updatePrintifyId"]
                                            .then === "function"
                                        ) {
                                          $steps["updatePrintifyId"] =
                                            await $steps["updatePrintifyId"];
                                        }
                                      }}
                                      platform={"nextjs"}
                                    >
                                      {"refresh"}
                                    </PlasmicLink__>
                                  ) : null}
                                </Stack__>
                              }
                              name={"printify_logo_id"}
                              preserve={false}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input7
                                  ),
                                  onChange: async (...eventArgs: any) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input7", "value"],
                                      AntdInput_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  value: generateStateValueProp($state, [
                                    "input7",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input7.value"
                                    }
                                  ],
                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdInput
                                    data-plasmic-name={"input7"}
                                    data-plasmic-override={overrides.input7}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </FormItemWrapper>
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__xtjQq
                              )}
                              initialValue={(() => {
                                try {
                                  return (
                                    $queries.query?.data?.printful_logo_id ||
                                    $state?.printfulId.data?.response?.result
                                      ?.id
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              label={
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__xfEa
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__sxMyz
                                    )}
                                  >
                                    {"printful_logo_id"}
                                  </div>
                                  {(() => {
                                    try {
                                      return (
                                        $state.upload.files[0].uid.length > 0
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return false;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <PlasmicLink__
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.a,
                                        projectcss.__wab_text,
                                        sty.link__jrDtq
                                      )}
                                      component={Link}
                                      href={""}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["httpPost"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                dataOp: {
                                                  sourceId:
                                                    "w9bT7zJHQBMsxuYyCMQHKC",
                                                  opId: "89094968-8af4-4e55-8a9c-be8146bd0d7d",
                                                  userArgs: {
                                                    body: [
                                                      $state.signedUploadUrl
                                                        .signedUrl
                                                    ]
                                                  },
                                                  cacheKey: null,
                                                  invalidatedKeys: [
                                                    "plasmic_refresh_all"
                                                  ],
                                                  roleId:
                                                    "d035f350-edf5-4268-af03-4480b52522b0"
                                                }
                                              };
                                              return (async ({
                                                dataOp,
                                                continueOnError
                                              }) => {
                                                try {
                                                  const response =
                                                    await executePlasmicDataOp(
                                                      dataOp,
                                                      {
                                                        userAuthToken:
                                                          dataSourcesCtx?.userAuthToken,
                                                        user: dataSourcesCtx?.user
                                                      }
                                                    );
                                                  await plasmicInvalidate(
                                                    dataOp.invalidatedKeys
                                                  );
                                                  return response;
                                                } catch (e) {
                                                  if (!continueOnError) {
                                                    throw e;
                                                  }
                                                  return e;
                                                }
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["httpPost"] != null &&
                                          typeof $steps["httpPost"] ===
                                            "object" &&
                                          typeof $steps["httpPost"].then ===
                                            "function"
                                        ) {
                                          $steps["httpPost"] = await $steps[
                                            "httpPost"
                                          ];
                                        }

                                        $steps["updatePrintfulId"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["printfulId"]
                                                },
                                                operation: 0,
                                                value: $steps.httpPost
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updatePrintfulId"] != null &&
                                          typeof $steps["updatePrintfulId"] ===
                                            "object" &&
                                          typeof $steps["updatePrintfulId"]
                                            .then === "function"
                                        ) {
                                          $steps["updatePrintfulId"] =
                                            await $steps["updatePrintfulId"];
                                        }
                                      }}
                                      platform={"nextjs"}
                                    >
                                      {"refresh"}
                                    </PlasmicLink__>
                                  ) : null}
                                </Stack__>
                              }
                              name={"printful_logo_id"}
                              preserve={false}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input5
                                  ),
                                  onChange: async (...eventArgs: any) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input5", "value"],
                                      AntdInput_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  value: generateStateValueProp($state, [
                                    "input5",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input5.value"
                                    }
                                  ],
                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdInput
                                    data-plasmic-name={"input5"}
                                    data-plasmic-override={overrides.input5}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </FormItemWrapper>
                          </div>
                          <AntdButton
                            className={classNames(
                              "__wab_instance",
                              sty.button___2Zpg
                            )}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__perNs
                              )}
                            >
                              {"Submit"}
                            </div>
                          </AntdButton>
                        </FormWrapper>
                      );
                    })()}
                  </AntdModal>
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__itpFr)}
                    href={
                      "https://billing.stripe.com/p/login/eVacQv8Pofj819KbII"
                    }
                    shape={"round"}
                    target={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__x3K
                      )}
                    >
                      {"Go to Billing"}
                    </div>
                  </AntdButton>
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__dE1Cx)}
                    onClick={async () => {
                      const $steps = {};

                      $steps["logOut"] = true
                        ? (() => {
                            const actionArgs = {};
                            return (async ({ continueTo }) => {
                              try {
                                localStorage.removeItem("plasmic_user");
                                localStorage.removeItem(
                                  "$user.2Up8DUmBB1Tx5dhznkvCW5"
                                );
                              } catch (e) {}

                              if (window.__PLASMIC_AUTH_OVERRIDE) {
                                window.__PLASMIC_AUTH_OVERRIDE();
                              } else {
                                window.location.assign(
                                  continueTo || window.location.href
                                );
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["logOut"] != null &&
                        typeof $steps["logOut"] === "object" &&
                        typeof $steps["logOut"].then === "function"
                      ) {
                        $steps["logOut"] = await $steps["logOut"];
                      }
                    }}
                    shape={"round"}
                    target={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1KdFy
                      )}
                    >
                      {"Logout"}
                    </div>
                  </AntdButton>
                </React.Fragment>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "table",
    "modal2",
    "h3",
    "form2",
    "modal",
    "form",
    "numberInput",
    "input3",
    "input",
    "select",
    "select2",
    "input2",
    "input4",
    "h5",
    "upload",
    "input7",
    "input5"
  ],
  pageLayout: [
    "pageLayout",
    "table",
    "modal2",
    "h3",
    "form2",
    "modal",
    "form",
    "numberInput",
    "input3",
    "input",
    "select",
    "select2",
    "input2",
    "input4",
    "h5",
    "upload",
    "input7",
    "input5"
  ],
  table: ["table"],
  modal2: ["modal2", "h3", "form2"],
  h3: ["h3"],
  form2: ["form2"],
  modal: [
    "modal",
    "form",
    "numberInput",
    "input3",
    "input",
    "select",
    "select2",
    "input2",
    "input4",
    "h5",
    "upload",
    "input7",
    "input5"
  ],
  form: [
    "form",
    "numberInput",
    "input3",
    "input",
    "select",
    "select2",
    "input2",
    "input4",
    "h5",
    "upload",
    "input7",
    "input5"
  ],
  numberInput: ["numberInput"],
  input3: ["input3"],
  input: ["input"],
  select: ["select"],
  select2: ["select2"],
  input2: ["input2"],
  input4: ["input4"],
  h5: ["h5"],
  upload: ["upload"],
  input7: ["input7"],
  input5: ["input5"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  table: typeof RichTable;
  modal2: typeof Modal;
  h3: "h3";
  form2: typeof FormWrapper;
  modal: typeof AntdModal;
  form: typeof FormWrapper;
  numberInput: typeof AntdInputNumber;
  input3: typeof AntdInput;
  input: typeof AntdInput;
  select: typeof AntdSelect;
  select2: typeof AntdSelect;
  input2: typeof AntdInput;
  input4: typeof AntdInput;
  h5: "h5";
  upload: typeof UploadWrapper;
  input7: typeof AntdInput;
  input5: typeof AntdInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSettings__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSettings__VariantsArgs;
    args?: PlasmicSettings__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSettings__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSettings__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSettings__ArgProps,
          internalVariantPropNames: PlasmicSettings__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSettings__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSettings";
  } else {
    func.displayName = `PlasmicSettings.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={"d035f350-edf5-4268-af03-4480b52522b0"}
      appId={"2Up8DUmBB1Tx5dhznkvCW5"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "2Up8DUmBB1Tx5dhznkvCW5"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicSettings = Object.assign(
  // Top-level PlasmicSettings renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    table: makeNodeComponent("table"),
    modal2: makeNodeComponent("modal2"),
    h3: makeNodeComponent("h3"),
    form2: makeNodeComponent("form2"),
    modal: makeNodeComponent("modal"),
    form: makeNodeComponent("form"),
    numberInput: makeNodeComponent("numberInput"),
    input3: makeNodeComponent("input3"),
    input: makeNodeComponent("input"),
    select: makeNodeComponent("select"),
    select2: makeNodeComponent("select2"),
    input2: makeNodeComponent("input2"),
    input4: makeNodeComponent("input4"),
    h5: makeNodeComponent("h5"),
    upload: makeNodeComponent("upload"),
    input7: makeNodeComponent("input7"),
    input5: makeNodeComponent("input5"),

    // Metadata about props expected for PlasmicSettings
    internalVariantProps: PlasmicSettings__VariantProps,
    internalArgProps: PlasmicSettings__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSettings;
/* prettier-ignore-end */
