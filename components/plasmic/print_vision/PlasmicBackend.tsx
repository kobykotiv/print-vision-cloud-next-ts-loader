// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2Up8DUmBB1Tx5dhznkvCW5
// Component: tQs3K4I5HXpb

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 2Up8DUmBB1Tx5dhznkvCW5/projectcss
import sty from "./PlasmicBackend.module.css"; // plasmic-import: tQs3K4I5HXpb/css

createPlasmicElementProxy;

export type PlasmicBackend__VariantMembers = {};
export type PlasmicBackend__VariantsArgs = {};
type VariantPropType = keyof PlasmicBackend__VariantsArgs;
export const PlasmicBackend__VariantProps = new Array<VariantPropType>();

export type PlasmicBackend__ArgsType = {};
type ArgPropType = keyof PlasmicBackend__ArgsType;
export const PlasmicBackend__ArgProps = new Array<ArgPropType>();

export type PlasmicBackend__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultBackendProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBackend__RenderFunc(props: {
  variants: PlasmicBackend__VariantsArgs;
  args: PlasmicBackend__ArgsType;
  overrides: PlasmicBackend__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const dataSourcesCtx = usePlasmicDataSourceContext();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    design: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "e9d35a70-ced6-4846-8012-cce8c2549712",
        userArgs: {},
        cacheKey: `plasmic.$.e9d35a70-ced6-4846-8012-cce8c2549712.$.`,
        invalidatedKeys: null,
        roleId: "d035f350-edf5-4268-af03-4480b52522b0"
      };
    }),
    keys: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "880bdd3b-7792-4fb4-82b9-22209525864e",
        userArgs: {},
        cacheKey: `plasmic.$.880bdd3b-7792-4fb4-82b9-22209525864e.$.`,
        invalidatedKeys: null,
        roleId: "d035f350-edf5-4268-af03-4480b52522b0"
      };
    }),
    printfulPlaceholders: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "a1449716-022f-4eb3-bb3d-6d350e927242",
        userArgs: {},
        cacheKey: `plasmic.$.a1449716-022f-4eb3-bb3d-6d350e927242.$.`,
        invalidatedKeys: null,
        roleId: "d035f350-edf5-4268-af03-4480b52522b0"
      };
    }),
    printfulProductVariant: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "fb5cd9ab-b646-438c-b538-b7176c899a58",
        userArgs: {},
        cacheKey: `plasmic.$.fb5cd9ab-b646-438c-b538-b7176c899a58.$.`,
        invalidatedKeys: null,
        roleId: "d035f350-edf5-4268-af03-4480b52522b0"
      };
    }),
    printifulProduct: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "3640067f-bd24-4241-a47b-c7efc4ae06ba",
        userArgs: {},
        cacheKey: `plasmic.$.3640067f-bd24-4241-a47b-c7efc4ae06ba.$.`,
        invalidatedKeys: null,
        roleId: "d035f350-edf5-4268-af03-4480b52522b0"
      };
    }),
    printifyPlaceholder: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "61dfc4cc-4b30-4990-830f-0d1040c0c5c8",
        userArgs: {},
        cacheKey: `plasmic.$.61dfc4cc-4b30-4990-830f-0d1040c0c5c8.$.`,
        invalidatedKeys: null,
        roleId: "d035f350-edf5-4268-af03-4480b52522b0"
      };
    }),
    printifyProduct: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "edde1f81-0583-4460-a689-9da7137e30ff",
        userArgs: {},
        cacheKey: `plasmic.$.edde1f81-0583-4460-a689-9da7137e30ff.$.`,
        invalidatedKeys: null,
        roleId: "d035f350-edf5-4268-af03-4480b52522b0"
      };
    }),
    printifyProductVariant: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "c77c80fd-fda0-4ab7-8369-c70ed9579204",
        userArgs: {},
        cacheKey: `plasmic.$.c77c80fd-fda0-4ab7-8369-c70ed9579204.$.`,
        invalidatedKeys: null,
        roleId: "d035f350-edf5-4268-af03-4480b52522b0"
      };
    }),
    recipes: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "9b995a3f-55bc-47e9-a44a-0e9d3fd8bbb5",
        userArgs: {},
        cacheKey: `plasmic.$.9b995a3f-55bc-47e9-a44a-0e9d3fd8bbb5.$.`,
        invalidatedKeys: null,
        roleId: "d035f350-edf5-4268-af03-4480b52522b0"
      };
    }),
    syncDesign: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "e692ae56-4868-4dd6-80fb-0f09b6b6fc0c",
        userArgs: {},
        cacheKey: `plasmic.$.e692ae56-4868-4dd6-80fb-0f09b6b6fc0c.$.`,
        invalidatedKeys: null,
        roleId: "d035f350-edf5-4268-af03-4480b52522b0"
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        />
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBackend__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBackend__VariantsArgs;
    args?: PlasmicBackend__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBackend__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBackend__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBackend__ArgProps,
          internalVariantPropNames: PlasmicBackend__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBackend__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBackend";
  } else {
    func.displayName = `PlasmicBackend.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={"d035f350-edf5-4268-af03-4480b52522b0"}
      appId={"2Up8DUmBB1Tx5dhznkvCW5"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "2Up8DUmBB1Tx5dhznkvCW5"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicBackend = Object.assign(
  // Top-level PlasmicBackend renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicBackend
    internalVariantProps: PlasmicBackend__VariantProps,
    internalArgProps: PlasmicBackend__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBackend;
/* prettier-ignore-end */
