// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2Up8DUmBB1Tx5dhznkvCW5
// Component: wn2lQbNR4QPE

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import PageLayout from "../../PageLayout"; // plasmic-import: nHDfdLqBbJ3Q/component
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 2Up8DUmBB1Tx5dhznkvCW5/projectcss
import sty from "./PlasmicTestUpload2.module.css"; // plasmic-import: wn2lQbNR4QPE/css

createPlasmicElementProxy;

export type PlasmicTestUpload2__VariantMembers = {};
export type PlasmicTestUpload2__VariantsArgs = {};
type VariantPropType = keyof PlasmicTestUpload2__VariantsArgs;
export const PlasmicTestUpload2__VariantProps = new Array<VariantPropType>();

export type PlasmicTestUpload2__ArgsType = {};
type ArgPropType = keyof PlasmicTestUpload2__ArgsType;
export const PlasmicTestUpload2__ArgProps = new Array<ArgPropType>();

export type PlasmicTestUpload2__OverridesType = {
  root?: Flex__<"div">;
  pageLayout?: Flex__<typeof PageLayout>;
  h1?: Flex__<"h1">;
  upload?: Flex__<typeof UploadWrapper>;
  form?: Flex__<typeof FormWrapper>;
  numberInput?: Flex__<typeof AntdInputNumber>;
  input9?: Flex__<typeof AntdInput>;
  input6?: Flex__<typeof AntdInput>;
  input10?: Flex__<typeof AntdInput>;
  input?: Flex__<typeof AntdInput>;
  input2?: Flex__<typeof AntdInput>;
  table?: Flex__<typeof RichTable>;
  input4?: Flex__<typeof AntdInput>;
  input3?: Flex__<typeof AntdInput>;
  input5?: Flex__<typeof AntdInput>;
  input7?: Flex__<typeof AntdInput>;
  input8?: Flex__<typeof AntdInput>;
};

export interface DefaultTestUpload2Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTestUpload2__RenderFunc(props: {
  variants: PlasmicTestUpload2__VariantsArgs;
  args: PlasmicTestUpload2__ArgsType;
  overrides: PlasmicTestUpload2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "upload.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "numberInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "input10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "printifyId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "printfulId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "prodigiId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "signedUploadUrl",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "file",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "email",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return currentUser.email;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "newUuid",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "payloadPrintify",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getRecipesByUser: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "38ce998b-1e88-4204-9353-9422be47c2f3",
        userArgs: {},
        cacheKey: `plasmic.$.38ce998b-1e88-4204-9353-9422be47c2f3.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
        opId: "70ea23a8-2c71-4a24-bc58-bcb80d9f7251",
        userArgs: {},
        cacheKey: `plasmic.$.70ea23a8-2c71-4a24-bc58-bcb80d9f7251.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {"Upload"}
                  </h1>
                  <UploadWrapper
                    data-plasmic-name={"upload"}
                    data-plasmic-override={overrides.upload}
                    accept={"image/*"}
                    className={classNames("__wab_instance", sty.upload)}
                    dragAndDropFiles={true}
                    files={generateStateValueProp($state, ["upload", "files"])}
                    listType={"picture-card"}
                    maxCount={1}
                    multiple={false}
                    onFilesChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "upload",
                        "files"
                      ]).apply(null, eventArgs);

                      (async files => {
                        const $steps = {};

                        $steps["runActionOnForm"] = true
                          ? (() => {
                              const actionArgs = {
                                tplRef: "form",
                                action: "setFieldValue",
                                args: [
                                  (() => {
                                    try {
                                      return $state.form?.value?.image_id;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return ["$state", "form", "value"];
                                      }
                                      throw e;
                                    }
                                  })(),
                                  $state.upload.files[
                                    $state.upload.files.length - 1
                                  ].uid
                                ]
                              };
                              return (({ tplRef, action, args }) => {
                                return $refs?.[tplRef]?.[action]?.(
                                  ...(args ?? [])
                                );
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runActionOnForm"] != null &&
                          typeof $steps["runActionOnForm"] === "object" &&
                          typeof $steps["runActionOnForm"].then === "function"
                        ) {
                          $steps["runActionOnForm"] = await $steps[
                            "runActionOnForm"
                          ];
                        }

                        $steps["updateFile"] = true
                          ? (() => {
                              const actionArgs = {
                                operation: 0,
                                value:
                                  $state.upload.files[
                                    $state.upload.files.length - 1
                                  ].uid,
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["file"]
                                }
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateFile"] != null &&
                          typeof $steps["updateFile"] === "object" &&
                          typeof $steps["updateFile"].then === "function"
                        ) {
                          $steps["updateFile"] = await $steps["updateFile"];
                        }

                        $steps["supabaseUploadFile"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "fq3u296VTpoRcVc8quSCN3",
                                  opId: "90173013-4c14-4d21-832f-4c3008d30926",
                                  userArgs: {
                                    path: [
                                      $state.upload.files[
                                        $state.upload.files.length - 1
                                      ].uid
                                    ],
                                    content: [
                                      $state.upload.files[
                                        $state.upload.files.length - 1
                                      ].contents
                                    ],
                                    contentType: [
                                      $state.upload.files[
                                        $state.upload.files.length - 1
                                      ].type
                                    ]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: null
                                },
                                continueOnError: false
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["supabaseUploadFile"] != null &&
                          typeof $steps["supabaseUploadFile"] === "object" &&
                          typeof $steps["supabaseUploadFile"].then ===
                            "function"
                        ) {
                          $steps["supabaseUploadFile"] = await $steps[
                            "supabaseUploadFile"
                          ];
                        }

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return setTimeout(() => {}, 10000);
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }).apply(null, eventArgs);
                    }}
                    showUploadList={true}
                  >
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button___11So
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__oEz2L
                        )}
                      >
                        {"Upload"}
                      </div>
                    </AntdButton>
                  </UploadWrapper>
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.form),
                      extendedOnValuesChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["form", "value"],
                          FormWrapper_Helpers
                        ).apply(null, eventArgs);
                      },
                      formItems: [
                        { label: "Name", name: "name", inputType: "Text" },
                        {
                          label: "Message",
                          name: "message",
                          inputType: "Text Area"
                        }
                      ],
                      labelCol: { span: 8, horizontalOnly: true },
                      layout: "vertical",
                      mode: "advanced",
                      onIsSubmittingChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "isSubmitting",
                          ["form", "isSubmitting"],
                          FormWrapper_Helpers
                        ).apply(null, eventArgs);
                      },
                      ref: ref => {
                        $refs["form"] = ref;
                      },
                      submitSlot: null,
                      wrapperCol: { span: 16, horizontalOnly: true }
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "form.value"
                        },
                        {
                          name: "isSubmitting",
                          plasmicStateName: "form.isSubmitting"
                        }
                      ],
                      [],
                      FormWrapper_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <FormWrapper
                        data-plasmic-name={"form"}
                        data-plasmic-override={overrides.form}
                        {...child$Props}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField___45Npo
                          )}
                          hidden={true}
                          initialValue={undefined}
                          label={"id"}
                          name={"id"}
                        >
                          <AntdInputNumber
                            data-plasmic-name={"numberInput"}
                            data-plasmic-override={overrides.numberInput}
                            className={classNames(
                              "__wab_instance",
                              sty.numberInput
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "numberInput",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            type={"number"}
                            value={generateStateValueProp($state, [
                              "numberInput",
                              "value"
                            ])}
                          />
                        </FormItemWrapper>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__xnUxj
                          )}
                        >
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__iAUkI
                            )}
                            initialValue={(() => {
                              try {
                                return $state.printifyId;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            label={
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__d5I8H
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__iHHc9
                                  )}
                                >
                                  {"printify_id"}
                                </div>
                                {(() => {
                                  try {
                                    return (
                                      $state.upload.files[
                                        $state.upload.files.length - 1
                                      ].uid.length > 0
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <PlasmicLink__
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.a,
                                      projectcss.__wab_text,
                                      sty.link___4PjYx
                                    )}
                                    component={Link}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["runCode2"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              customFunction: async () => {
                                                return setTimeout(() => {},
                                                10000);
                                              }
                                            };
                                            return (({ customFunction }) => {
                                              return customFunction();
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["runCode2"] != null &&
                                        typeof $steps["runCode2"] ===
                                          "object" &&
                                        typeof $steps["runCode2"].then ===
                                          "function"
                                      ) {
                                        $steps["runCode2"] = await $steps[
                                          "runCode2"
                                        ];
                                      }

                                      $steps["supabaseGetSignedFileUrl"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              dataOp: {
                                                sourceId:
                                                  "fq3u296VTpoRcVc8quSCN3",
                                                opId: "32e8333b-681c-475d-96a1-f09a13746e01",
                                                userArgs: {
                                                  path: [
                                                    $state.upload.files[
                                                      $state.upload.files
                                                        .length - 1
                                                    ].uid
                                                  ],
                                                  download: [false]
                                                },
                                                cacheKey: null,
                                                invalidatedKeys: null,
                                                roleId:
                                                  "d035f350-edf5-4268-af03-4480b52522b0"
                                              },
                                              continueOnError: false
                                            };
                                            return (async ({
                                              dataOp,
                                              continueOnError
                                            }) => {
                                              try {
                                                const response =
                                                  await executePlasmicDataOp(
                                                    dataOp,
                                                    {
                                                      userAuthToken:
                                                        dataSourcesCtx?.userAuthToken,
                                                      user: dataSourcesCtx?.user
                                                    }
                                                  );
                                                await plasmicInvalidate(
                                                  dataOp.invalidatedKeys
                                                );
                                                return response;
                                              } catch (e) {
                                                if (!continueOnError) {
                                                  throw e;
                                                }
                                                return e;
                                              }
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["supabaseGetSignedFileUrl"] !=
                                          null &&
                                        typeof $steps[
                                          "supabaseGetSignedFileUrl"
                                        ] === "object" &&
                                        typeof $steps[
                                          "supabaseGetSignedFileUrl"
                                        ].then === "function"
                                      ) {
                                        $steps["supabaseGetSignedFileUrl"] =
                                          await $steps[
                                            "supabaseGetSignedFileUrl"
                                          ];
                                      }

                                      $steps["updateSignedUploadUrl"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "signedUploadUrl"
                                                ]
                                              },
                                              operation: 0,
                                              value:
                                                $steps.supabaseGetSignedFileUrl
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateSignedUploadUrl"] !=
                                          null &&
                                        typeof $steps[
                                          "updateSignedUploadUrl"
                                        ] === "object" &&
                                        typeof $steps["updateSignedUploadUrl"]
                                          .then === "function"
                                      ) {
                                        $steps["updateSignedUploadUrl"] =
                                          await $steps["updateSignedUploadUrl"];
                                      }

                                      $steps["runCode"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              customFunction: async () => {
                                                return setTimeout(() => {},
                                                10000);
                                              }
                                            };
                                            return (({ customFunction }) => {
                                              return customFunction();
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["runCode"] != null &&
                                        typeof $steps["runCode"] === "object" &&
                                        typeof $steps["runCode"].then ===
                                          "function"
                                      ) {
                                        $steps["runCode"] = await $steps[
                                          "runCode"
                                        ];
                                      }

                                      $steps["httpPost"] =
                                        $state.signedUploadUrl.signedUrl
                                          .length > 1
                                          ? (() => {
                                              const actionArgs = {
                                                dataOp: {
                                                  sourceId:
                                                    "fumskhn7h2QULzwkXAtFMC",
                                                  opId: "fec6a1b4-0921-4dce-9271-2a2825d7c681",
                                                  userArgs: {
                                                    body: [
                                                      $state.signedUploadUrl
                                                        .signedUrl
                                                    ]
                                                  },
                                                  cacheKey: null,
                                                  invalidatedKeys: [
                                                    "plasmic_refresh_all"
                                                  ],
                                                  roleId:
                                                    "d035f350-edf5-4268-af03-4480b52522b0"
                                                },
                                                continueOnError: false
                                              };
                                              return (async ({
                                                dataOp,
                                                continueOnError
                                              }) => {
                                                try {
                                                  const response =
                                                    await executePlasmicDataOp(
                                                      dataOp,
                                                      {
                                                        userAuthToken:
                                                          dataSourcesCtx?.userAuthToken,
                                                        user: dataSourcesCtx?.user
                                                      }
                                                    );
                                                  await plasmicInvalidate(
                                                    dataOp.invalidatedKeys
                                                  );
                                                  return response;
                                                } catch (e) {
                                                  if (!continueOnError) {
                                                    throw e;
                                                  }
                                                  return e;
                                                }
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["httpPost"] != null &&
                                        typeof $steps["httpPost"] ===
                                          "object" &&
                                        typeof $steps["httpPost"].then ===
                                          "function"
                                      ) {
                                        $steps["httpPost"] = await $steps[
                                          "httpPost"
                                        ];
                                      }

                                      $steps["updatePrintifyId2"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "payloadPrintify"
                                                ]
                                              },
                                              operation: 0,
                                              value: $steps.httpPost
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updatePrintifyId2"] != null &&
                                        typeof $steps["updatePrintifyId2"] ===
                                          "object" &&
                                        typeof $steps["updatePrintifyId2"]
                                          .then === "function"
                                      ) {
                                        $steps["updatePrintifyId2"] =
                                          await $steps["updatePrintifyId2"];
                                      }

                                      $steps["updatePrintifyId"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["printifyId"]
                                              },
                                              operation: 0,
                                              value:
                                                $state.payloadPrintify.data
                                                  .response.id
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updatePrintifyId"] != null &&
                                        typeof $steps["updatePrintifyId"] ===
                                          "object" &&
                                        typeof $steps["updatePrintifyId"]
                                          .then === "function"
                                      ) {
                                        $steps["updatePrintifyId"] =
                                          await $steps["updatePrintifyId"];
                                      }
                                    }}
                                    platform={"nextjs"}
                                  >
                                    {"refresh"}
                                  </PlasmicLink__>
                                ) : null}
                              </Stack__>
                            }
                            name={"printify_id"}
                            preserve={false}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.input9
                                ),
                                disabled: true,
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["input9", "value"],
                                    AntdInput_Helpers
                                  ).apply(null, eventArgs);
                                },
                                placeholder: (() => {
                                  try {
                                    return $state.printifyId;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                readOnly: false,
                                value: generateStateValueProp($state, [
                                  "input9",
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "input9.value"
                                  }
                                ],
                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <AntdInput
                                  data-plasmic-name={"input9"}
                                  data-plasmic-override={overrides.input9}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__qwiuw
                            )}
                            initialValue={(() => {
                              try {
                                return $state.printfulId;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            label={
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__o8QPr
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__rsgKp
                                  )}
                                >
                                  {"printful_id"}
                                </div>
                                {(() => {
                                  try {
                                    return (
                                      $state.upload.files[0].uid.length > 0
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <PlasmicLink__
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.a,
                                      projectcss.__wab_text,
                                      sty.link__gHid
                                    )}
                                    component={Link}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["supabaseGetSignedFileUrl"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              dataOp: {
                                                sourceId:
                                                  "fq3u296VTpoRcVc8quSCN3",
                                                opId: "070fd442-7e10-4f01-bcf6-3f871be38bec",
                                                userArgs: {
                                                  path: [
                                                    $state.upload.files[0].uid
                                                  ]
                                                },
                                                cacheKey: null,
                                                invalidatedKeys: null,
                                                roleId: null
                                              }
                                            };
                                            return (async ({
                                              dataOp,
                                              continueOnError
                                            }) => {
                                              try {
                                                const response =
                                                  await executePlasmicDataOp(
                                                    dataOp,
                                                    {
                                                      userAuthToken:
                                                        dataSourcesCtx?.userAuthToken,
                                                      user: dataSourcesCtx?.user
                                                    }
                                                  );
                                                await plasmicInvalidate(
                                                  dataOp.invalidatedKeys
                                                );
                                                return response;
                                              } catch (e) {
                                                if (!continueOnError) {
                                                  throw e;
                                                }
                                                return e;
                                              }
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["supabaseGetSignedFileUrl"] !=
                                          null &&
                                        typeof $steps[
                                          "supabaseGetSignedFileUrl"
                                        ] === "object" &&
                                        typeof $steps[
                                          "supabaseGetSignedFileUrl"
                                        ].then === "function"
                                      ) {
                                        $steps["supabaseGetSignedFileUrl"] =
                                          await $steps[
                                            "supabaseGetSignedFileUrl"
                                          ];
                                      }

                                      $steps["updateSignedUploadUrl"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "signedUploadUrl"
                                                ]
                                              },
                                              operation: 0,
                                              value:
                                                $steps.supabaseGetSignedFileUrl
                                                  .signedUrl
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateSignedUploadUrl"] !=
                                          null &&
                                        typeof $steps[
                                          "updateSignedUploadUrl"
                                        ] === "object" &&
                                        typeof $steps["updateSignedUploadUrl"]
                                          .then === "function"
                                      ) {
                                        $steps["updateSignedUploadUrl"] =
                                          await $steps["updateSignedUploadUrl"];
                                      }

                                      $steps["httpPost"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              dataOp: {
                                                sourceId:
                                                  "w9bT7zJHQBMsxuYyCMQHKC",
                                                opId: "33e8943d-a696-4511-b4a0-28f93de5d29f",
                                                userArgs: {
                                                  body: [$state.signedUploadUrl]
                                                },
                                                cacheKey: null,
                                                invalidatedKeys: [
                                                  "plasmic_refresh_all"
                                                ],
                                                roleId: null
                                              }
                                            };
                                            return (async ({
                                              dataOp,
                                              continueOnError
                                            }) => {
                                              try {
                                                const response =
                                                  await executePlasmicDataOp(
                                                    dataOp,
                                                    {
                                                      userAuthToken:
                                                        dataSourcesCtx?.userAuthToken,
                                                      user: dataSourcesCtx?.user
                                                    }
                                                  );
                                                await plasmicInvalidate(
                                                  dataOp.invalidatedKeys
                                                );
                                                return response;
                                              } catch (e) {
                                                if (!continueOnError) {
                                                  throw e;
                                                }
                                                return e;
                                              }
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["httpPost"] != null &&
                                        typeof $steps["httpPost"] ===
                                          "object" &&
                                        typeof $steps["httpPost"].then ===
                                          "function"
                                      ) {
                                        $steps["httpPost"] = await $steps[
                                          "httpPost"
                                        ];
                                      }

                                      $steps["updatePrintfulId"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["printfulId"]
                                              },
                                              operation: 0,
                                              value: $steps.httpPost
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updatePrintfulId"] != null &&
                                        typeof $steps["updatePrintfulId"] ===
                                          "object" &&
                                        typeof $steps["updatePrintfulId"]
                                          .then === "function"
                                      ) {
                                        $steps["updatePrintfulId"] =
                                          await $steps["updatePrintfulId"];
                                      }

                                      $steps["updatePrintfulId2"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["printfulId"]
                                              },
                                              operation: 0,
                                              value:
                                                $state.printfulId.data.response
                                                  .result.id
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updatePrintfulId2"] != null &&
                                        typeof $steps["updatePrintfulId2"] ===
                                          "object" &&
                                        typeof $steps["updatePrintfulId2"]
                                          .then === "function"
                                      ) {
                                        $steps["updatePrintfulId2"] =
                                          await $steps["updatePrintfulId2"];
                                      }
                                    }}
                                    platform={"nextjs"}
                                  >
                                    {"refresh"}
                                  </PlasmicLink__>
                                ) : null}
                              </Stack__>
                            }
                            name={"printful_id"}
                            preserve={false}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.input6
                                ),
                                disabled: true,
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["input6", "value"],
                                    AntdInput_Helpers
                                  ).apply(null, eventArgs);
                                },
                                placeholder: (() => {
                                  try {
                                    return $state.printfulId;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                readOnly: false,
                                value: generateStateValueProp($state, [
                                  "input6",
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "input6.value"
                                  }
                                ],
                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <AntdInput
                                  data-plasmic-name={"input6"}
                                  data-plasmic-override={overrides.input6}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__eMDh
                            )}
                            hidden={true}
                            initialValue={undefined}
                            label={
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__qiai9
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__dWb5D
                                  )}
                                >
                                  {"prodigi_id"}
                                </div>
                                {(() => {
                                  try {
                                    return (
                                      $state.upload.files[0].uid.length > 0
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <PlasmicLink__
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.a,
                                      projectcss.__wab_text,
                                      sty.link__ygcJv
                                    )}
                                    component={Link}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["supabaseGetSignedFileUrl"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              dataOp: {
                                                sourceId:
                                                  "fq3u296VTpoRcVc8quSCN3",
                                                opId: "070fd442-7e10-4f01-bcf6-3f871be38bec",
                                                userArgs: {
                                                  path: [
                                                    $state.upload.files[0].uid
                                                  ]
                                                },
                                                cacheKey: null,
                                                invalidatedKeys: null,
                                                roleId: null
                                              }
                                            };
                                            return (async ({
                                              dataOp,
                                              continueOnError
                                            }) => {
                                              try {
                                                const response =
                                                  await executePlasmicDataOp(
                                                    dataOp,
                                                    {
                                                      userAuthToken:
                                                        dataSourcesCtx?.userAuthToken,
                                                      user: dataSourcesCtx?.user
                                                    }
                                                  );
                                                await plasmicInvalidate(
                                                  dataOp.invalidatedKeys
                                                );
                                                return response;
                                              } catch (e) {
                                                if (!continueOnError) {
                                                  throw e;
                                                }
                                                return e;
                                              }
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["supabaseGetSignedFileUrl"] !=
                                          null &&
                                        typeof $steps[
                                          "supabaseGetSignedFileUrl"
                                        ] === "object" &&
                                        typeof $steps[
                                          "supabaseGetSignedFileUrl"
                                        ].then === "function"
                                      ) {
                                        $steps["supabaseGetSignedFileUrl"] =
                                          await $steps[
                                            "supabaseGetSignedFileUrl"
                                          ];
                                      }

                                      $steps["updateSignedUploadUrl"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "signedUploadUrl"
                                                ]
                                              },
                                              operation: 0,
                                              value:
                                                $steps.supabaseGetSignedFileUrl
                                                  .signedUrl
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateSignedUploadUrl"] !=
                                          null &&
                                        typeof $steps[
                                          "updateSignedUploadUrl"
                                        ] === "object" &&
                                        typeof $steps["updateSignedUploadUrl"]
                                          .then === "function"
                                      ) {
                                        $steps["updateSignedUploadUrl"] =
                                          await $steps["updateSignedUploadUrl"];
                                      }

                                      $steps["httpPost"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              dataOp: {
                                                sourceId:
                                                  "fumskhn7h2QULzwkXAtFMC",
                                                opId: "2f49d2c0-5578-48c6-ac37-9ed5dbdaddc0",
                                                userArgs: {
                                                  body: [$state.signedUploadUrl]
                                                },
                                                cacheKey: null,
                                                invalidatedKeys: [
                                                  "plasmic_refresh_all"
                                                ],
                                                roleId: null
                                              }
                                            };
                                            return (async ({
                                              dataOp,
                                              continueOnError
                                            }) => {
                                              try {
                                                const response =
                                                  await executePlasmicDataOp(
                                                    dataOp,
                                                    {
                                                      userAuthToken:
                                                        dataSourcesCtx?.userAuthToken,
                                                      user: dataSourcesCtx?.user
                                                    }
                                                  );
                                                await plasmicInvalidate(
                                                  dataOp.invalidatedKeys
                                                );
                                                return response;
                                              } catch (e) {
                                                if (!continueOnError) {
                                                  throw e;
                                                }
                                                return e;
                                              }
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["httpPost"] != null &&
                                        typeof $steps["httpPost"] ===
                                          "object" &&
                                        typeof $steps["httpPost"].then ===
                                          "function"
                                      ) {
                                        $steps["httpPost"] = await $steps[
                                          "httpPost"
                                        ];
                                      }

                                      $steps["updatePrintifyId"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["printifyId"]
                                              },
                                              operation: 0,
                                              value: $steps.httpPost
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updatePrintifyId"] != null &&
                                        typeof $steps["updatePrintifyId"] ===
                                          "object" &&
                                        typeof $steps["updatePrintifyId"]
                                          .then === "function"
                                      ) {
                                        $steps["updatePrintifyId"] =
                                          await $steps["updatePrintifyId"];
                                      }
                                    }}
                                    platform={"nextjs"}
                                  >
                                    {"refresh"}
                                  </PlasmicLink__>
                                ) : null}
                              </Stack__>
                            }
                            name={"prodigi_id"}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.input10
                                ),
                                disabled: false,
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["input10", "value"],
                                    AntdInput_Helpers
                                  ).apply(null, eventArgs);
                                },
                                value: generateStateValueProp($state, [
                                  "input10",
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "input10.value"
                                  }
                                ],
                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <AntdInput
                                  data-plasmic-name={"input10"}
                                  data-plasmic-override={overrides.input10}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                        </div>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__ptaQb
                          )}
                          hidden={true}
                          initialValue={undefined}
                          label={"created_at"}
                          name={"created_at"}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.input
                              ),
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input", "value"],
                                  AntdInput_Helpers
                                ).apply(null, eventArgs);
                              },
                              value: generateStateValueProp($state, [
                                "input",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input"}
                                data-plasmic-override={overrides.input}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__wkQeZ
                          )}
                          initialValue={(() => {
                            try {
                              return $state.table.selectedRows?.map(i =>
                                parseInt(i.id)
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          label={"recipe_ids"}
                          name={"recipe_ids"}
                          preserve={false}
                          rules={[{ ruleType: "required" }]}
                          shouldUpdate={true}
                        >
                          {(() => {
                            const child$Props = {
                              allowClear: false,
                              className: classNames(
                                "__wab_instance",
                                sty.input2
                              ),
                              disabled: false,
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input2", "value"],
                                  AntdInput_Helpers
                                ).apply(null, eventArgs);
                              },
                              readOnly: true,
                              type: "text",
                              value: generateStateValueProp($state, [
                                "input2",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input2.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input2"}
                                data-plasmic-override={overrides.input2}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        {(() => {
                          const child$Props = {
                            canSelectRows: "multiple",
                            className: classNames("__wab_instance", sty.table),
                            data: (() => {
                              try {
                                return $queries.getRecipesByUser.data;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            fields: (() => {
                              const __composite = [
                                { key: "id", fieldId: "id" },
                                { key: "created_at", fieldId: "created_at" },
                                {
                                  key: "owner",
                                  fieldId: "owner",
                                  isHidden: null
                                },
                                { key: "title", fieldId: "title" },
                                {
                                  key: "printify_blueprints",
                                  fieldId: "printify_blueprints",
                                  isHidden: null
                                },
                                {
                                  key: "printful_blueprints",
                                  fieldId: "printful_blueprints",
                                  isHidden: null
                                },
                                {
                                  key: "Printful Product ID",
                                  fieldId: "Printful Product ID",
                                  isHidden: null
                                },
                                {
                                  key: "Printify Product ID",
                                  fieldId: "Printify Product ID",
                                  isHidden: null
                                }
                              ];
                              __composite["2"]["isHidden"] = true;
                              __composite["4"]["isHidden"] = true;
                              __composite["5"]["isHidden"] = true;
                              __composite["6"]["isHidden"] = true;
                              __composite["7"]["isHidden"] = true;
                              return __composite;
                            })(),

                            onRowSelectionChanged: async (
                              ...eventArgs: any
                            ) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "selectedRowKey",
                                ["table", "selectedRowKey"],
                                RichTable_Helpers
                              ).apply(null, eventArgs);
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "selectedRow",
                                ["table", "selectedRow"],
                                RichTable_Helpers
                              ).apply(null, eventArgs);
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "selectedRows",
                                ["table", "selectedRows"],
                                RichTable_Helpers
                              ).apply(null, eventArgs);
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "selectedRowKeys",
                                ["table", "selectedRowKeys"],
                                RichTable_Helpers
                              ).apply(null, eventArgs);

                              (async (rowKeys, rows) => {
                                const $steps = {};

                                $steps["runActionOnForm"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        tplRef: "form",
                                        action: "setFieldValue",
                                        args: [
                                          ["recipe_ids"],
                                          $state.table.selectedRows?.map(i =>
                                            parseInt(i.id)
                                          )
                                        ]
                                      };
                                      return (({ tplRef, action, args }) => {
                                        return $refs?.[tplRef]?.[action]?.(
                                          ...(args ?? [])
                                        );
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runActionOnForm"] != null &&
                                  typeof $steps["runActionOnForm"] ===
                                    "object" &&
                                  typeof $steps["runActionOnForm"].then ===
                                    "function"
                                ) {
                                  $steps["runActionOnForm"] = await $steps[
                                    "runActionOnForm"
                                  ];
                                }
                              }).apply(null, eventArgs);
                            },
                            scopeClassName: sty["table__instance"],
                            selectedRowKey: generateStateValueProp($state, [
                              "table",
                              "selectedRowKey"
                            ]),
                            selectedRowKeys: generateStateValueProp($state, [
                              "table",
                              "selectedRowKeys"
                            ]),
                            themeResetClassName: classNames(
                              projectcss.root_reset,
                              projectcss.root_reset_tags,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            )
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "selectedRowKey",
                                plasmicStateName: "table.selectedRowKey"
                              },
                              {
                                name: "selectedRow",
                                plasmicStateName: "table.selectedRow"
                              },
                              {
                                name: "selectedRows",
                                plasmicStateName: "table.selectedRows"
                              },
                              {
                                name: "selectedRowKeys",
                                plasmicStateName: "table.selectedRowKeys"
                              }
                            ],
                            [],
                            RichTable_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <RichTable
                              data-plasmic-name={"table"}
                              data-plasmic-override={overrides.table}
                              {...child$Props}
                            />
                          );
                        })()}
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField___3Vt0V
                          )}
                          initialValue={undefined}
                          label={"title"}
                          name={"title"}
                          preserve={false}
                          rules={[{ ruleType: "required" }]}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.input4
                              ),
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input4", "value"],
                                  AntdInput_Helpers
                                ).apply(null, eventArgs);
                              },
                              value: generateStateValueProp($state, [
                                "input4",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input4.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input4"}
                                data-plasmic-override={overrides.input4}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__x6O3V
                          )}
                          initialValue={``}
                          label={"description"}
                          name={"description"}
                          preserve={false}
                          rules={[{ ruleType: "required" }]}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.input3
                              ),
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input3", "value"],
                                  AntdInput_Helpers
                                ).apply(null, eventArgs);
                              },
                              size: "middle",
                              value: generateStateValueProp($state, [
                                "input3",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input3.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input3"}
                                data-plasmic-override={overrides.input3}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__uHm
                          )}
                          hidden={true}
                          initialValue={(() => {
                            try {
                              return currentUser.email;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          label={"email"}
                          name={"email"}
                          rules={[{ ruleType: "required" }]}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.input5
                              ),
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input5", "value"],
                                  AntdInput_Helpers
                                ).apply(null, eventArgs);
                              },
                              value: generateStateValueProp($state, [
                                "input5",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input5.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input5"}
                                data-plasmic-override={overrides.input5}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__ydARc
                          )}
                          hidden={false}
                          initialValue={(() => {
                            try {
                              return $state.file;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          label={"image_id"}
                          name={"image_id"}
                          preserve={false}
                          rules={[{ ruleType: "min", length: 1 }]}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.input7
                              ),
                              disabled: false,
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input7", "value"],
                                  AntdInput_Helpers
                                ).apply(null, eventArgs);
                              },
                              placeholder: (() => {
                                try {
                                  return $state.file;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              readOnly: true,
                              value: generateStateValueProp($state, [
                                "input7",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input7.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input7"}
                                data-plasmic-override={overrides.input7}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__efoi
                          )}
                          initialValue={undefined}
                          label={"tags"}
                          name={"tags"}
                          preserve={false}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.input8
                              ),
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input8", "value"],
                                  AntdInput_Helpers
                                ).apply(null, eventArgs);
                              },
                              value: generateStateValueProp($state, [
                                "input8",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input8.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input8"}
                                data-plasmic-override={overrides.input8}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button__s8ZqQ
                          )}
                          disabled={(() => {
                            try {
                              return $state.file === "" ? true : undefined;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          onClick={async () => {
                            const $steps = {};

                            $steps["updateEmail"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["email"]
                                    },
                                    operation: 0,
                                    value: currentUser.email
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateEmail"] != null &&
                              typeof $steps["updateEmail"] === "object" &&
                              typeof $steps["updateEmail"].then === "function"
                            ) {
                              $steps["updateEmail"] = await $steps[
                                "updateEmail"
                              ];
                            }

                            $steps["postgresCreate"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "83X9ZdYzYUYJtgqe5fwXeX",
                                      opId: "11629cc5-8d8e-4028-a2bc-8a25e4d16070",
                                      userArgs: {
                                        variables: [
                                          {
                                            ...$state.form.value,
                                            printify_id: $state.printifyId,
                                            printful_id: $state.printfulId,
                                            image_id: $state.file
                                          }
                                        ]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: ["plasmic_refresh_all"],
                                      roleId:
                                        "d035f350-edf5-4268-af03-4480b52522b0"
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["postgresCreate"] != null &&
                              typeof $steps["postgresCreate"] === "object" &&
                              typeof $steps["postgresCreate"].then ===
                                "function"
                            ) {
                              $steps["postgresCreate"] = await $steps[
                                "postgresCreate"
                              ];
                            }

                            $steps["refreshData"] = true
                              ? (() => {
                                  const actionArgs = {
                                    queryInvalidation: ["plasmic_refresh_all"]
                                  };
                                  return (async ({ queryInvalidation }) => {
                                    if (!queryInvalidation) {
                                      return;
                                    }
                                    await plasmicInvalidate(queryInvalidation);
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["refreshData"] != null &&
                              typeof $steps["refreshData"] === "object" &&
                              typeof $steps["refreshData"].then === "function"
                            ) {
                              $steps["refreshData"] = await $steps[
                                "refreshData"
                              ];
                            }

                            $steps["goToPortfolio"] = true
                              ? (() => {
                                  const actionArgs = {
                                    destination: `/portfolio`
                                  };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["goToPortfolio"] != null &&
                              typeof $steps["goToPortfolio"] === "object" &&
                              typeof $steps["goToPortfolio"].then === "function"
                            ) {
                              $steps["goToPortfolio"] = await $steps[
                                "goToPortfolio"
                              ];
                            }
                          }}
                          submitsForm={true}
                          type={"primary"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wsDnr
                            )}
                          >
                            {"Submit"}
                          </div>
                        </AntdButton>
                        {(() => {
                          try {
                            return $state.file === "" ? true : undefined;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___6F4Og
                            )}
                          >
                            {"Upload an image"}
                          </div>
                        ) : null}
                      </FormWrapper>
                    );
                  })()}
                </React.Fragment>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "h1",
    "upload",
    "form",
    "numberInput",
    "input9",
    "input6",
    "input10",
    "input",
    "input2",
    "table",
    "input4",
    "input3",
    "input5",
    "input7",
    "input8"
  ],
  pageLayout: [
    "pageLayout",
    "h1",
    "upload",
    "form",
    "numberInput",
    "input9",
    "input6",
    "input10",
    "input",
    "input2",
    "table",
    "input4",
    "input3",
    "input5",
    "input7",
    "input8"
  ],
  h1: ["h1"],
  upload: ["upload"],
  form: [
    "form",
    "numberInput",
    "input9",
    "input6",
    "input10",
    "input",
    "input2",
    "table",
    "input4",
    "input3",
    "input5",
    "input7",
    "input8"
  ],
  numberInput: ["numberInput"],
  input9: ["input9"],
  input6: ["input6"],
  input10: ["input10"],
  input: ["input"],
  input2: ["input2"],
  table: ["table"],
  input4: ["input4"],
  input3: ["input3"],
  input5: ["input5"],
  input7: ["input7"],
  input8: ["input8"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  h1: "h1";
  upload: typeof UploadWrapper;
  form: typeof FormWrapper;
  numberInput: typeof AntdInputNumber;
  input9: typeof AntdInput;
  input6: typeof AntdInput;
  input10: typeof AntdInput;
  input: typeof AntdInput;
  input2: typeof AntdInput;
  table: typeof RichTable;
  input4: typeof AntdInput;
  input3: typeof AntdInput;
  input5: typeof AntdInput;
  input7: typeof AntdInput;
  input8: typeof AntdInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTestUpload2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTestUpload2__VariantsArgs;
    args?: PlasmicTestUpload2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTestUpload2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTestUpload2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTestUpload2__ArgProps,
          internalVariantPropNames: PlasmicTestUpload2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTestUpload2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTestUpload2";
  } else {
    func.displayName = `PlasmicTestUpload2.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={"d035f350-edf5-4268-af03-4480b52522b0"}
      appId={"2Up8DUmBB1Tx5dhznkvCW5"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "2Up8DUmBB1Tx5dhznkvCW5"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicTestUpload2 = Object.assign(
  // Top-level PlasmicTestUpload2 renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    h1: makeNodeComponent("h1"),
    upload: makeNodeComponent("upload"),
    form: makeNodeComponent("form"),
    numberInput: makeNodeComponent("numberInput"),
    input9: makeNodeComponent("input9"),
    input6: makeNodeComponent("input6"),
    input10: makeNodeComponent("input10"),
    input: makeNodeComponent("input"),
    input2: makeNodeComponent("input2"),
    table: makeNodeComponent("table"),
    input4: makeNodeComponent("input4"),
    input3: makeNodeComponent("input3"),
    input5: makeNodeComponent("input5"),
    input7: makeNodeComponent("input7"),
    input8: makeNodeComponent("input8"),

    // Metadata about props expected for PlasmicTestUpload2
    internalVariantProps: PlasmicTestUpload2__VariantProps,
    internalArgProps: PlasmicTestUpload2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicTestUpload2;
/* prettier-ignore-end */
